{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/touxiang.png","path":"images/touxiang.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1493989893335},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1493989893335},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1493989893335},{"_id":"themes/hexo-theme-next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1493989893335},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1493989893335},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1493989893335},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1493989893335},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1493989893335},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1493989893335},{"_id":"themes/hexo-theme-next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1493989893335},{"_id":"themes/hexo-theme-next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1493989893335},{"_id":"themes/hexo-theme-next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1493989893335},{"_id":"themes/hexo-theme-next/_config.yml","hash":"6ec7003fa0bdec578c4452834a10908fb768873d","modified":1493989893350},{"_id":"themes/hexo-theme-next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1493989893350},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1493989893350},{"_id":"themes/hexo-theme-next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1493989893413},{"_id":"source/about/index.md","hash":"e7688f5fec8c6e1d2995f6e4a8317b17cb32ab26","modified":1493989893335},{"_id":"source/_posts/CSS-style-settings-tips.md","hash":"b913fd6feee852e10788b9ff6fc6446c1dc1d026","modified":1493989893288},{"_id":"source/_posts/DevExpress-ChartControl.md","hash":"308684595cdea4e212c87784b9ff6d0991f4b6a2","modified":1493989893288},{"_id":"source/_posts/Git-commonly-used-command-summary.md","hash":"c6a58a17de4fd4e4f62a005fdcc174381a112383","modified":1493989893288},{"_id":"source/_posts/Hexo-github搭建博客.md","hash":"3d245c85cd20bd24c5475cd13665a93881604006","modified":1493989893303},{"_id":"source/_posts/Java-Socket.md","hash":"d43b22cd137acfdf0a98cce0dff42bec1dc4f598","modified":1493989893303},{"_id":"source/_posts/Java-synchronized.md","hash":"04e1597434c645ceaa613ba0b852847d0a624a07","modified":1493989893303},{"_id":"source/_posts/WPF-DevExpress-Pie.md","hash":"ed9b4565faecc5a3539b22fe15885cfa35230fe4","modified":1493989893303},{"_id":"source/_posts/WPF-DevExpress-XYDiagram.md","hash":"dcf4fc3d48e92fe3d9a0e33fe5ee7287f8d93038","modified":1493989893303},{"_id":"source/_posts/What-Happened.md","hash":"c9a0be6c32c2c4bd3864b5dbd33ce2e6fead28c2","modified":1493989893319},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1493988602285},{"_id":"source/_posts/regular-expression-for-JavaScript.md","hash":"aba3dcc76a7550b7ec772a41c54141a480448343","modified":1493989893335},{"_id":"source/_posts/WinForm-DevExpress-Base.md","hash":"7b038e7443299640062ba4e87ee9abb60da49ad3","modified":1493989893319},{"_id":"source/tags/index.md","hash":"4e7c4fd702c2c11798a6fd99f977418a1e2a72e3","modified":1493989893335},{"_id":"source/categories/index.md","hash":"7d5bf035dc413c3b7fc575a7c61f3717e0e3baa7","modified":1493989893335},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1493989893335},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1493989893335},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1493989893350},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1493989893350},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1493989893350},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1493989893413},{"_id":"themes/hexo-theme-next/source/favicon.png","hash":"fad0d685cd4cf10517023ddc693717673f3a8786","modified":1493989893491},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1493989893663},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1493989893663},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1493989893663},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893491},{"_id":"source/_posts/DevExpress-ChartControl/Bar_chart.png","hash":"7bda422ad5eddf45ca158dec5a238d6cf718cf8b","modified":1493989893288},{"_id":"source/_posts/DevExpress-ChartControl/Line_chart.png","hash":"3785372a3ad31f1807c05896e0822b7c917f2f5e","modified":1493989893288},{"_id":"source/_posts/DevExpress-ChartControl/Line_chart_more.png","hash":"b9a645e08e120cee43ada2a6c8403c1b65362aa4","modified":1493989893288},{"_id":"source/_posts/DevExpress-ChartControl/Pie_chart.png","hash":"dac3d53de0dbfbb9cb6c6a2e325df3017ba54d93","modified":1493989893288},{"_id":"source/_posts/Git-commonly-used-command-summary/remote_git_Init.png","hash":"5697ab03ee800079d406a51ae92454da03033559","modified":1493989893303},{"_id":"source/_posts/Git-commonly-used-command-summary/remote_git_operate.png","hash":"04856d25500a0215cf46c9393713671410e2b003","modified":1493989893303},{"_id":"source/_posts/WPF-DevExpress-ChartControl/wpf_pie.png","hash":"ec905d0599806ee17b90ba0743f4a0c1d05d05bb","modified":1493989893303},{"_id":"source/_posts/What Happened/Image11.png","hash":"f050e2a2af1785a5f216c4ea736fe7228d592bd2","modified":1493989893319},{"_id":"source/_posts/What Happened/Image13.png","hash":"30c5328a25d1a6be16bcd0ff8eb55b8461a92040","modified":1493989893319},{"_id":"source/_posts/What Happened/Image2.png","hash":"f5c8701458568288f4c95a6a3412f5c60188d300","modified":1493989893319},{"_id":"source/_posts/What Happened/Image3.png","hash":"cdc641b8a4298bce2996812fbd326607ddade0dc","modified":1493989893319},{"_id":"source/_posts/What Happened/Image6.png","hash":"75b53c6b7ba41bd65a292ad3f7d6e8fae719e836","modified":1493989893319},{"_id":"source/_posts/What Happened/Image7.png","hash":"09fc6aa56c9a1c708820c7c1a80fc1a4863aa3ca","modified":1493989893319},{"_id":"source/_posts/regular-expression-for-JavaScript/1486535065476.png","hash":"11162480ec17134ffdfc68b89940a900e5ae8d56","modified":1493989893335},{"_id":"source/_posts/regular-expression-for-JavaScript/1486535207035.png","hash":"fb9d630c32be63e9a0e70be8e1697df2b76bbfd2","modified":1493989893335},{"_id":"source/_posts/regular-expression-for-JavaScript/1486537334993.png","hash":"da45a17e019197f2b93ab6bd0553a62b7e7e49e7","modified":1493989893335},{"_id":"source/_posts/regular-expression-for-JavaScript/1486537536585.png","hash":"6aea59754f2cb7137be081ac319f1c0da82aaf90","modified":1493989893335},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493989893350},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493989893350},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1493989893397},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1493989893413},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1493989893506},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1493989893506},{"_id":"source/_posts/Git-commonly-used-command-summary/gitInit.png","hash":"a441acb96013dfd9832194ca08191e316e7fa3ed","modified":1493989893288},{"_id":"source/_posts/Git-commonly-used-command-summary/github.png","hash":"862d9a4f6d94568f8e18d52a88fc87ed5bb564fd","modified":1493989893288},{"_id":"source/_posts/WPF-DevExpress-ChartControl/wpf_xydiagram.png","hash":"633a2e14fb4da7f0a18cd95a027c54e23e110aae","modified":1493989893303},{"_id":"source/_posts/What Happened/Image8.png","hash":"b561c82ba319fa05f3064e8683a51fa93088970a","modified":1493989893319},{"_id":"source/_posts/What Happened/Image9.png","hash":"b561c82ba319fa05f3064e8683a51fa93088970a","modified":1493989893319},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893381},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493989893491},{"_id":"source/_posts/Git-commonly-used-command-summary/git_operate.png","hash":"001e66cf5f92ce84d57c49e76f136fcaa210e2ae","modified":1493989893288},{"_id":"source/_posts/What Happened/Image12.png","hash":"fb1d73a8fed3a032e0552db8c26185f8af331130","modified":1493989893319},{"_id":"source/_posts/What Happened/Image4.png","hash":"a9c8f6da9d027f0a4190d027daa7ad70d2a29241","modified":1493989893319},{"_id":"source/_posts/What Happened/Image5.png","hash":"a66c95f53f2ad9fc994a2eb549a97b148fbf81bb","modified":1493989893319},{"_id":"themes/hexo-theme-next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1493989893350},{"_id":"themes/hexo-theme-next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1493989893350},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1493989893366},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1493989893413},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1493989893413},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1493989893663},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1493989893663},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1493989893663},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1493989893663},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1493989893647},{"_id":"source/_posts/What Happened/Image1.png","hash":"261a97aaaf21f484e6bc6316222c9b4c84e3f705","modified":1493989893303},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"0506bcaf3dff28088bac6fdb8c8dbb4dc8915dfa","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1493989893381},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1493989893397},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1493989893413},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1493989893663},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1493989893428},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1493989893444},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1493989893460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1493989893475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493989893491},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1493989893585},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1493989893616},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1493989893631},{"_id":"source/_posts/What Happened/Image10.png","hash":"d31db7dd0cf8e73b545660941eec7b60f47b862b","modified":1493989893319},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1493989893600},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1493989893647},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1493989893631},{"_id":"themes/hexo-theme-next/source/images/touxiang.png","hash":"45c6e6519547af92c78b68a6b70100b0ad1d7779","modified":1493989893585},{"_id":"public/about/index.html","hash":"21b912267b77046a1fa45f18e37fdda0a38f6ec9","modified":1493989914185},{"_id":"public/tags/index.html","hash":"d487ed7c4dfbca934de3fd973e81c18e3fc76113","modified":1493989914185},{"_id":"public/categories/index.html","hash":"e169f92a42d90d9e68bac120f7165b8051a3159a","modified":1493989914185},{"_id":"public/2017/05/05/Hexo-github搭建博客/index.html","hash":"a2cf3009dd4abdc2f580dc565b6d5429fbec5c35","modified":1493989914185},{"_id":"public/archives/index.html","hash":"cfe89e235e6cb0e97d55dec51a1a32eddaf7fb6e","modified":1493989914185},{"_id":"public/archives/page/2/index.html","hash":"06820c0c90b9c3fa325d72cc8fd6b7ef87e44af2","modified":1493989914185},{"_id":"public/archives/page/3/index.html","hash":"f2845119a7917fa2220a0bb3afec0f028aaaa022","modified":1493989914185},{"_id":"public/archives/2016/index.html","hash":"3de87404158aea5b0a092b4b0dc4a550a02f5a58","modified":1493989914185},{"_id":"public/archives/2016/12/index.html","hash":"218f4415e3d7ba07aab1a55b63a298171ff67aac","modified":1493989914185},{"_id":"public/archives/2017/index.html","hash":"e1b8d24a5bcd8381dbf68f0cf368590cc5835ffa","modified":1493989914185},{"_id":"public/archives/2017/page/2/index.html","hash":"75055a6fdf677afa30b07f2e49b59129d0028099","modified":1493989914185},{"_id":"public/archives/2017/02/index.html","hash":"2fc6f104bfd2f9172d4acd1df4db41dbe0998a0c","modified":1493989914185},{"_id":"public/archives/2017/02/page/2/index.html","hash":"04fcb6299a8a8552e5d38393176eddd075580449","modified":1493989914185},{"_id":"public/archives/2017/05/index.html","hash":"f8df53b678d43c2dd4a3f9834a1ad287c78359aa","modified":1493989914185},{"_id":"public/categories/前端知识/index.html","hash":"03229d8e2c6b7e59278ae09523100e5066e78006","modified":1493989914185},{"_id":"public/categories/DevExpress/index.html","hash":"849d4bf91557876d8fbcd2bdfcd8963c0930def0","modified":1493989914185},{"_id":"public/categories/工具使用/index.html","hash":"b610b5a11df257ed5612e77b26027651c66fe35d","modified":1493989914185},{"_id":"public/categories/Java/index.html","hash":"bc9801d0adf2c964039abd82c99158e367fd10e2","modified":1493989914185},{"_id":"public/categories/计算机网络/index.html","hash":"f995af5414375315991cee0bab2c0b91342bd426","modified":1493989914185},{"_id":"public/categories/JavaScript/index.html","hash":"f334b6c9d1dea7e033062f109a9d26ad7e9434d0","modified":1493989914185},{"_id":"public/tags/HTML-CSS/index.html","hash":"face62b1ca369e2e0f382d0a9c855843a3ec58b2","modified":1493989914185},{"_id":"public/tags/DevExpress-Chart/index.html","hash":"f8c4dec8a99421edffbf63922747c90b089b1f44","modified":1493989914185},{"_id":"public/tags/WinForm/index.html","hash":"a33ee5a525d7ff56e73941ba8f645ce6a1b5c532","modified":1493989914185},{"_id":"public/tags/Git/index.html","hash":"a284c96cc62f5e3cc463d8fffb17fe5e6d77a2e1","modified":1493989914185},{"_id":"public/tags/hexo/index.html","hash":"99fb7a441b099e689677b68ffb70cb107e1fcab5","modified":1493989914185},{"_id":"public/tags/Java/index.html","hash":"5f88dcfd2502e2b2d6fa327e92cdee6bae388e0b","modified":1493989914185},{"_id":"public/tags/Socekt/index.html","hash":"991138778342e539ed01783a7f4946868938f95a","modified":1493989914185},{"_id":"public/tags/多线程/index.html","hash":"61ffc9b501612e38ae4bb659bcb235feb0b0e200","modified":1493989914185},{"_id":"public/tags/WPF/index.html","hash":"3f144c0ecd50853b58f27469ace15a780937ff22","modified":1493989914185},{"_id":"public/tags/计算机网络/index.html","hash":"3bffc83210b9415e3343f78c0cf3667906ca0c38","modified":1493989914185},{"_id":"public/tags/正则表达式/index.html","hash":"a632c16b5507eecea81bf09af42a2a46bee50372","modified":1493989914185},{"_id":"public/tags/JavaScript/index.html","hash":"f3f44774232ba7c502d2efd3cc7046a41cea4033","modified":1493989914185},{"_id":"public/2017/05/05/hello-world/index.html","hash":"ce3c1194b97bb38989bf002ceb0d1110f1f954d5","modified":1493989914185},{"_id":"public/2017/05/05/What-Happened/index.html","hash":"545f9a7d6e87bd4cc8b80d5fb5a42b7cb34ab0ff","modified":1493989914185},{"_id":"public/2017/02/17/Java-Socket/index.html","hash":"1ee1f822e247c87c69648a8f4fb377c79e1f36a7","modified":1493989914185},{"_id":"public/2017/02/16/Java-synchronized/index.html","hash":"8e43f86e2302eb1d0dc011b8704e50ea5dc2fb8f","modified":1493989914185},{"_id":"public/2017/02/11/WPF-DevExpress-Pie/index.html","hash":"cab38218106424f1298ef4fb2fe27d393dfdfa90","modified":1493989914185},{"_id":"public/2017/02/11/WPF-DevExpress-XYDiagram/index.html","hash":"b9e05a1e710a5c459ee297fd1e37cdf7360a9fc1","modified":1493989914185},{"_id":"public/2017/02/11/WinForm-DevExpress-Base/index.html","hash":"de159ca7ae625f45ff5b2ef0b4ad237439586d2c","modified":1493989914185},{"_id":"public/2017/02/08/regular-expression-for-JavaScript/index.html","hash":"77060626a9bfd33cad6b292d86fc5f1577dd764f","modified":1493989914185},{"_id":"public/2016/12/07/DevExpress-ChartControl/index.html","hash":"8f0921b6b250f6c610e5323d0702820507fd20aa","modified":1493989914185},{"_id":"public/2016/12/05/Git-commonly-used-command-summary/index.html","hash":"87f02e676a055d0fb6d86ac22ae59def30578170","modified":1493989914185},{"_id":"public/2016/12/04/CSS-style-settings-tips/index.html","hash":"8da5d8fc7e3780f16c5c303e960ecc214f1f7a35","modified":1493989914185},{"_id":"public/index.html","hash":"741b42da857cb1d2b37aa5cb1a7818b0a28e968e","modified":1493989914185},{"_id":"public/page/2/index.html","hash":"b0fe1480e1a33cc1445733f450381a12344fb319","modified":1493989914185},{"_id":"public/page/3/index.html","hash":"7e4d2e22759e2f6037b7c8cacbef4162f49bfd0d","modified":1493989914185},{"_id":"public/favicon.png","hash":"fad0d685cd4cf10517023ddc693717673f3a8786","modified":1493989914216},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1493989914216},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1493989914216},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1493989914216},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1493989914216},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1493989914216},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1493989914216},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1493989914216},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1493989914216},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1493989914216},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493989914216},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1493989914216},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493989914216},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1493989914216},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1493989914216},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1493989914216},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1493989914216},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493989914216},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493989914216},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493989914216},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493989914216},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493989914216},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493989914216},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1493989914216},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1493989914216},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1493989914216},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1493989914216},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1493989914216},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493989914216},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1493989915216},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1493989915232},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1493989915248},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1493989915248},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1493989915248},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1493989915248},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1493989915248},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1493989915248},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1493989915248},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1493989915248},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1493989915248},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1493989915248},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1493989915248},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1493989915248},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1493989915248},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1493989915248},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1493989915248},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1493989915248},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1493989915248},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1493989915248},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1493989915248},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1493989915248},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1493989915248},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1493989915248},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1493989915248},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1493989915248},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1493989915248},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1493989915248},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1493989915248},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1493989915248},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1493989915248},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1493989915248},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1493989915248},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1493989915248},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1493989915248},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1493989915248},{"_id":"public/css/main.css","hash":"60d380cc8e91556f9fff7f13653cdb975993af73","modified":1493989915248},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1493989915248},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1493989915248},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1493989915248},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1493989915248},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1493989915248},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1493989915248},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1493989915248},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1493989915248},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1493989915248},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1493989915248},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1493989915248},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1493989915248},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1493989915248},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1493989915248},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1493989915248},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1493989915248},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1493989915248},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1493989915248},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1493989915248},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1493989915248},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1493989915263},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1493989915326},{"_id":"public/images/touxiang.png","hash":"45c6e6519547af92c78b68a6b70100b0ad1d7779","modified":1493989915529}],"Category":[{"name":"前端知识","_id":"cj2bv0o5t0004poc59vxno6gq"},{"name":"DevExpress","_id":"cj2bv0o69000apoc5fg5l52hl"},{"name":"工具使用","_id":"cj2bv0o6o000gpoc520ju6ryv"},{"name":"Java","_id":"cj2bv0o74000tpoc5uv58f4f1"},{"name":"计算机网络","_id":"cj2bv0o7k0016poc5xlgf2u2o"},{"name":"JavaScript","_id":"cj2bv0o7k0019poc56uszjfw5"}],"Data":[],"Page":[{"title":"about","date":"2016-12-04T15:49:06.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-12-04 23:49:06\ncomments: false\n---\n","updated":"2017-05-05T13:11:33.335Z","path":"about/index.html","layout":"page","_id":"cj2bv0o5e0000poc59r4euya5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2016-12-04T15:48:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-12-04 23:48:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-05-05T13:11:33.335Z","path":"tags/index.html","layout":"page","_id":"cj2bv0o5e0002poc54n7j5t88","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-02-14T14:21:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-14 22:21:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-05T13:11:33.335Z","path":"categories/index.html","layout":"page","_id":"cj2bv0o5t0006poc5kyzrm32l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS样式设置小技巧","date":"2016-12-04T11:55:49.000Z","description":"CSS样式设置的一些小技巧，包括水平、垂直居中，隐性改变display类型，以及清除浮动的方法","_content":"# 一、水平居中设置\n   行内元素居中设置：如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。代码示例如下：\n```\nHTML代码\n<body>\n  <div class=\"txtCenter\">我想要在父容器中水平居中显示。</div>\n</body>\nCSS代码\n<style>\n  .txtCenter{\n    text-align:center;\n  }\n</style>\n```\n   定宽块状元素居中设置：满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。代码示例如下：\n```\nHTML代码\n<body>\n  <div>我是定宽块状元素，哈哈，我要水平居中显示。</div>\n</body>\nCSS代码\n<style>\ndiv{\n    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/\n    \n    width:200px;/*定宽*/\n    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */\n}\n</style>\n```\n   不定宽块状元素居中设置：\n       1. 加入 table 标签，是利用table标签的长度自适应性---即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。代码示例如下：\n```\nHTML代码\n<div>\n <table>\n  <tbody>\n    <tr><td>\n    <ul>\n        <li>我是第一行文本</li>\n        <li>我是第二行文本</li>\n        <li>我是第三行文本</li>\n    </ul>\n    </td></tr>\n  </tbody>\n </table>\n</div>\nCSS代码\n<style>\ntable{\n    border:1px solid;\n    margin:0 auto;\n}\n</style>\n```\n        2. 设置 display: inline 方法：改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。代码如下：\n```\nHTML代码\n<body>\n<div class=\"container\">\n    <ul>\n        <li><a href=\"#\">1</a></li>\n        <li><a href=\"#\">2</a></li>\n        <li><a href=\"#\">3</a></li>\n    </ul>\n</div>\n</body>\nCSS代码\n<style>\n.container{\n    text-align:center;\n}\n/* margin:0;padding:0（消除文本与div边框之间的间隙）*/\n.container ul{\n    list-style:none;\n    margin:0;\n    padding:0;\n    display:inline;\n}\n/* margin-right:8px（设置li文本之间的间隔）*/\n.container li{\n    margin-right:8px;\n    display:inline;\n}\n</style>\n```\n        3. 设置 position:relative 和 left:50%：通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。代码如下：\n```\nHTML代码\n<body>\n<div class=\"container\">\n    <ul>\n        <li><a href=\"#\">1</a></li>\n        <li><a href=\"#\">2</a></li>\n        <li><a href=\"#\">3</a></li>\n    </ul>\n</div>\n</body>\nCSS代码\n<style>\n.container{\n    float:left;\n    position:relative;\n    left:50%\n}\n\n.container ul{\n    list-style:none;\n    margin:0;\n    padding:0;\n    \n    position:relative;\n    left:-50%;\n}\n.container li{float:left;display:inline;margin-right:8px;}\n</style>\n```\n# 二、垂直居中设置\n   父元素高度确定的单行文本:\n       父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。代码如下：\n```\nHTML代码\n<div class=\"container\">\n    hello, world!\n</div>\nCSS代码\n<style>\n.container{\n    height:100px;\n    line-height:100px;\n    background:#999;\n}\n</style>\n```\n   父元素高度确定的多行文本:\n       \t1. 使用插入 table  (包括tbody、tr、td)标签，同时设置 vertical-align：middle。css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。代码如下：\n```\nHTML代码\n<body>\n<table><tbody><tr><td class=\"wrap\">\n<div>\n    <p>看我是否可以居中。</p>\n</div>\n</td></tr></tbody></table>\n</body>\nCSS代码\ntable td{height:500px;background:#ccc}\n/*因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。*/\n```\n\t\t2. 在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。代码如下:\n```\nHTML代码\n<div class=\"container\">\n    <div>\n        <p>看我是否可以居中。</p>\n        <p>看我是否可以居中。</p>\n        <p>看我是否可以居中。</p>\n    </div>\n</div>\nCSS代码\n<style>\n.container{\n    height:300px;\n    background:#ccc;\n    display:table-cell;/*IE8以上及Chrome、Firefox*/\n    vertical-align:middle;/*IE8以上及Chrome、Firefox*/\n}\n</style>\n```\n   这种方法的好处是不用添加多余的无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7而且这样修改display的block变成了table-cell，破坏了原有的块状元素的性质。\n# 三、隐性改变display类型\n   当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：\n\t\t1. position : absolute \n\t\t2. float : left 或 float:right \n   时，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。代码如下： \n```\nHTML代码\n<div class=\"container\">\n    <a href=\"#\" title=\"\">进入课程请单击这里</a>\n</div>\nCSS代码\n<style>\n.container a{\n    position:absolute;\n    width:200px;\n    background:#ccc;\n}\n</style>\n```\n# 四、清除浮动的方法\n\n\t1. 改变css样式 clear: both;\n\t2. width:100%; overflow: hidden;","source":"_posts/CSS-style-settings-tips.md","raw":"---\ntitle: CSS样式设置小技巧\ndate: 2016-12-04 19:55:49\ncategories: 前端知识\ntags: HTML+CSS\ndescription: CSS样式设置的一些小技巧，包括水平、垂直居中，隐性改变display类型，以及清除浮动的方法\n---\n# 一、水平居中设置\n   行内元素居中设置：如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。代码示例如下：\n```\nHTML代码\n<body>\n  <div class=\"txtCenter\">我想要在父容器中水平居中显示。</div>\n</body>\nCSS代码\n<style>\n  .txtCenter{\n    text-align:center;\n  }\n</style>\n```\n   定宽块状元素居中设置：满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。代码示例如下：\n```\nHTML代码\n<body>\n  <div>我是定宽块状元素，哈哈，我要水平居中显示。</div>\n</body>\nCSS代码\n<style>\ndiv{\n    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/\n    \n    width:200px;/*定宽*/\n    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */\n}\n</style>\n```\n   不定宽块状元素居中设置：\n       1. 加入 table 标签，是利用table标签的长度自适应性---即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。代码示例如下：\n```\nHTML代码\n<div>\n <table>\n  <tbody>\n    <tr><td>\n    <ul>\n        <li>我是第一行文本</li>\n        <li>我是第二行文本</li>\n        <li>我是第三行文本</li>\n    </ul>\n    </td></tr>\n  </tbody>\n </table>\n</div>\nCSS代码\n<style>\ntable{\n    border:1px solid;\n    margin:0 auto;\n}\n</style>\n```\n        2. 设置 display: inline 方法：改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。代码如下：\n```\nHTML代码\n<body>\n<div class=\"container\">\n    <ul>\n        <li><a href=\"#\">1</a></li>\n        <li><a href=\"#\">2</a></li>\n        <li><a href=\"#\">3</a></li>\n    </ul>\n</div>\n</body>\nCSS代码\n<style>\n.container{\n    text-align:center;\n}\n/* margin:0;padding:0（消除文本与div边框之间的间隙）*/\n.container ul{\n    list-style:none;\n    margin:0;\n    padding:0;\n    display:inline;\n}\n/* margin-right:8px（设置li文本之间的间隔）*/\n.container li{\n    margin-right:8px;\n    display:inline;\n}\n</style>\n```\n        3. 设置 position:relative 和 left:50%：通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。代码如下：\n```\nHTML代码\n<body>\n<div class=\"container\">\n    <ul>\n        <li><a href=\"#\">1</a></li>\n        <li><a href=\"#\">2</a></li>\n        <li><a href=\"#\">3</a></li>\n    </ul>\n</div>\n</body>\nCSS代码\n<style>\n.container{\n    float:left;\n    position:relative;\n    left:50%\n}\n\n.container ul{\n    list-style:none;\n    margin:0;\n    padding:0;\n    \n    position:relative;\n    left:-50%;\n}\n.container li{float:left;display:inline;margin-right:8px;}\n</style>\n```\n# 二、垂直居中设置\n   父元素高度确定的单行文本:\n       父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。代码如下：\n```\nHTML代码\n<div class=\"container\">\n    hello, world!\n</div>\nCSS代码\n<style>\n.container{\n    height:100px;\n    line-height:100px;\n    background:#999;\n}\n</style>\n```\n   父元素高度确定的多行文本:\n       \t1. 使用插入 table  (包括tbody、tr、td)标签，同时设置 vertical-align：middle。css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。代码如下：\n```\nHTML代码\n<body>\n<table><tbody><tr><td class=\"wrap\">\n<div>\n    <p>看我是否可以居中。</p>\n</div>\n</td></tr></tbody></table>\n</body>\nCSS代码\ntable td{height:500px;background:#ccc}\n/*因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。*/\n```\n\t\t2. 在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。代码如下:\n```\nHTML代码\n<div class=\"container\">\n    <div>\n        <p>看我是否可以居中。</p>\n        <p>看我是否可以居中。</p>\n        <p>看我是否可以居中。</p>\n    </div>\n</div>\nCSS代码\n<style>\n.container{\n    height:300px;\n    background:#ccc;\n    display:table-cell;/*IE8以上及Chrome、Firefox*/\n    vertical-align:middle;/*IE8以上及Chrome、Firefox*/\n}\n</style>\n```\n   这种方法的好处是不用添加多余的无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7而且这样修改display的block变成了table-cell，破坏了原有的块状元素的性质。\n# 三、隐性改变display类型\n   当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：\n\t\t1. position : absolute \n\t\t2. float : left 或 float:right \n   时，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。代码如下： \n```\nHTML代码\n<div class=\"container\">\n    <a href=\"#\" title=\"\">进入课程请单击这里</a>\n</div>\nCSS代码\n<style>\n.container a{\n    position:absolute;\n    width:200px;\n    background:#ccc;\n}\n</style>\n```\n# 四、清除浮动的方法\n\n\t1. 改变css样式 clear: both;\n\t2. width:100%; overflow: hidden;","slug":"CSS-style-settings-tips","published":1,"updated":"2017-05-05T13:11:33.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o5e0001poc5rbe37bik","content":"<h1 id=\"一、水平居中设置\"><a href=\"#一、水平居中设置\" class=\"headerlink\" title=\"一、水平居中设置\"></a>一、水平居中设置</h1><p>   行内元素居中设置：如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。代码示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;div class=&quot;txtCenter&quot;&gt;我想要在父容器中水平居中显示。&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">  .txtCenter&#123;</div><div class=\"line\">    text-align:center;</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>   定宽块状元素居中设置：满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。代码示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;div&gt;我是定宽块状元素，哈哈，我要水平居中显示。&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">div&#123;</div><div class=\"line\">    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/</div><div class=\"line\">    </div><div class=\"line\">    width:200px;/*定宽*/</div><div class=\"line\">    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>   不定宽块状元素居中设置：</p>\n<pre><code>1. 加入 table 标签，是利用table标签的长度自适应性---即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。代码示例如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\"> &lt;table&gt;</div><div class=\"line\">  &lt;tbody&gt;</div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li&gt;我是第一行文本&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;我是第二行文本&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;我是第三行文本&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">    &lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">  &lt;/tbody&gt;</div><div class=\"line\"> &lt;/table&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">table&#123;</div><div class=\"line\">    border:1px solid;</div><div class=\"line\">    margin:0 auto;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<pre><code>2. 设置 display: inline 方法：改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    text-align:center;</div><div class=\"line\">&#125;</div><div class=\"line\">/* margin:0;padding:0（消除文本与div边框之间的间隙）*/</div><div class=\"line\">.container ul&#123;</div><div class=\"line\">    list-style:none;</div><div class=\"line\">    margin:0;</div><div class=\"line\">    padding:0;</div><div class=\"line\">    display:inline;</div><div class=\"line\">&#125;</div><div class=\"line\">/* margin-right:8px（设置li文本之间的间隔）*/</div><div class=\"line\">.container li&#123;</div><div class=\"line\">    margin-right:8px;</div><div class=\"line\">    display:inline;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<pre><code>3. 设置 position:relative 和 left:50%：通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    float:left;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    left:50%</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.container ul&#123;</div><div class=\"line\">    list-style:none;</div><div class=\"line\">    margin:0;</div><div class=\"line\">    padding:0;</div><div class=\"line\">    </div><div class=\"line\">    position:relative;</div><div class=\"line\">    left:-50%;</div><div class=\"line\">&#125;</div><div class=\"line\">.container li&#123;float:left;display:inline;margin-right:8px;&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"二、垂直居中设置\"><a href=\"#二、垂直居中设置\" class=\"headerlink\" title=\"二、垂直居中设置\"></a>二、垂直居中设置</h1><p>   父元素高度确定的单行文本:<br>       父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    hello, world!</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    height:100px;</div><div class=\"line\">    line-height:100px;</div><div class=\"line\">    background:#999;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>   父元素高度确定的多行文本:</p>\n<pre><code>1. 使用插入 table  (包括tbody、tr、td)标签，同时设置 vertical-align：middle。css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;wrap&quot;&gt;</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">table td&#123;height:500px;background:#ccc&#125;</div><div class=\"line\">/*因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。*/</div></pre></td></tr></table></figure>\n<pre><code>2. 在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。代码如下:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    height:300px;</div><div class=\"line\">    background:#ccc;</div><div class=\"line\">    display:table-cell;/*IE8以上及Chrome、Firefox*/</div><div class=\"line\">    vertical-align:middle;/*IE8以上及Chrome、Firefox*/</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>   这种方法的好处是不用添加多余的无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7而且这样修改display的block变成了table-cell，破坏了原有的块状元素的性质。</p>\n<h1 id=\"三、隐性改变display类型\"><a href=\"#三、隐性改变display类型\" class=\"headerlink\" title=\"三、隐性改变display类型\"></a>三、隐性改变display类型</h1><p>   当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：</p>\n<pre><code>1. position : absolute \n2. float : left 或 float:right \n</code></pre><p>   时，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;a href=&quot;#&quot; title=&quot;&quot;&gt;进入课程请单击这里&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container a&#123;</div><div class=\"line\">    position:absolute;</div><div class=\"line\">    width:200px;</div><div class=\"line\">    background:#ccc;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"四、清除浮动的方法\"><a href=\"#四、清除浮动的方法\" class=\"headerlink\" title=\"四、清除浮动的方法\"></a>四、清除浮动的方法</h1><pre><code>1. 改变css样式 clear: both;\n2. width:100%; overflow: hidden;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、水平居中设置\"><a href=\"#一、水平居中设置\" class=\"headerlink\" title=\"一、水平居中设置\"></a>一、水平居中设置</h1><p>   行内元素居中设置：如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。代码示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;div class=&quot;txtCenter&quot;&gt;我想要在父容器中水平居中显示。&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">  .txtCenter&#123;</div><div class=\"line\">    text-align:center;</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>   定宽块状元素居中设置：满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。代码示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;div&gt;我是定宽块状元素，哈哈，我要水平居中显示。&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">div&#123;</div><div class=\"line\">    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/</div><div class=\"line\">    </div><div class=\"line\">    width:200px;/*定宽*/</div><div class=\"line\">    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>   不定宽块状元素居中设置：</p>\n<pre><code>1. 加入 table 标签，是利用table标签的长度自适应性---即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。代码示例如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\"> &lt;table&gt;</div><div class=\"line\">  &lt;tbody&gt;</div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li&gt;我是第一行文本&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;我是第二行文本&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;我是第三行文本&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">    &lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">  &lt;/tbody&gt;</div><div class=\"line\"> &lt;/table&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">table&#123;</div><div class=\"line\">    border:1px solid;</div><div class=\"line\">    margin:0 auto;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<pre><code>2. 设置 display: inline 方法：改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    text-align:center;</div><div class=\"line\">&#125;</div><div class=\"line\">/* margin:0;padding:0（消除文本与div边框之间的间隙）*/</div><div class=\"line\">.container ul&#123;</div><div class=\"line\">    list-style:none;</div><div class=\"line\">    margin:0;</div><div class=\"line\">    padding:0;</div><div class=\"line\">    display:inline;</div><div class=\"line\">&#125;</div><div class=\"line\">/* margin-right:8px（设置li文本之间的间隔）*/</div><div class=\"line\">.container li&#123;</div><div class=\"line\">    margin-right:8px;</div><div class=\"line\">    display:inline;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<pre><code>3. 设置 position:relative 和 left:50%：通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    float:left;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    left:50%</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.container ul&#123;</div><div class=\"line\">    list-style:none;</div><div class=\"line\">    margin:0;</div><div class=\"line\">    padding:0;</div><div class=\"line\">    </div><div class=\"line\">    position:relative;</div><div class=\"line\">    left:-50%;</div><div class=\"line\">&#125;</div><div class=\"line\">.container li&#123;float:left;display:inline;margin-right:8px;&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"二、垂直居中设置\"><a href=\"#二、垂直居中设置\" class=\"headerlink\" title=\"二、垂直居中设置\"></a>二、垂直居中设置</h1><p>   父元素高度确定的单行文本:<br>       父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    hello, world!</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    height:100px;</div><div class=\"line\">    line-height:100px;</div><div class=\"line\">    background:#999;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>   父元素高度确定的多行文本:</p>\n<pre><code>1. 使用插入 table  (包括tbody、tr、td)标签，同时设置 vertical-align：middle。css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;wrap&quot;&gt;</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">table td&#123;height:500px;background:#ccc&#125;</div><div class=\"line\">/*因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。*/</div></pre></td></tr></table></figure>\n<pre><code>2. 在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。代码如下:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">        &lt;p&gt;看我是否可以居中。&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container&#123;</div><div class=\"line\">    height:300px;</div><div class=\"line\">    background:#ccc;</div><div class=\"line\">    display:table-cell;/*IE8以上及Chrome、Firefox*/</div><div class=\"line\">    vertical-align:middle;/*IE8以上及Chrome、Firefox*/</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>   这种方法的好处是不用添加多余的无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7而且这样修改display的block变成了table-cell，破坏了原有的块状元素的性质。</p>\n<h1 id=\"三、隐性改变display类型\"><a href=\"#三、隐性改变display类型\" class=\"headerlink\" title=\"三、隐性改变display类型\"></a>三、隐性改变display类型</h1><p>   当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：</p>\n<pre><code>1. position : absolute \n2. float : left 或 float:right \n</code></pre><p>   时，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML代码</div><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;a href=&quot;#&quot; title=&quot;&quot;&gt;进入课程请单击这里&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">CSS代码</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.container a&#123;</div><div class=\"line\">    position:absolute;</div><div class=\"line\">    width:200px;</div><div class=\"line\">    background:#ccc;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"四、清除浮动的方法\"><a href=\"#四、清除浮动的方法\" class=\"headerlink\" title=\"四、清除浮动的方法\"></a>四、清除浮动的方法</h1><pre><code>1. 改变css样式 clear: both;\n2. width:100%; overflow: hidden;\n</code></pre>"},{"title":"WinForm DevExpress使用之ChartControl控件绘制图表一——基础","date":"2016-12-07T12:07:46.000Z","description":"WinForm中使用DevExpress ChartControl控件绘制图表基础，包括绘制折线图、柱状图和饼状图。","_content":"最近因为公司项目需要用到WinForm的DecExpress控件，在这里把一些使用方法总结一下。\nDevExpress中有一个专门用来绘制图表的插件ChartControl，可以绘制折线图、饼状图、柱状图等图表。\n\n# 绘制图表基本步骤\n<div align=center>\n![](http://i2.muimg.com/567571/2149a9d185e05463.png)\n</div>\n1. 准备数据并绑定\n\t这里从数据库中取得数据，可以根据自己的需要修改。\n```\nDataTable dtData = BF<bll_ep_collection_data>.Instance.GetDataTable(sqlwhere, \"data_time\", parameters);\n//建立新的datatable，用来存储XY坐标\nDataTable dtXY = new DataTable();\n//横坐标的值\ndtXY.Columns.Add(new DataColumn(\"类型\"));\nvar list = new List<object>();\n//纵坐标的值\nlist.Add(\"数值\");\n//这里是控制x轴显示数据的数量，ArgumentScaleType类型设置为ScaleType.Qualitative时他不会自动控制x轴的数量\n//如果得到数据小于X_COUNT，则x轴显示全部得到的数据\nif (X_COUNT < dtData.Rows.Count)\n{\n    for (int i = 0; i < X_COUNT; i++)\n    {\n        int index = (dtData.Rows.Count / X_COUNT) * i;\n        DataRow item = dtData.Rows[index];\n        dtXY.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n        list.Add(item[\"value\"]);\n    }\n}\n//如果得到数据大于X_COUNT，则x轴X_COUNT条数据\nelse\n{\n    for (int i = 0; i < dtData.Rows.Count; i++)\n    {\n        DataRow item = dtData.Rows[i];\n        dtXY.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n        list.Add(item[\"value\"]);\n    }\n}\nvar array = list.ToArray();\ndtXY.Rows.Add(array);\nthis.chartControl1.DataSource = dtXY;\n```\n\t一个更直白的例子：\n```\nDataTable dt = new DataTable();\ndt.Columns.Add(new DataColumn(\"类型\"));\ndt.Columns.Add(new DataColumn(\"2005-1月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-2月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-3月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-4月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-5月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-6月\", typeof(decimal)));\ndt.Rows.Add(new object[] { \"员工人数\", 437, 437, 414, 397, 387, 378 });\ndt.Rows.Add(new object[] { \"人均月薪\", 3964, 3961, 3979, 3974, 3967, 3972 });\ndt.Rows.Add(new object[] { \"成本TEU\", 3104, 1339, 3595.8, 3154.5, 2499.8, 3026 });\ndt.Rows.Add(new object[] { \"人均生产率\", 7.1, 3.06, 8.69, 7.95, 6.46, 8.01 });\ndt.Rows.Add(new object[] { \"占2005年3月人数比例\", 1.06, 1.06, 1, 0.96, 0.93, 0.91 });\n```\n2. 根据数据创建图形展现\n\tCreateSeries用于创建一个典型的图形，这里展示创建一条曲线。\n```\n/// <summary>\n/// 根据数据创建一个图形展现\n/// </summary>\n/// <param name=\"caption\">图形标题</param>\n/// <param name=\"viewType\">图形类型</param>\n/// <param name=\"dt\">数据DataTable</param>\n/// <param name=\"rowIndex\">图形数据的行序号</param>\n/// <returns></returns>\nprivate Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)\n{\n    Series series = new Series(caption, viewType);\n    for (int i = 1; i < dt.Columns.Count; i++)\n    {\n        string argument = dt.Columns[i].ColumnName;//参数名称\n        decimal value = (decimal)dt.Rows[rowIndex][i];//参数值\n        series.Points.Add(new SeriesPoint(argument, value));\n    }\n    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示\n    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative\n    series.ArgumentScaleType = ScaleType.Qualitative;\n    //series.ArgumentScaleType = ScaleType.DateTime;\n    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.False;//显示标注标签\n    return series;\n}\n```\n3. 根据图形对象创建一个图表并绑定到CharControl中\n```\n/// <summary>\n/// 根据图形对象创建一个图表\n/// </summary>\n/// <param name=\"chartControl\">图表绑定控件</param>\n/// <param name=\"list\">图表中的图形展现</param>\n/// <returns></returns>\nprivate void CreateChart(ChartControl chartControl, List<Series> list)\n{\n    chartControl.Series.AddRange(list.ToArray());\n    chartControl.Legend.Visible = false;\n    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;\n    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;\n    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;\n    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;\n    //diagram.AxisX.DateTimeOptions.FormatString = \"yyyy-MM-dd HH:mm:ss\";\n}\n```\n4. 调用函数绘制图表\n```\n//清空ChartControl控件\nchartControl1.Series.Clear();\n//创建图形对象的列表\nList<Series> list = new List<Series>();\nforeach (DataRowView item in listBox.Items)\n{\n    string str = item[\"key\"].ToString();\n    //通过LoadData返回一个DataTable\n    DataTable dtXY = LoadData(str);\n    //创建一个图形对象\n    Series series = CreateSeries(caption, type, dtXY, 0);;\n    list.Add(series);\n}\n//根据图形对象列表创建一个图表\nCreateChart(chartControl1, list);\n```\n\t小结：在绘制折线图的时候我遇到的一个很大的问题就是没办法控制数据的显示数量，因为数据库中存储的数据量过大，在一定时间段内的数据都能达到上千条，所以不可能一次性全部显示。我想到的解决办法是固定显示多少条数据，比如说20条，然后根据数据量每隔一段距离取一条数据显示。\n\n# 柱状图\n<div align=center>\n![](http://i1.piimg.com/567571/b144e515659bd454.png)\n</div>\n绘制柱状图其实和绘制折线图没有什么区别，就是将new Series时的图形类型改为ViewType.Bar即可，这里我想总结一下一个困扰我很久的问题，如何绘制上图所示的一个横坐标对应两个或者多个柱子。\n1. 准备数据\n```\nDataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];\n//建立新的datatable，用来存储XY坐标\nDataTable dtXY_max = new DataTable();\nDataTable dtXY_min = new DataTable();\ndtXY_max.Columns.Add(new DataColumn(\"类型\"));\ndtXY_min.Columns.Add(new DataColumn(\"类型\"));\nvar list_max = new List<object>();\nlist_max.Add(\"数值\");\nvar list_min = new List<object>();\nlist_min.Add(\"数值\");\nfor (int i = 0; i < dtData.Rows.Count; i++)\n{\n    DataRow item = dtData.Rows[i];\n    string value = item[\"max\"].ToString() + \"|\" + item[\"min\"].ToString();\n    //dtXY.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(string)));\n    //list.Add(value);\n    dtXY_max.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n    list_max.Add(item[\"max\"]);\n    dtXY_min.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n    list_min.Add(item[\"min\"]);\n}\nvar array_max = list_max.ToArray();\ndtXY_max.Rows.Add(array_max);\nvar array_min = list_min.ToArray();\ndtXY_min.Rows.Add(array_min);\n```\n2. 创建图形展现对象方法\n```\n/// <summary>\n/// 根据数据创建一个图形展现\n/// </summary>\n/// <param name=\"caption\">图形标题</param>\n/// <param name=\"viewType\">图形类型</param>\n/// <param name=\"dt\">数据DataTable</param>\n/// <param name=\"rowIndex\">图形数据的行序号</param>\n/// <returns></returns>\nprivate Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)\n{\n    Series series = new Series(caption, viewType);\n    for (int i = 1; i < dt.Columns.Count; i++)\n    {\n        string argument = dt.Columns[i].ColumnName;//参数名称\n        decimal value = (decimal) dt.Rows[rowIndex][i];           \n        series.Points.Add(new SeriesPoint(argument, value));\n    }\n    //柱状图柱子的宽度设置\n    //BarSeriesView bsv = (BarSeriesView)series.View;\n    //bsv.BarWidth = 0.1;\n    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示\n    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative\n    series.ArgumentScaleType = ScaleType.Qualitative;\n    //series.ArgumentScaleType = ScaleType.DateTime;\n    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.True;//显示标注标签\n    return series;\n}\n```\n3. 根据图形对象创建图表\n```\n/// <summary>\n/// 根据图形对象创建一个图表\n/// </summary>\n/// <param name=\"chartControl\">图标绑定控件</param>\n/// <param name=\"list\">图表中的图形展现</param>\n/// <returns></returns>\nprivate void CreateChart(ChartControl chartControl, List<Series> series)\n{\n    chartControl.Series.AddRange(series.ToArray());\n    //chartControl.Series.Add(series);\n    chartControl.Legend.Visible = true;\n    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.True;\n    XYDiagram xydiagram = (XYDiagram)chartControl.Diagram;\n    xydiagram.AxisX.MinorCount = 10;\n}\n```\n\n# 饼状图\n<div align=center>\n![](http://i1.piimg.com/567571/9e32250685b304fd.png)\n</div>\n1. 准备数据\n```\nprivate DataTable CreateChartData()\n{\n    DataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];\n    DataTable table = new DataTable(\"Table1\");\n    table.Columns.Add(\"Name\", typeof(String));\n    table.Columns.Add(\"Value\", typeof(Double));\n    foreach (DataRow item in dtData.Rows)\n    {\n        var array = new object[] { item[\"value_num\"], item[\"count\"] };\n        table.Rows.Add(array);\n    }\n    return table;\n}\n```\n2. 创建一个饼状图\n```\n/// <summary>\n/// 根据数据创建一个饼状图\n/// </summary>\n/// <returns></returns>\nprivate void BuilderDevChart()\n{\n    Series _pieSeries = new Series(\"测试\", ViewType.Pie);\n    _pieSeries.ValueDataMembers[0] = \"Value\";\n    _pieSeries.ArgumentDataMember = \"Name\";\n    _pieSeries.DataSource = CreateChartData();\n    chartControl1.Series.Add(_pieSeries);\n    _pieSeries.SetPiePercentage();\n    _pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;\n}\n```\n3. 设置饼状图显示方式（数值/百分比）\n```\npublic static class ExtensionClass\n{\n    /// <summary>\n    /// 设置饼状Series显示方式（值/百分比）\n    /// </summary>\n    /// <param name=\"series\">Series</param>\n    public static void SetPiePercentage(this Series series)\n    {\n        if (series.View is PieSeriesView)\n        {\n            //设置为值\n            //((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;\n            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;\n            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n            //设置为百分比\n            ((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;\n            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;\n            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n        }\n    }\n}\n```","source":"_posts/DevExpress-ChartControl.md","raw":"---\ntitle: WinForm DevExpress使用之ChartControl控件绘制图表一——基础\ndate: 2016-12-07 20:07:46\ncategories: DevExpress\ntags: \n\t- DevExpress Chart\n\t- WinForm\ndescription: WinForm中使用DevExpress ChartControl控件绘制图表基础，包括绘制折线图、柱状图和饼状图。\n---\n最近因为公司项目需要用到WinForm的DecExpress控件，在这里把一些使用方法总结一下。\nDevExpress中有一个专门用来绘制图表的插件ChartControl，可以绘制折线图、饼状图、柱状图等图表。\n\n# 绘制图表基本步骤\n<div align=center>\n![](http://i2.muimg.com/567571/2149a9d185e05463.png)\n</div>\n1. 准备数据并绑定\n\t这里从数据库中取得数据，可以根据自己的需要修改。\n```\nDataTable dtData = BF<bll_ep_collection_data>.Instance.GetDataTable(sqlwhere, \"data_time\", parameters);\n//建立新的datatable，用来存储XY坐标\nDataTable dtXY = new DataTable();\n//横坐标的值\ndtXY.Columns.Add(new DataColumn(\"类型\"));\nvar list = new List<object>();\n//纵坐标的值\nlist.Add(\"数值\");\n//这里是控制x轴显示数据的数量，ArgumentScaleType类型设置为ScaleType.Qualitative时他不会自动控制x轴的数量\n//如果得到数据小于X_COUNT，则x轴显示全部得到的数据\nif (X_COUNT < dtData.Rows.Count)\n{\n    for (int i = 0; i < X_COUNT; i++)\n    {\n        int index = (dtData.Rows.Count / X_COUNT) * i;\n        DataRow item = dtData.Rows[index];\n        dtXY.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n        list.Add(item[\"value\"]);\n    }\n}\n//如果得到数据大于X_COUNT，则x轴X_COUNT条数据\nelse\n{\n    for (int i = 0; i < dtData.Rows.Count; i++)\n    {\n        DataRow item = dtData.Rows[i];\n        dtXY.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n        list.Add(item[\"value\"]);\n    }\n}\nvar array = list.ToArray();\ndtXY.Rows.Add(array);\nthis.chartControl1.DataSource = dtXY;\n```\n\t一个更直白的例子：\n```\nDataTable dt = new DataTable();\ndt.Columns.Add(new DataColumn(\"类型\"));\ndt.Columns.Add(new DataColumn(\"2005-1月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-2月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-3月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-4月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-5月\", typeof(decimal)));\ndt.Columns.Add(new DataColumn(\"2005-6月\", typeof(decimal)));\ndt.Rows.Add(new object[] { \"员工人数\", 437, 437, 414, 397, 387, 378 });\ndt.Rows.Add(new object[] { \"人均月薪\", 3964, 3961, 3979, 3974, 3967, 3972 });\ndt.Rows.Add(new object[] { \"成本TEU\", 3104, 1339, 3595.8, 3154.5, 2499.8, 3026 });\ndt.Rows.Add(new object[] { \"人均生产率\", 7.1, 3.06, 8.69, 7.95, 6.46, 8.01 });\ndt.Rows.Add(new object[] { \"占2005年3月人数比例\", 1.06, 1.06, 1, 0.96, 0.93, 0.91 });\n```\n2. 根据数据创建图形展现\n\tCreateSeries用于创建一个典型的图形，这里展示创建一条曲线。\n```\n/// <summary>\n/// 根据数据创建一个图形展现\n/// </summary>\n/// <param name=\"caption\">图形标题</param>\n/// <param name=\"viewType\">图形类型</param>\n/// <param name=\"dt\">数据DataTable</param>\n/// <param name=\"rowIndex\">图形数据的行序号</param>\n/// <returns></returns>\nprivate Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)\n{\n    Series series = new Series(caption, viewType);\n    for (int i = 1; i < dt.Columns.Count; i++)\n    {\n        string argument = dt.Columns[i].ColumnName;//参数名称\n        decimal value = (decimal)dt.Rows[rowIndex][i];//参数值\n        series.Points.Add(new SeriesPoint(argument, value));\n    }\n    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示\n    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative\n    series.ArgumentScaleType = ScaleType.Qualitative;\n    //series.ArgumentScaleType = ScaleType.DateTime;\n    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.False;//显示标注标签\n    return series;\n}\n```\n3. 根据图形对象创建一个图表并绑定到CharControl中\n```\n/// <summary>\n/// 根据图形对象创建一个图表\n/// </summary>\n/// <param name=\"chartControl\">图表绑定控件</param>\n/// <param name=\"list\">图表中的图形展现</param>\n/// <returns></returns>\nprivate void CreateChart(ChartControl chartControl, List<Series> list)\n{\n    chartControl.Series.AddRange(list.ToArray());\n    chartControl.Legend.Visible = false;\n    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;\n    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;\n    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;\n    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;\n    //diagram.AxisX.DateTimeOptions.FormatString = \"yyyy-MM-dd HH:mm:ss\";\n}\n```\n4. 调用函数绘制图表\n```\n//清空ChartControl控件\nchartControl1.Series.Clear();\n//创建图形对象的列表\nList<Series> list = new List<Series>();\nforeach (DataRowView item in listBox.Items)\n{\n    string str = item[\"key\"].ToString();\n    //通过LoadData返回一个DataTable\n    DataTable dtXY = LoadData(str);\n    //创建一个图形对象\n    Series series = CreateSeries(caption, type, dtXY, 0);;\n    list.Add(series);\n}\n//根据图形对象列表创建一个图表\nCreateChart(chartControl1, list);\n```\n\t小结：在绘制折线图的时候我遇到的一个很大的问题就是没办法控制数据的显示数量，因为数据库中存储的数据量过大，在一定时间段内的数据都能达到上千条，所以不可能一次性全部显示。我想到的解决办法是固定显示多少条数据，比如说20条，然后根据数据量每隔一段距离取一条数据显示。\n\n# 柱状图\n<div align=center>\n![](http://i1.piimg.com/567571/b144e515659bd454.png)\n</div>\n绘制柱状图其实和绘制折线图没有什么区别，就是将new Series时的图形类型改为ViewType.Bar即可，这里我想总结一下一个困扰我很久的问题，如何绘制上图所示的一个横坐标对应两个或者多个柱子。\n1. 准备数据\n```\nDataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];\n//建立新的datatable，用来存储XY坐标\nDataTable dtXY_max = new DataTable();\nDataTable dtXY_min = new DataTable();\ndtXY_max.Columns.Add(new DataColumn(\"类型\"));\ndtXY_min.Columns.Add(new DataColumn(\"类型\"));\nvar list_max = new List<object>();\nlist_max.Add(\"数值\");\nvar list_min = new List<object>();\nlist_min.Add(\"数值\");\nfor (int i = 0; i < dtData.Rows.Count; i++)\n{\n    DataRow item = dtData.Rows[i];\n    string value = item[\"max\"].ToString() + \"|\" + item[\"min\"].ToString();\n    //dtXY.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(string)));\n    //list.Add(value);\n    dtXY_max.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n    list_max.Add(item[\"max\"]);\n    dtXY_min.Columns.Add(new DataColumn(item[\"data_time\"].ToString(), typeof(decimal)));\n    list_min.Add(item[\"min\"]);\n}\nvar array_max = list_max.ToArray();\ndtXY_max.Rows.Add(array_max);\nvar array_min = list_min.ToArray();\ndtXY_min.Rows.Add(array_min);\n```\n2. 创建图形展现对象方法\n```\n/// <summary>\n/// 根据数据创建一个图形展现\n/// </summary>\n/// <param name=\"caption\">图形标题</param>\n/// <param name=\"viewType\">图形类型</param>\n/// <param name=\"dt\">数据DataTable</param>\n/// <param name=\"rowIndex\">图形数据的行序号</param>\n/// <returns></returns>\nprivate Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)\n{\n    Series series = new Series(caption, viewType);\n    for (int i = 1; i < dt.Columns.Count; i++)\n    {\n        string argument = dt.Columns[i].ColumnName;//参数名称\n        decimal value = (decimal) dt.Rows[rowIndex][i];           \n        series.Points.Add(new SeriesPoint(argument, value));\n    }\n    //柱状图柱子的宽度设置\n    //BarSeriesView bsv = (BarSeriesView)series.View;\n    //bsv.BarWidth = 0.1;\n    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示\n    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative\n    series.ArgumentScaleType = ScaleType.Qualitative;\n    //series.ArgumentScaleType = ScaleType.DateTime;\n    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.True;//显示标注标签\n    return series;\n}\n```\n3. 根据图形对象创建图表\n```\n/// <summary>\n/// 根据图形对象创建一个图表\n/// </summary>\n/// <param name=\"chartControl\">图标绑定控件</param>\n/// <param name=\"list\">图表中的图形展现</param>\n/// <returns></returns>\nprivate void CreateChart(ChartControl chartControl, List<Series> series)\n{\n    chartControl.Series.AddRange(series.ToArray());\n    //chartControl.Series.Add(series);\n    chartControl.Legend.Visible = true;\n    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.True;\n    XYDiagram xydiagram = (XYDiagram)chartControl.Diagram;\n    xydiagram.AxisX.MinorCount = 10;\n}\n```\n\n# 饼状图\n<div align=center>\n![](http://i1.piimg.com/567571/9e32250685b304fd.png)\n</div>\n1. 准备数据\n```\nprivate DataTable CreateChartData()\n{\n    DataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];\n    DataTable table = new DataTable(\"Table1\");\n    table.Columns.Add(\"Name\", typeof(String));\n    table.Columns.Add(\"Value\", typeof(Double));\n    foreach (DataRow item in dtData.Rows)\n    {\n        var array = new object[] { item[\"value_num\"], item[\"count\"] };\n        table.Rows.Add(array);\n    }\n    return table;\n}\n```\n2. 创建一个饼状图\n```\n/// <summary>\n/// 根据数据创建一个饼状图\n/// </summary>\n/// <returns></returns>\nprivate void BuilderDevChart()\n{\n    Series _pieSeries = new Series(\"测试\", ViewType.Pie);\n    _pieSeries.ValueDataMembers[0] = \"Value\";\n    _pieSeries.ArgumentDataMember = \"Name\";\n    _pieSeries.DataSource = CreateChartData();\n    chartControl1.Series.Add(_pieSeries);\n    _pieSeries.SetPiePercentage();\n    _pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;\n}\n```\n3. 设置饼状图显示方式（数值/百分比）\n```\npublic static class ExtensionClass\n{\n    /// <summary>\n    /// 设置饼状Series显示方式（值/百分比）\n    /// </summary>\n    /// <param name=\"series\">Series</param>\n    public static void SetPiePercentage(this Series series)\n    {\n        if (series.View is PieSeriesView)\n        {\n            //设置为值\n            //((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;\n            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;\n            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n            //设置为百分比\n            ((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;\n            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;\n            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n        }\n    }\n}\n```","slug":"DevExpress-ChartControl","published":1,"updated":"2017-05-05T13:11:33.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o5t0003poc5rg3mhlhx","content":"<p>最近因为公司项目需要用到WinForm的DecExpress控件，在这里把一些使用方法总结一下。<br>DevExpress中有一个专门用来绘制图表的插件ChartControl，可以绘制折线图、饼状图、柱状图等图表。</p>\n<h1 id=\"绘制图表基本步骤\"><a href=\"#绘制图表基本步骤\" class=\"headerlink\" title=\"绘制图表基本步骤\"></a>绘制图表基本步骤</h1><p><div align=\"center\"><br><img src=\"http://i2.muimg.com/567571/2149a9d185e05463.png\" alt=\"\"><br></div></p>\n<ol>\n<li><p>准备数据并绑定<br> 这里从数据库中取得数据，可以根据自己的需要修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataTable dtData = BF&lt;bll_ep_collection_data&gt;.Instance.GetDataTable(sqlwhere, &quot;data_time&quot;, parameters);</div><div class=\"line\">//建立新的datatable，用来存储XY坐标</div><div class=\"line\">DataTable dtXY = new DataTable();</div><div class=\"line\">//横坐标的值</div><div class=\"line\">dtXY.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">var list = new List&lt;object&gt;();</div><div class=\"line\">//纵坐标的值</div><div class=\"line\">list.Add(&quot;数值&quot;);</div><div class=\"line\">//这里是控制x轴显示数据的数量，ArgumentScaleType类型设置为ScaleType.Qualitative时他不会自动控制x轴的数量</div><div class=\"line\">//如果得到数据小于X_COUNT，则x轴显示全部得到的数据</div><div class=\"line\">if (X_COUNT &lt; dtData.Rows.Count)</div><div class=\"line\">&#123;</div><div class=\"line\">    for (int i = 0; i &lt; X_COUNT; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        int index = (dtData.Rows.Count / X_COUNT) * i;</div><div class=\"line\">        DataRow item = dtData.Rows[index];</div><div class=\"line\">        dtXY.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">        list.Add(item[&quot;value&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//如果得到数据大于X_COUNT，则x轴X_COUNT条数据</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">    for (int i = 0; i &lt; dtData.Rows.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        DataRow item = dtData.Rows[i];</div><div class=\"line\">        dtXY.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">        list.Add(item[&quot;value&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var array = list.ToArray();</div><div class=\"line\">dtXY.Rows.Add(array);</div><div class=\"line\">this.chartControl1.DataSource = dtXY;</div></pre></td></tr></table></figure>\n<p> 一个更直白的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataTable dt = new DataTable();</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-1月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-2月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-3月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-4月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-5月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-6月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;员工人数&quot;, 437, 437, 414, 397, 387, 378 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;人均月薪&quot;, 3964, 3961, 3979, 3974, 3967, 3972 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;成本TEU&quot;, 3104, 1339, 3595.8, 3154.5, 2499.8, 3026 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;人均生产率&quot;, 7.1, 3.06, 8.69, 7.95, 6.46, 8.01 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;占2005年3月人数比例&quot;, 1.06, 1.06, 1, 0.96, 0.93, 0.91 &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据数据创建图形展现<br> CreateSeries用于创建一个典型的图形，这里展示创建一条曲线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据数据创建一个图形展现</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;caption&quot;&gt;图形标题&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;viewType&quot;&gt;图形类型&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;dt&quot;&gt;数据DataTable&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;rowIndex&quot;&gt;图形数据的行序号&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)</div><div class=\"line\">&#123;</div><div class=\"line\">    Series series = new Series(caption, viewType);</div><div class=\"line\">    for (int i = 1; i &lt; dt.Columns.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        string argument = dt.Columns[i].ColumnName;//参数名称</div><div class=\"line\">        decimal value = (decimal)dt.Rows[rowIndex][i];//参数值</div><div class=\"line\">        series.Points.Add(new SeriesPoint(argument, value));</div><div class=\"line\">    &#125;</div><div class=\"line\">    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示</div><div class=\"line\">    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative</div><div class=\"line\">    series.ArgumentScaleType = ScaleType.Qualitative;</div><div class=\"line\">    //series.ArgumentScaleType = ScaleType.DateTime;</div><div class=\"line\">    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.False;//显示标注标签</div><div class=\"line\">    return series;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据图形对象创建一个图表并绑定到CharControl中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据图形对象创建一个图表</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;chartControl&quot;&gt;图表绑定控件&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;list&quot;&gt;图表中的图形展现&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void CreateChart(ChartControl chartControl, List&lt;Series&gt; list)</div><div class=\"line\">&#123;</div><div class=\"line\">    chartControl.Series.AddRange(list.ToArray());</div><div class=\"line\">    chartControl.Legend.Visible = false;</div><div class=\"line\">    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;</div><div class=\"line\">    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;</div><div class=\"line\">    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.FormatString = &quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>调用函数绘制图表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//清空ChartControl控件</div><div class=\"line\">chartControl1.Series.Clear();</div><div class=\"line\">//创建图形对象的列表</div><div class=\"line\">List&lt;Series&gt; list = new List&lt;Series&gt;();</div><div class=\"line\">foreach (DataRowView item in listBox.Items)</div><div class=\"line\">&#123;</div><div class=\"line\">    string str = item[&quot;key&quot;].ToString();</div><div class=\"line\">    //通过LoadData返回一个DataTable</div><div class=\"line\">    DataTable dtXY = LoadData(str);</div><div class=\"line\">    //创建一个图形对象</div><div class=\"line\">    Series series = CreateSeries(caption, type, dtXY, 0);;</div><div class=\"line\">    list.Add(series);</div><div class=\"line\">&#125;</div><div class=\"line\">//根据图形对象列表创建一个图表</div><div class=\"line\">CreateChart(chartControl1, list);</div></pre></td></tr></table></figure>\n<p> 小结：在绘制折线图的时候我遇到的一个很大的问题就是没办法控制数据的显示数量，因为数据库中存储的数据量过大，在一定时间段内的数据都能达到上千条，所以不可能一次性全部显示。我想到的解决办法是固定显示多少条数据，比如说20条，然后根据数据量每隔一段距离取一条数据显示。</p>\n</li>\n</ol>\n<h1 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/b144e515659bd454.png\" alt=\"\"><br></div><br>绘制柱状图其实和绘制折线图没有什么区别，就是将new Series时的图形类型改为ViewType.Bar即可，这里我想总结一下一个困扰我很久的问题，如何绘制上图所示的一个横坐标对应两个或者多个柱子。</p>\n<ol>\n<li><p>准备数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];</div><div class=\"line\">//建立新的datatable，用来存储XY坐标</div><div class=\"line\">DataTable dtXY_max = new DataTable();</div><div class=\"line\">DataTable dtXY_min = new DataTable();</div><div class=\"line\">dtXY_max.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">dtXY_min.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">var list_max = new List&lt;object&gt;();</div><div class=\"line\">list_max.Add(&quot;数值&quot;);</div><div class=\"line\">var list_min = new List&lt;object&gt;();</div><div class=\"line\">list_min.Add(&quot;数值&quot;);</div><div class=\"line\">for (int i = 0; i &lt; dtData.Rows.Count; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    DataRow item = dtData.Rows[i];</div><div class=\"line\">    string value = item[&quot;max&quot;].ToString() + &quot;|&quot; + item[&quot;min&quot;].ToString();</div><div class=\"line\">    //dtXY.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(string)));</div><div class=\"line\">    //list.Add(value);</div><div class=\"line\">    dtXY_max.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">    list_max.Add(item[&quot;max&quot;]);</div><div class=\"line\">    dtXY_min.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">    list_min.Add(item[&quot;min&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\">var array_max = list_max.ToArray();</div><div class=\"line\">dtXY_max.Rows.Add(array_max);</div><div class=\"line\">var array_min = list_min.ToArray();</div><div class=\"line\">dtXY_min.Rows.Add(array_min);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建图形展现对象方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据数据创建一个图形展现</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;caption&quot;&gt;图形标题&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;viewType&quot;&gt;图形类型&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;dt&quot;&gt;数据DataTable&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;rowIndex&quot;&gt;图形数据的行序号&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)</div><div class=\"line\">&#123;</div><div class=\"line\">    Series series = new Series(caption, viewType);</div><div class=\"line\">    for (int i = 1; i &lt; dt.Columns.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        string argument = dt.Columns[i].ColumnName;//参数名称</div><div class=\"line\">        decimal value = (decimal) dt.Rows[rowIndex][i];           </div><div class=\"line\">        series.Points.Add(new SeriesPoint(argument, value));</div><div class=\"line\">    &#125;</div><div class=\"line\">    //柱状图柱子的宽度设置</div><div class=\"line\">    //BarSeriesView bsv = (BarSeriesView)series.View;</div><div class=\"line\">    //bsv.BarWidth = 0.1;</div><div class=\"line\">    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示</div><div class=\"line\">    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative</div><div class=\"line\">    series.ArgumentScaleType = ScaleType.Qualitative;</div><div class=\"line\">    //series.ArgumentScaleType = ScaleType.DateTime;</div><div class=\"line\">    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.True;//显示标注标签</div><div class=\"line\">    return series;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据图形对象创建图表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据图形对象创建一个图表</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;chartControl&quot;&gt;图标绑定控件&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;list&quot;&gt;图表中的图形展现&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void CreateChart(ChartControl chartControl, List&lt;Series&gt; series)</div><div class=\"line\">&#123;</div><div class=\"line\">    chartControl.Series.AddRange(series.ToArray());</div><div class=\"line\">    //chartControl.Series.Add(series);</div><div class=\"line\">    chartControl.Legend.Visible = true;</div><div class=\"line\">    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.True;</div><div class=\"line\">    XYDiagram xydiagram = (XYDiagram)chartControl.Diagram;</div><div class=\"line\">    xydiagram.AxisX.MinorCount = 10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/9e32250685b304fd.png\" alt=\"\"><br></div></p>\n<ol>\n<li><p>准备数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">private DataTable CreateChartData()</div><div class=\"line\">&#123;</div><div class=\"line\">    DataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];</div><div class=\"line\">    DataTable table = new DataTable(&quot;Table1&quot;);</div><div class=\"line\">    table.Columns.Add(&quot;Name&quot;, typeof(String));</div><div class=\"line\">    table.Columns.Add(&quot;Value&quot;, typeof(Double));</div><div class=\"line\">    foreach (DataRow item in dtData.Rows)</div><div class=\"line\">    &#123;</div><div class=\"line\">        var array = new object[] &#123; item[&quot;value_num&quot;], item[&quot;count&quot;] &#125;;</div><div class=\"line\">        table.Rows.Add(array);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return table;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个饼状图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据数据创建一个饼状图</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void BuilderDevChart()</div><div class=\"line\">&#123;</div><div class=\"line\">    Series _pieSeries = new Series(&quot;测试&quot;, ViewType.Pie);</div><div class=\"line\">    _pieSeries.ValueDataMembers[0] = &quot;Value&quot;;</div><div class=\"line\">    _pieSeries.ArgumentDataMember = &quot;Name&quot;;</div><div class=\"line\">    _pieSeries.DataSource = CreateChartData();</div><div class=\"line\">    chartControl1.Series.Add(_pieSeries);</div><div class=\"line\">    _pieSeries.SetPiePercentage();</div><div class=\"line\">    _pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置饼状图显示方式（数值/百分比）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class ExtensionClass</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// 设置饼状Series显示方式（值/百分比）</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    /// &lt;param name=&quot;series&quot;&gt;Series&lt;/param&gt;</div><div class=\"line\">    public static void SetPiePercentage(this Series series)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (series.View is PieSeriesView)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //设置为值</div><div class=\"line\">            //((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;</div><div class=\"line\">            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;</div><div class=\"line\">            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">            //设置为百分比</div><div class=\"line\">            ((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;</div><div class=\"line\">            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;</div><div class=\"line\">            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近因为公司项目需要用到WinForm的DecExpress控件，在这里把一些使用方法总结一下。<br>DevExpress中有一个专门用来绘制图表的插件ChartControl，可以绘制折线图、饼状图、柱状图等图表。</p>\n<h1 id=\"绘制图表基本步骤\"><a href=\"#绘制图表基本步骤\" class=\"headerlink\" title=\"绘制图表基本步骤\"></a>绘制图表基本步骤</h1><p><div align=\"center\"><br><img src=\"http://i2.muimg.com/567571/2149a9d185e05463.png\" alt=\"\"><br></div></p>\n<ol>\n<li><p>准备数据并绑定<br> 这里从数据库中取得数据，可以根据自己的需要修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataTable dtData = BF&lt;bll_ep_collection_data&gt;.Instance.GetDataTable(sqlwhere, &quot;data_time&quot;, parameters);</div><div class=\"line\">//建立新的datatable，用来存储XY坐标</div><div class=\"line\">DataTable dtXY = new DataTable();</div><div class=\"line\">//横坐标的值</div><div class=\"line\">dtXY.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">var list = new List&lt;object&gt;();</div><div class=\"line\">//纵坐标的值</div><div class=\"line\">list.Add(&quot;数值&quot;);</div><div class=\"line\">//这里是控制x轴显示数据的数量，ArgumentScaleType类型设置为ScaleType.Qualitative时他不会自动控制x轴的数量</div><div class=\"line\">//如果得到数据小于X_COUNT，则x轴显示全部得到的数据</div><div class=\"line\">if (X_COUNT &lt; dtData.Rows.Count)</div><div class=\"line\">&#123;</div><div class=\"line\">    for (int i = 0; i &lt; X_COUNT; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        int index = (dtData.Rows.Count / X_COUNT) * i;</div><div class=\"line\">        DataRow item = dtData.Rows[index];</div><div class=\"line\">        dtXY.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">        list.Add(item[&quot;value&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//如果得到数据大于X_COUNT，则x轴X_COUNT条数据</div><div class=\"line\">else</div><div class=\"line\">&#123;</div><div class=\"line\">    for (int i = 0; i &lt; dtData.Rows.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        DataRow item = dtData.Rows[i];</div><div class=\"line\">        dtXY.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">        list.Add(item[&quot;value&quot;]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var array = list.ToArray();</div><div class=\"line\">dtXY.Rows.Add(array);</div><div class=\"line\">this.chartControl1.DataSource = dtXY;</div></pre></td></tr></table></figure>\n<p> 一个更直白的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataTable dt = new DataTable();</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-1月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-2月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-3月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-4月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-5月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Columns.Add(new DataColumn(&quot;2005-6月&quot;, typeof(decimal)));</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;员工人数&quot;, 437, 437, 414, 397, 387, 378 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;人均月薪&quot;, 3964, 3961, 3979, 3974, 3967, 3972 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;成本TEU&quot;, 3104, 1339, 3595.8, 3154.5, 2499.8, 3026 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;人均生产率&quot;, 7.1, 3.06, 8.69, 7.95, 6.46, 8.01 &#125;);</div><div class=\"line\">dt.Rows.Add(new object[] &#123; &quot;占2005年3月人数比例&quot;, 1.06, 1.06, 1, 0.96, 0.93, 0.91 &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据数据创建图形展现<br> CreateSeries用于创建一个典型的图形，这里展示创建一条曲线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据数据创建一个图形展现</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;caption&quot;&gt;图形标题&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;viewType&quot;&gt;图形类型&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;dt&quot;&gt;数据DataTable&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;rowIndex&quot;&gt;图形数据的行序号&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)</div><div class=\"line\">&#123;</div><div class=\"line\">    Series series = new Series(caption, viewType);</div><div class=\"line\">    for (int i = 1; i &lt; dt.Columns.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        string argument = dt.Columns[i].ColumnName;//参数名称</div><div class=\"line\">        decimal value = (decimal)dt.Rows[rowIndex][i];//参数值</div><div class=\"line\">        series.Points.Add(new SeriesPoint(argument, value));</div><div class=\"line\">    &#125;</div><div class=\"line\">    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示</div><div class=\"line\">    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative</div><div class=\"line\">    series.ArgumentScaleType = ScaleType.Qualitative;</div><div class=\"line\">    //series.ArgumentScaleType = ScaleType.DateTime;</div><div class=\"line\">    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.False;//显示标注标签</div><div class=\"line\">    return series;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据图形对象创建一个图表并绑定到CharControl中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据图形对象创建一个图表</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;chartControl&quot;&gt;图表绑定控件&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;list&quot;&gt;图表中的图形展现&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void CreateChart(ChartControl chartControl, List&lt;Series&gt; list)</div><div class=\"line\">&#123;</div><div class=\"line\">    chartControl.Series.AddRange(list.ToArray());</div><div class=\"line\">    chartControl.Legend.Visible = false;</div><div class=\"line\">    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;</div><div class=\"line\">    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;</div><div class=\"line\">    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.FormatString = &quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>调用函数绘制图表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//清空ChartControl控件</div><div class=\"line\">chartControl1.Series.Clear();</div><div class=\"line\">//创建图形对象的列表</div><div class=\"line\">List&lt;Series&gt; list = new List&lt;Series&gt;();</div><div class=\"line\">foreach (DataRowView item in listBox.Items)</div><div class=\"line\">&#123;</div><div class=\"line\">    string str = item[&quot;key&quot;].ToString();</div><div class=\"line\">    //通过LoadData返回一个DataTable</div><div class=\"line\">    DataTable dtXY = LoadData(str);</div><div class=\"line\">    //创建一个图形对象</div><div class=\"line\">    Series series = CreateSeries(caption, type, dtXY, 0);;</div><div class=\"line\">    list.Add(series);</div><div class=\"line\">&#125;</div><div class=\"line\">//根据图形对象列表创建一个图表</div><div class=\"line\">CreateChart(chartControl1, list);</div></pre></td></tr></table></figure>\n<p> 小结：在绘制折线图的时候我遇到的一个很大的问题就是没办法控制数据的显示数量，因为数据库中存储的数据量过大，在一定时间段内的数据都能达到上千条，所以不可能一次性全部显示。我想到的解决办法是固定显示多少条数据，比如说20条，然后根据数据量每隔一段距离取一条数据显示。</p>\n</li>\n</ol>\n<h1 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/b144e515659bd454.png\" alt=\"\"><br></div><br>绘制柱状图其实和绘制折线图没有什么区别，就是将new Series时的图形类型改为ViewType.Bar即可，这里我想总结一下一个困扰我很久的问题，如何绘制上图所示的一个横坐标对应两个或者多个柱子。</p>\n<ol>\n<li><p>准备数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">DataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];</div><div class=\"line\">//建立新的datatable，用来存储XY坐标</div><div class=\"line\">DataTable dtXY_max = new DataTable();</div><div class=\"line\">DataTable dtXY_min = new DataTable();</div><div class=\"line\">dtXY_max.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">dtXY_min.Columns.Add(new DataColumn(&quot;类型&quot;));</div><div class=\"line\">var list_max = new List&lt;object&gt;();</div><div class=\"line\">list_max.Add(&quot;数值&quot;);</div><div class=\"line\">var list_min = new List&lt;object&gt;();</div><div class=\"line\">list_min.Add(&quot;数值&quot;);</div><div class=\"line\">for (int i = 0; i &lt; dtData.Rows.Count; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    DataRow item = dtData.Rows[i];</div><div class=\"line\">    string value = item[&quot;max&quot;].ToString() + &quot;|&quot; + item[&quot;min&quot;].ToString();</div><div class=\"line\">    //dtXY.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(string)));</div><div class=\"line\">    //list.Add(value);</div><div class=\"line\">    dtXY_max.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">    list_max.Add(item[&quot;max&quot;]);</div><div class=\"line\">    dtXY_min.Columns.Add(new DataColumn(item[&quot;data_time&quot;].ToString(), typeof(decimal)));</div><div class=\"line\">    list_min.Add(item[&quot;min&quot;]);</div><div class=\"line\">&#125;</div><div class=\"line\">var array_max = list_max.ToArray();</div><div class=\"line\">dtXY_max.Rows.Add(array_max);</div><div class=\"line\">var array_min = list_min.ToArray();</div><div class=\"line\">dtXY_min.Rows.Add(array_min);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建图形展现对象方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据数据创建一个图形展现</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;caption&quot;&gt;图形标题&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;viewType&quot;&gt;图形类型&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;dt&quot;&gt;数据DataTable&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;rowIndex&quot;&gt;图形数据的行序号&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private Series CreateSeries(string caption, ViewType viewType, DataTable dt, int rowIndex)</div><div class=\"line\">&#123;</div><div class=\"line\">    Series series = new Series(caption, viewType);</div><div class=\"line\">    for (int i = 1; i &lt; dt.Columns.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        string argument = dt.Columns[i].ColumnName;//参数名称</div><div class=\"line\">        decimal value = (decimal) dt.Rows[rowIndex][i];           </div><div class=\"line\">        series.Points.Add(new SeriesPoint(argument, value));</div><div class=\"line\">    &#125;</div><div class=\"line\">    //柱状图柱子的宽度设置</div><div class=\"line\">    //BarSeriesView bsv = (BarSeriesView)series.View;</div><div class=\"line\">    //bsv.BarWidth = 0.1;</div><div class=\"line\">    //必须设置ArgumentScaleType的类型，否则显示会转换为日期格式，导致不是希望的格式显示</div><div class=\"line\">    //也就是说，显示字符串的参数，必须设置类型为ScaleType.Qualitative</div><div class=\"line\">    series.ArgumentScaleType = ScaleType.Qualitative;</div><div class=\"line\">    //series.ArgumentScaleType = ScaleType.DateTime;</div><div class=\"line\">    series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.True;//显示标注标签</div><div class=\"line\">    return series;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据图形对象创建图表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据图形对象创建一个图表</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;chartControl&quot;&gt;图标绑定控件&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;list&quot;&gt;图表中的图形展现&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void CreateChart(ChartControl chartControl, List&lt;Series&gt; series)</div><div class=\"line\">&#123;</div><div class=\"line\">    chartControl.Series.AddRange(series.ToArray());</div><div class=\"line\">    //chartControl.Series.Add(series);</div><div class=\"line\">    chartControl.Legend.Visible = true;</div><div class=\"line\">    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.True;</div><div class=\"line\">    XYDiagram xydiagram = (XYDiagram)chartControl.Diagram;</div><div class=\"line\">    xydiagram.AxisX.MinorCount = 10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/9e32250685b304fd.png\" alt=\"\"><br></div></p>\n<ol>\n<li><p>准备数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">private DataTable CreateChartData()</div><div class=\"line\">&#123;</div><div class=\"line\">    DataTable dtData = SqlHelper.GetDataSet(sql, parameters).Tables[0];</div><div class=\"line\">    DataTable table = new DataTable(&quot;Table1&quot;);</div><div class=\"line\">    table.Columns.Add(&quot;Name&quot;, typeof(String));</div><div class=\"line\">    table.Columns.Add(&quot;Value&quot;, typeof(Double));</div><div class=\"line\">    foreach (DataRow item in dtData.Rows)</div><div class=\"line\">    &#123;</div><div class=\"line\">        var array = new object[] &#123; item[&quot;value_num&quot;], item[&quot;count&quot;] &#125;;</div><div class=\"line\">        table.Rows.Add(array);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return table;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个饼状图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据数据创建一个饼状图</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void BuilderDevChart()</div><div class=\"line\">&#123;</div><div class=\"line\">    Series _pieSeries = new Series(&quot;测试&quot;, ViewType.Pie);</div><div class=\"line\">    _pieSeries.ValueDataMembers[0] = &quot;Value&quot;;</div><div class=\"line\">    _pieSeries.ArgumentDataMember = &quot;Name&quot;;</div><div class=\"line\">    _pieSeries.DataSource = CreateChartData();</div><div class=\"line\">    chartControl1.Series.Add(_pieSeries);</div><div class=\"line\">    _pieSeries.SetPiePercentage();</div><div class=\"line\">    _pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置饼状图显示方式（数值/百分比）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class ExtensionClass</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// 设置饼状Series显示方式（值/百分比）</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    /// &lt;param name=&quot;series&quot;&gt;Series&lt;/param&gt;</div><div class=\"line\">    public static void SetPiePercentage(this Series series)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (series.View is PieSeriesView)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //设置为值</div><div class=\"line\">            //((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;</div><div class=\"line\">            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;</div><div class=\"line\">            //((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">            //设置为百分比</div><div class=\"line\">            ((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;</div><div class=\"line\">            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;</div><div class=\"line\">            ((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Git常用命令总结","date":"2016-12-05T14:15:51.000Z","description":"Git常用命令使用总结。","_content":"## Local\n# 一、初始化\n<div align=center>\n![](http://i4.buimg.com/567571/dd3793b2b627c019.png)\n</div>\n### （一）全局变量\n1. `git config --global user.name \"MrLrf\"` 设置用户名\n2. `git config --global user.email \"liruifeng0718@163.com\"` 设置邮箱\n3. `git config --global color.ui \"always\"` 设置颜色\n\n### （二）初始化版本库\n1. `git init` 在当前根目录下生成.git目录\n\n### （三）添加新文件到版本库\n1. `git add somefile.text` 添加单个文件到暂存区\n2. `git add *.txt` 添加所有txt文件到暂存区\n3. `git add .; git add -u; git add -A` 添加所有文件暂存区（包括子目录，不包括空目录）\n\t区别：\n\t\tgit add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\n\t\tgit add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）\n\t\tgit add -A ：是上面两个功能的合集（git add --all的缩写）\n\n### （四）提交\n1. `git commit -u \"提交信息\"` 提交代码\n\n# 二、常用操作\n<div align=center>\n![](http://i1.piimg.com/567571/37ff9cdf2af2de5c.png)\n</div>\n### （一）提交\n1. `git commit -m \"some msg\" -a` 提交所有修改\n2. `git commit -m \"some msg to readme.txt\" readme.txt` 提交单个文件\n3. `git commit -C head -a --amend` 增补提交，不会产生新的提交历史纪录\n\n### （二）撤销修改\n1. 撤销尚未提交的修改：\n\t1. `git checkout head readme.txt todo.txt` 撤销1、2个文件\n\t2. `git checkout head *.txt` 撤销所有txt文件\n\t3. `git checkout head .` 撤销所有文件\n2. `git revert --no -commit head` 提交最近一次提交的反操作\n3. `git reset head <filename>` 取消暂存\n4. `git reset -- hard head^^` 复位到head之前的那个版本，不会在版本库中留下痕迹\n\n### （三）分支\n1. `git branch` 列出本地分支\n2. `git branch -a` 列出所有分支\n3. `git branch <branchname>` 基于当前分支的末梢创建新分支\n4. `git checkout <branchname>` 检出分支（切换到新分支）\n5. `git checkout -b <branchname>` 基于当前分支的末梢创建新分支并切换分支\n6. 合并分支：\n\t1. `git merge <branchname>` 合并并提交（如果发生了冲突就不会自动提交，如果冲突很多，不想立即解决他们，可以直接使用git checkout head .撤销）\n\t2. `git merge --no -commit` 合并但不提交\n7. 重命名分支：\n\t1. `git branch -m <branchname> <newname>` 重命名分支（不会覆盖已存在的同名分支）\n\t2. `git branch -M <branchname> <newname>` 重命名分支（会覆盖已存在的同名分支）\n8. 删除分支：\n\t1. `git branch -d <branchname>` 删除分支（如果分支没有被合并会删除失败）\n\t2. `git branch -D <branchname>` 删除分支（即使分支没有被合并也照删不误）\n\n### （四）解决冲突\n1. 冲突很少时，直接编辑有冲突的文件然后提交即可\n2. `git merge tool` 冲突比较复杂时，生成.backup，.base，.local，.remote四个文件，然后自动调用冲突解决工具，解决冲突之后手动删除.orig文件（冲突解决之前的文件备份），最后提交。\n\n### （五）查看状态\n1. `git status` 当前状态\n2. `git log` 历史纪录\n\t注：git log指令后，输入q然后回车终止指令。\n3. `git branch -v` 每个分支最后的提交\n4. `git diff` 查看更改前后的区别\n\n## Remote\n# 一、初始化\n<div align=center>\n![](http://i4.buimg.com/567571/32f38e331a5edf03.png)\n</div>\n### （一）克隆版本库\n1. `git clone <url>` 克隆url对应的版本库\n\n### （二）添加远程仓库\n1. `git remote add <别名(origin)> <远程版本库的url>` 将GitHub或其他设置为本地仓库的远程仓库\n2. `git remote rm <别名(origin)>` 删除本地仓库的远程仓库及分支\n\n### （三）创建一个无本地分支的库\n1. `git init -bare` 当需要一个公用的中央库时，非常适合把它建成bare库\n\n# 二、常用操作\n<div align=center>\n![](http://i2.muimg.com/567571/5ea022645ca04cac.png)\n</div>\n### （一）分支\n1. `git branch -r` 列出远程分支\n2. `git remote prune origin` 删除远程库中已经不存在的分支\n\n### （二）从远程库获取\n1. `git fetch <远程版本库>` 例：`git fetch origin` 获取但不合并\n2. `git pull` 获取并合并到当前本地分支\n\n### （三）推入远程库\n1. `git push (origin master)`\n\n# 三、http://github.com\n<div align=center>\n![](http://i1.piimg.com/567571/45e3577b951601b5.png)\n</div>\nGitHub上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥\n认证方式进行的。创建SSH Key：`ssh-keygen -t rsa -C \"你的github邮箱\"`。然后输入`cat ~/.ssh/id_rsa.pub`然后就复制到粘贴板。\n\n","source":"_posts/Git-commonly-used-command-summary.md","raw":"---\ntitle: Git常用命令总结\ndate: 2016-12-05 22:15:51\ncategories: 工具使用\ntags: Git\ndescription: Git常用命令使用总结。\n---\n## Local\n# 一、初始化\n<div align=center>\n![](http://i4.buimg.com/567571/dd3793b2b627c019.png)\n</div>\n### （一）全局变量\n1. `git config --global user.name \"MrLrf\"` 设置用户名\n2. `git config --global user.email \"liruifeng0718@163.com\"` 设置邮箱\n3. `git config --global color.ui \"always\"` 设置颜色\n\n### （二）初始化版本库\n1. `git init` 在当前根目录下生成.git目录\n\n### （三）添加新文件到版本库\n1. `git add somefile.text` 添加单个文件到暂存区\n2. `git add *.txt` 添加所有txt文件到暂存区\n3. `git add .; git add -u; git add -A` 添加所有文件暂存区（包括子目录，不包括空目录）\n\t区别：\n\t\tgit add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\n\t\tgit add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）\n\t\tgit add -A ：是上面两个功能的合集（git add --all的缩写）\n\n### （四）提交\n1. `git commit -u \"提交信息\"` 提交代码\n\n# 二、常用操作\n<div align=center>\n![](http://i1.piimg.com/567571/37ff9cdf2af2de5c.png)\n</div>\n### （一）提交\n1. `git commit -m \"some msg\" -a` 提交所有修改\n2. `git commit -m \"some msg to readme.txt\" readme.txt` 提交单个文件\n3. `git commit -C head -a --amend` 增补提交，不会产生新的提交历史纪录\n\n### （二）撤销修改\n1. 撤销尚未提交的修改：\n\t1. `git checkout head readme.txt todo.txt` 撤销1、2个文件\n\t2. `git checkout head *.txt` 撤销所有txt文件\n\t3. `git checkout head .` 撤销所有文件\n2. `git revert --no -commit head` 提交最近一次提交的反操作\n3. `git reset head <filename>` 取消暂存\n4. `git reset -- hard head^^` 复位到head之前的那个版本，不会在版本库中留下痕迹\n\n### （三）分支\n1. `git branch` 列出本地分支\n2. `git branch -a` 列出所有分支\n3. `git branch <branchname>` 基于当前分支的末梢创建新分支\n4. `git checkout <branchname>` 检出分支（切换到新分支）\n5. `git checkout -b <branchname>` 基于当前分支的末梢创建新分支并切换分支\n6. 合并分支：\n\t1. `git merge <branchname>` 合并并提交（如果发生了冲突就不会自动提交，如果冲突很多，不想立即解决他们，可以直接使用git checkout head .撤销）\n\t2. `git merge --no -commit` 合并但不提交\n7. 重命名分支：\n\t1. `git branch -m <branchname> <newname>` 重命名分支（不会覆盖已存在的同名分支）\n\t2. `git branch -M <branchname> <newname>` 重命名分支（会覆盖已存在的同名分支）\n8. 删除分支：\n\t1. `git branch -d <branchname>` 删除分支（如果分支没有被合并会删除失败）\n\t2. `git branch -D <branchname>` 删除分支（即使分支没有被合并也照删不误）\n\n### （四）解决冲突\n1. 冲突很少时，直接编辑有冲突的文件然后提交即可\n2. `git merge tool` 冲突比较复杂时，生成.backup，.base，.local，.remote四个文件，然后自动调用冲突解决工具，解决冲突之后手动删除.orig文件（冲突解决之前的文件备份），最后提交。\n\n### （五）查看状态\n1. `git status` 当前状态\n2. `git log` 历史纪录\n\t注：git log指令后，输入q然后回车终止指令。\n3. `git branch -v` 每个分支最后的提交\n4. `git diff` 查看更改前后的区别\n\n## Remote\n# 一、初始化\n<div align=center>\n![](http://i4.buimg.com/567571/32f38e331a5edf03.png)\n</div>\n### （一）克隆版本库\n1. `git clone <url>` 克隆url对应的版本库\n\n### （二）添加远程仓库\n1. `git remote add <别名(origin)> <远程版本库的url>` 将GitHub或其他设置为本地仓库的远程仓库\n2. `git remote rm <别名(origin)>` 删除本地仓库的远程仓库及分支\n\n### （三）创建一个无本地分支的库\n1. `git init -bare` 当需要一个公用的中央库时，非常适合把它建成bare库\n\n# 二、常用操作\n<div align=center>\n![](http://i2.muimg.com/567571/5ea022645ca04cac.png)\n</div>\n### （一）分支\n1. `git branch -r` 列出远程分支\n2. `git remote prune origin` 删除远程库中已经不存在的分支\n\n### （二）从远程库获取\n1. `git fetch <远程版本库>` 例：`git fetch origin` 获取但不合并\n2. `git pull` 获取并合并到当前本地分支\n\n### （三）推入远程库\n1. `git push (origin master)`\n\n# 三、http://github.com\n<div align=center>\n![](http://i1.piimg.com/567571/45e3577b951601b5.png)\n</div>\nGitHub上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥\n认证方式进行的。创建SSH Key：`ssh-keygen -t rsa -C \"你的github邮箱\"`。然后输入`cat ~/.ssh/id_rsa.pub`然后就复制到粘贴板。\n\n","slug":"Git-commonly-used-command-summary","published":1,"updated":"2017-05-05T13:11:33.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o5t0007poc5748ougw5","content":"<h2 id=\"Local\"><a href=\"#Local\" class=\"headerlink\" title=\"Local\"></a>Local</h2><h1 id=\"一、初始化\"><a href=\"#一、初始化\" class=\"headerlink\" title=\"一、初始化\"></a>一、初始化</h1><p><div align=\"center\"><br><img src=\"http://i4.buimg.com/567571/dd3793b2b627c019.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）全局变量\"><a href=\"#（一）全局变量\" class=\"headerlink\" title=\"（一）全局变量\"></a>（一）全局变量</h3><ol>\n<li><code>git config --global user.name &quot;MrLrf&quot;</code> 设置用户名</li>\n<li><code>git config --global user.email &quot;liruifeng0718@163.com&quot;</code> 设置邮箱</li>\n<li><code>git config --global color.ui &quot;always&quot;</code> 设置颜色</li>\n</ol>\n<h3 id=\"（二）初始化版本库\"><a href=\"#（二）初始化版本库\" class=\"headerlink\" title=\"（二）初始化版本库\"></a>（二）初始化版本库</h3><ol>\n<li><code>git init</code> 在当前根目录下生成.git目录</li>\n</ol>\n<h3 id=\"（三）添加新文件到版本库\"><a href=\"#（三）添加新文件到版本库\" class=\"headerlink\" title=\"（三）添加新文件到版本库\"></a>（三）添加新文件到版本库</h3><ol>\n<li><code>git add somefile.text</code> 添加单个文件到暂存区</li>\n<li><code>git add *.txt</code> 添加所有txt文件到暂存区</li>\n<li><code>git add .; git add -u; git add -A</code> 添加所有文件暂存区（包括子目录，不包括空目录）<br> 区别：<pre><code>git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\ngit add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）\ngit add -A ：是上面两个功能的合集（git add --all的缩写）\n</code></pre></li>\n</ol>\n<h3 id=\"（四）提交\"><a href=\"#（四）提交\" class=\"headerlink\" title=\"（四）提交\"></a>（四）提交</h3><ol>\n<li><code>git commit -u &quot;提交信息&quot;</code> 提交代码</li>\n</ol>\n<h1 id=\"二、常用操作\"><a href=\"#二、常用操作\" class=\"headerlink\" title=\"二、常用操作\"></a>二、常用操作</h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/37ff9cdf2af2de5c.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）提交\"><a href=\"#（一）提交\" class=\"headerlink\" title=\"（一）提交\"></a>（一）提交</h3><ol>\n<li><code>git commit -m &quot;some msg&quot; -a</code> 提交所有修改</li>\n<li><code>git commit -m &quot;some msg to readme.txt&quot; readme.txt</code> 提交单个文件</li>\n<li><code>git commit -C head -a --amend</code> 增补提交，不会产生新的提交历史纪录</li>\n</ol>\n<h3 id=\"（二）撤销修改\"><a href=\"#（二）撤销修改\" class=\"headerlink\" title=\"（二）撤销修改\"></a>（二）撤销修改</h3><ol>\n<li>撤销尚未提交的修改：<ol>\n<li><code>git checkout head readme.txt todo.txt</code> 撤销1、2个文件</li>\n<li><code>git checkout head *.txt</code> 撤销所有txt文件</li>\n<li><code>git checkout head .</code> 撤销所有文件</li>\n</ol>\n</li>\n<li><code>git revert --no -commit head</code> 提交最近一次提交的反操作</li>\n<li><code>git reset head &lt;filename&gt;</code> 取消暂存</li>\n<li><code>git reset -- hard head^^</code> 复位到head之前的那个版本，不会在版本库中留下痕迹</li>\n</ol>\n<h3 id=\"（三）分支\"><a href=\"#（三）分支\" class=\"headerlink\" title=\"（三）分支\"></a>（三）分支</h3><ol>\n<li><code>git branch</code> 列出本地分支</li>\n<li><code>git branch -a</code> 列出所有分支</li>\n<li><code>git branch &lt;branchname&gt;</code> 基于当前分支的末梢创建新分支</li>\n<li><code>git checkout &lt;branchname&gt;</code> 检出分支（切换到新分支）</li>\n<li><code>git checkout -b &lt;branchname&gt;</code> 基于当前分支的末梢创建新分支并切换分支</li>\n<li>合并分支：<ol>\n<li><code>git merge &lt;branchname&gt;</code> 合并并提交（如果发生了冲突就不会自动提交，如果冲突很多，不想立即解决他们，可以直接使用git checkout head .撤销）</li>\n<li><code>git merge --no -commit</code> 合并但不提交</li>\n</ol>\n</li>\n<li>重命名分支：<ol>\n<li><code>git branch -m &lt;branchname&gt; &lt;newname&gt;</code> 重命名分支（不会覆盖已存在的同名分支）</li>\n<li><code>git branch -M &lt;branchname&gt; &lt;newname&gt;</code> 重命名分支（会覆盖已存在的同名分支）</li>\n</ol>\n</li>\n<li>删除分支：<ol>\n<li><code>git branch -d &lt;branchname&gt;</code> 删除分支（如果分支没有被合并会删除失败）</li>\n<li><code>git branch -D &lt;branchname&gt;</code> 删除分支（即使分支没有被合并也照删不误）</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"（四）解决冲突\"><a href=\"#（四）解决冲突\" class=\"headerlink\" title=\"（四）解决冲突\"></a>（四）解决冲突</h3><ol>\n<li>冲突很少时，直接编辑有冲突的文件然后提交即可</li>\n<li><code>git merge tool</code> 冲突比较复杂时，生成.backup，.base，.local，.remote四个文件，然后自动调用冲突解决工具，解决冲突之后手动删除.orig文件（冲突解决之前的文件备份），最后提交。</li>\n</ol>\n<h3 id=\"（五）查看状态\"><a href=\"#（五）查看状态\" class=\"headerlink\" title=\"（五）查看状态\"></a>（五）查看状态</h3><ol>\n<li><code>git status</code> 当前状态</li>\n<li><code>git log</code> 历史纪录<br> 注：git log指令后，输入q然后回车终止指令。</li>\n<li><code>git branch -v</code> 每个分支最后的提交</li>\n<li><code>git diff</code> 查看更改前后的区别</li>\n</ol>\n<h2 id=\"Remote\"><a href=\"#Remote\" class=\"headerlink\" title=\"Remote\"></a>Remote</h2><h1 id=\"一、初始化-1\"><a href=\"#一、初始化-1\" class=\"headerlink\" title=\"一、初始化\"></a>一、初始化</h1><p><div align=\"center\"><br><img src=\"http://i4.buimg.com/567571/32f38e331a5edf03.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）克隆版本库\"><a href=\"#（一）克隆版本库\" class=\"headerlink\" title=\"（一）克隆版本库\"></a>（一）克隆版本库</h3><ol>\n<li><code>git clone &lt;url&gt;</code> 克隆url对应的版本库</li>\n</ol>\n<h3 id=\"（二）添加远程仓库\"><a href=\"#（二）添加远程仓库\" class=\"headerlink\" title=\"（二）添加远程仓库\"></a>（二）添加远程仓库</h3><ol>\n<li><code>git remote add &lt;别名(origin)&gt; &lt;远程版本库的url&gt;</code> 将GitHub或其他设置为本地仓库的远程仓库</li>\n<li><code>git remote rm &lt;别名(origin)&gt;</code> 删除本地仓库的远程仓库及分支</li>\n</ol>\n<h3 id=\"（三）创建一个无本地分支的库\"><a href=\"#（三）创建一个无本地分支的库\" class=\"headerlink\" title=\"（三）创建一个无本地分支的库\"></a>（三）创建一个无本地分支的库</h3><ol>\n<li><code>git init -bare</code> 当需要一个公用的中央库时，非常适合把它建成bare库</li>\n</ol>\n<h1 id=\"二、常用操作-1\"><a href=\"#二、常用操作-1\" class=\"headerlink\" title=\"二、常用操作\"></a>二、常用操作</h1><p><div align=\"center\"><br><img src=\"http://i2.muimg.com/567571/5ea022645ca04cac.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）分支\"><a href=\"#（一）分支\" class=\"headerlink\" title=\"（一）分支\"></a>（一）分支</h3><ol>\n<li><code>git branch -r</code> 列出远程分支</li>\n<li><code>git remote prune origin</code> 删除远程库中已经不存在的分支</li>\n</ol>\n<h3 id=\"（二）从远程库获取\"><a href=\"#（二）从远程库获取\" class=\"headerlink\" title=\"（二）从远程库获取\"></a>（二）从远程库获取</h3><ol>\n<li><code>git fetch &lt;远程版本库&gt;</code> 例：<code>git fetch origin</code> 获取但不合并</li>\n<li><code>git pull</code> 获取并合并到当前本地分支</li>\n</ol>\n<h3 id=\"（三）推入远程库\"><a href=\"#（三）推入远程库\" class=\"headerlink\" title=\"（三）推入远程库\"></a>（三）推入远程库</h3><ol>\n<li><code>git push (origin master)</code></li>\n</ol>\n<h1 id=\"三、http-github-com\"><a href=\"#三、http-github-com\" class=\"headerlink\" title=\"三、http://github.com\"></a>三、<a href=\"http://github.com\" target=\"_blank\" rel=\"external\">http://github.com</a></h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/45e3577b951601b5.png\" alt=\"\"><br></div><br>GitHub上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥<br>认证方式进行的。创建SSH Key：<code>ssh-keygen -t rsa -C &quot;你的github邮箱&quot;</code>。然后输入<code>cat ~/.ssh/id_rsa.pub</code>然后就复制到粘贴板。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Local\"><a href=\"#Local\" class=\"headerlink\" title=\"Local\"></a>Local</h2><h1 id=\"一、初始化\"><a href=\"#一、初始化\" class=\"headerlink\" title=\"一、初始化\"></a>一、初始化</h1><p><div align=\"center\"><br><img src=\"http://i4.buimg.com/567571/dd3793b2b627c019.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）全局变量\"><a href=\"#（一）全局变量\" class=\"headerlink\" title=\"（一）全局变量\"></a>（一）全局变量</h3><ol>\n<li><code>git config --global user.name &quot;MrLrf&quot;</code> 设置用户名</li>\n<li><code>git config --global user.email &quot;liruifeng0718@163.com&quot;</code> 设置邮箱</li>\n<li><code>git config --global color.ui &quot;always&quot;</code> 设置颜色</li>\n</ol>\n<h3 id=\"（二）初始化版本库\"><a href=\"#（二）初始化版本库\" class=\"headerlink\" title=\"（二）初始化版本库\"></a>（二）初始化版本库</h3><ol>\n<li><code>git init</code> 在当前根目录下生成.git目录</li>\n</ol>\n<h3 id=\"（三）添加新文件到版本库\"><a href=\"#（三）添加新文件到版本库\" class=\"headerlink\" title=\"（三）添加新文件到版本库\"></a>（三）添加新文件到版本库</h3><ol>\n<li><code>git add somefile.text</code> 添加单个文件到暂存区</li>\n<li><code>git add *.txt</code> 添加所有txt文件到暂存区</li>\n<li><code>git add .; git add -u; git add -A</code> 添加所有文件暂存区（包括子目录，不包括空目录）<br> 区别：<pre><code>git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\ngit add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）\ngit add -A ：是上面两个功能的合集（git add --all的缩写）\n</code></pre></li>\n</ol>\n<h3 id=\"（四）提交\"><a href=\"#（四）提交\" class=\"headerlink\" title=\"（四）提交\"></a>（四）提交</h3><ol>\n<li><code>git commit -u &quot;提交信息&quot;</code> 提交代码</li>\n</ol>\n<h1 id=\"二、常用操作\"><a href=\"#二、常用操作\" class=\"headerlink\" title=\"二、常用操作\"></a>二、常用操作</h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/37ff9cdf2af2de5c.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）提交\"><a href=\"#（一）提交\" class=\"headerlink\" title=\"（一）提交\"></a>（一）提交</h3><ol>\n<li><code>git commit -m &quot;some msg&quot; -a</code> 提交所有修改</li>\n<li><code>git commit -m &quot;some msg to readme.txt&quot; readme.txt</code> 提交单个文件</li>\n<li><code>git commit -C head -a --amend</code> 增补提交，不会产生新的提交历史纪录</li>\n</ol>\n<h3 id=\"（二）撤销修改\"><a href=\"#（二）撤销修改\" class=\"headerlink\" title=\"（二）撤销修改\"></a>（二）撤销修改</h3><ol>\n<li>撤销尚未提交的修改：<ol>\n<li><code>git checkout head readme.txt todo.txt</code> 撤销1、2个文件</li>\n<li><code>git checkout head *.txt</code> 撤销所有txt文件</li>\n<li><code>git checkout head .</code> 撤销所有文件</li>\n</ol>\n</li>\n<li><code>git revert --no -commit head</code> 提交最近一次提交的反操作</li>\n<li><code>git reset head &lt;filename&gt;</code> 取消暂存</li>\n<li><code>git reset -- hard head^^</code> 复位到head之前的那个版本，不会在版本库中留下痕迹</li>\n</ol>\n<h3 id=\"（三）分支\"><a href=\"#（三）分支\" class=\"headerlink\" title=\"（三）分支\"></a>（三）分支</h3><ol>\n<li><code>git branch</code> 列出本地分支</li>\n<li><code>git branch -a</code> 列出所有分支</li>\n<li><code>git branch &lt;branchname&gt;</code> 基于当前分支的末梢创建新分支</li>\n<li><code>git checkout &lt;branchname&gt;</code> 检出分支（切换到新分支）</li>\n<li><code>git checkout -b &lt;branchname&gt;</code> 基于当前分支的末梢创建新分支并切换分支</li>\n<li>合并分支：<ol>\n<li><code>git merge &lt;branchname&gt;</code> 合并并提交（如果发生了冲突就不会自动提交，如果冲突很多，不想立即解决他们，可以直接使用git checkout head .撤销）</li>\n<li><code>git merge --no -commit</code> 合并但不提交</li>\n</ol>\n</li>\n<li>重命名分支：<ol>\n<li><code>git branch -m &lt;branchname&gt; &lt;newname&gt;</code> 重命名分支（不会覆盖已存在的同名分支）</li>\n<li><code>git branch -M &lt;branchname&gt; &lt;newname&gt;</code> 重命名分支（会覆盖已存在的同名分支）</li>\n</ol>\n</li>\n<li>删除分支：<ol>\n<li><code>git branch -d &lt;branchname&gt;</code> 删除分支（如果分支没有被合并会删除失败）</li>\n<li><code>git branch -D &lt;branchname&gt;</code> 删除分支（即使分支没有被合并也照删不误）</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"（四）解决冲突\"><a href=\"#（四）解决冲突\" class=\"headerlink\" title=\"（四）解决冲突\"></a>（四）解决冲突</h3><ol>\n<li>冲突很少时，直接编辑有冲突的文件然后提交即可</li>\n<li><code>git merge tool</code> 冲突比较复杂时，生成.backup，.base，.local，.remote四个文件，然后自动调用冲突解决工具，解决冲突之后手动删除.orig文件（冲突解决之前的文件备份），最后提交。</li>\n</ol>\n<h3 id=\"（五）查看状态\"><a href=\"#（五）查看状态\" class=\"headerlink\" title=\"（五）查看状态\"></a>（五）查看状态</h3><ol>\n<li><code>git status</code> 当前状态</li>\n<li><code>git log</code> 历史纪录<br> 注：git log指令后，输入q然后回车终止指令。</li>\n<li><code>git branch -v</code> 每个分支最后的提交</li>\n<li><code>git diff</code> 查看更改前后的区别</li>\n</ol>\n<h2 id=\"Remote\"><a href=\"#Remote\" class=\"headerlink\" title=\"Remote\"></a>Remote</h2><h1 id=\"一、初始化-1\"><a href=\"#一、初始化-1\" class=\"headerlink\" title=\"一、初始化\"></a>一、初始化</h1><p><div align=\"center\"><br><img src=\"http://i4.buimg.com/567571/32f38e331a5edf03.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）克隆版本库\"><a href=\"#（一）克隆版本库\" class=\"headerlink\" title=\"（一）克隆版本库\"></a>（一）克隆版本库</h3><ol>\n<li><code>git clone &lt;url&gt;</code> 克隆url对应的版本库</li>\n</ol>\n<h3 id=\"（二）添加远程仓库\"><a href=\"#（二）添加远程仓库\" class=\"headerlink\" title=\"（二）添加远程仓库\"></a>（二）添加远程仓库</h3><ol>\n<li><code>git remote add &lt;别名(origin)&gt; &lt;远程版本库的url&gt;</code> 将GitHub或其他设置为本地仓库的远程仓库</li>\n<li><code>git remote rm &lt;别名(origin)&gt;</code> 删除本地仓库的远程仓库及分支</li>\n</ol>\n<h3 id=\"（三）创建一个无本地分支的库\"><a href=\"#（三）创建一个无本地分支的库\" class=\"headerlink\" title=\"（三）创建一个无本地分支的库\"></a>（三）创建一个无本地分支的库</h3><ol>\n<li><code>git init -bare</code> 当需要一个公用的中央库时，非常适合把它建成bare库</li>\n</ol>\n<h1 id=\"二、常用操作-1\"><a href=\"#二、常用操作-1\" class=\"headerlink\" title=\"二、常用操作\"></a>二、常用操作</h1><p><div align=\"center\"><br><img src=\"http://i2.muimg.com/567571/5ea022645ca04cac.png\" alt=\"\"><br></div></p>\n<h3 id=\"（一）分支\"><a href=\"#（一）分支\" class=\"headerlink\" title=\"（一）分支\"></a>（一）分支</h3><ol>\n<li><code>git branch -r</code> 列出远程分支</li>\n<li><code>git remote prune origin</code> 删除远程库中已经不存在的分支</li>\n</ol>\n<h3 id=\"（二）从远程库获取\"><a href=\"#（二）从远程库获取\" class=\"headerlink\" title=\"（二）从远程库获取\"></a>（二）从远程库获取</h3><ol>\n<li><code>git fetch &lt;远程版本库&gt;</code> 例：<code>git fetch origin</code> 获取但不合并</li>\n<li><code>git pull</code> 获取并合并到当前本地分支</li>\n</ol>\n<h3 id=\"（三）推入远程库\"><a href=\"#（三）推入远程库\" class=\"headerlink\" title=\"（三）推入远程库\"></a>（三）推入远程库</h3><ol>\n<li><code>git push (origin master)</code></li>\n</ol>\n<h1 id=\"三、http-github-com\"><a href=\"#三、http-github-com\" class=\"headerlink\" title=\"三、http://github.com\"></a>三、<a href=\"http://github.com\" target=\"_blank\" rel=\"external\">http://github.com</a></h1><p><div align=\"center\"><br><img src=\"http://i1.piimg.com/567571/45e3577b951601b5.png\" alt=\"\"><br></div><br>GitHub上连接已有仓库时的认证，是通过使用了 SSH 的公开密钥<br>认证方式进行的。创建SSH Key：<code>ssh-keygen -t rsa -C &quot;你的github邮箱&quot;</code>。然后输入<code>cat ~/.ssh/id_rsa.pub</code>然后就复制到粘贴板。</p>\n"},{"title":"Hexo+github搭建个人博客并实现多终端管理","date":"2017-05-05T09:30:23.000Z","description":"在经历了无数次的折腾之后,终于完成了心目中的hexo的个人博客,虽然有很多东西待完善(比如主题,Travis CI自动部署),但是还是要简单的总结一下的.","_content":"\n","source":"_posts/Hexo-github搭建博客.md","raw":"---\ntitle: Hexo+github搭建个人博客并实现多终端管理\ndate: 2017-05-05 17:30:23\ncategories: 工具使用\ntags: hexo\ndescription: 在经历了无数次的折腾之后,终于完成了心目中的hexo的个人博客,虽然有很多东西待完善(比如主题,Travis CI自动部署),但是还是要简单的总结一下的.\n---\n\n","slug":"Hexo-github搭建博客","published":1,"updated":"2017-05-05T13:11:33.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o690008poc5wtl9etrm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java Socket编程","date":"2017-02-17T00:38:48.000Z","description":"Java Socket编程","_content":"一，网络编程中两个主要的问题\n\n一个是如何准确的定位网络上一台或多台主机，另一个就是找到主机后如何可靠高效的进行数据传输。 \n在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。 \n而TCP层则提供面向应用的可靠（TCP）的或非可靠（UDP）的数据传输机制，这是网络编程的主要对象，一般不需要关心IP层是如何处理数据的。\n目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服务端口，使后来的客户也 能及时得到服务。\n\n二，两类传输协议：TCP；UDP\n\nTCP是Tranfer Control Protocol的 简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建 立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送 或接收操作。\nUDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。\n\n比较：\n\n    UDP：\n\t1，每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。\n    2，UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。\n    3，UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方\n\n    TCP：\n\t1，面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。\n    2，TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。\n    3，TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。\n应用：\n>1. TCP在网络通信上有极强的生命力，例如远程连接（Telnet）和文件传输（FTP）都需要不定长度的数据被可靠地传输。但是可靠的传输是要付出代价的，对数据内容正确性的检验必然占用计算机的处理时间和网络的带宽，因此TCP传输的效率不如UDP高。\n2. UDP操作简单，而且仅需要较少的监护，因此通常用于局域网高可靠性的分散系统中client/server应用程序。例如视频会议系统，并不要求音频视频数据绝对的正确，只要保证连贯性就可以了，这种情况下显然使用UDP会更合理一些。\n\n三，基于Socket的java网络编程\n\n1，什么是Socket\n\n网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket。Socket通常用来实现客户方和服务方的连接。Socket是TCP/IP协议的一个十分流行的编程界面，一个Socket由一个IP地址和一个端口号唯一确定。\n但是，Socket所支持的协议种类也不光TCP/IP一种，因此两者之间是没有必然联系的。在Java环境下，Socket编程主要是指基于TCP/IP协议的网络编程。\n\n2，Socket通讯的过程\n\nServer端Listen(监听)某个端口是否有连接请求，Client端向Server 端发出Connect(连接)请求，Server端向Client端发回Accept（接受）消息。一个连接就建立起来了。Server端和Client 端都可以通过Send，Write等方法与对方通信。\n对于一个功能齐全的Socket，都要包含以下基本结构，其工作过程包含以下四个基本的步骤：\n　　（1） 创建Socket；\n　　（2） 打开连接到Socket的输入/出流；\n　　（3） 按照一定的协议对Socket进行读/写操作；\n　　（4） 关闭Socket.（在实际应用中，并未使用到显示的close，虽然很多文章都推荐如此，不过在我的程序中，可能因为程序本身比较简单，要求不高，所以并未造成什么影响。）\n3，创建Socket\n\n创建Socket\njava在包java.net中提供了两个类Socket和ServerSocket，分别用来表示双向连接的客户端和服务端。这是两个封装得非常好的类，使用很方便。其构造方法如下：\n```\nSocket(InetAddress address, int port);\nSocket(InetAddress address, int port, boolean stream);\nSocket(String host, int prot);\nSocket(String host, int prot, boolean stream);\nSocket(SocketImpl impl)\nSocket(String host, int port, InetAddress localAddr, int localPort)\nSocket(InetAddress address, int port, InetAddress localAddr, int localPort)\nServerSocket(int port);\nServerSocket(int port, int backlog);\nServerSocket(int port, int backlog, InetAddress bindAddr)\n```\n其中address、host和port分别是双向连接中另一方的IP地址、主机名和端 口号，stream指明socket是流socket还是数据报socket，localPort表示本地主机的端口号，localAddr和 bindAddr是本地机器的地址（ServerSocket的主机地址），impl是socket的父类，既可以用来创建serverSocket又可 以用来创建Socket。count则表示服务端所能支持的最大连接数。例如：\n```\nSocket client = new Socket(\"127.0.01.\", 80);\nServerSocket server = new ServerSocket(80);\n```\n注意，在选择端口时，必须小心。每一个端口提供一种特定的服务，只有给出正确的端口，才 能获得相应的服务。0~1023的端口号为系统所保留，例如http服务的端口号为80,telnet服务的端口号为21,ftp服务的端口号为23, 所以我们在选择端口号时，最好选择一个大于1023的数以防止发生冲突。\n在创建socket时如果发生错误，将产生IOException，在程序中必须对之作出处理。所以在创建Socket或ServerSocket是必须捕获或抛出例外。\n\n4，简单的Client/Server程序\n\n\t1. 客户端程序\n\n```\nimport java.io.*;\n   import java.net.*;\n　　public class TalkClient {\n　　　　public static void main(String args[]) {\n　　　　　　try{\n　　　　　　　　Socket socket=new Socket(\"127.0.0.1\",4700);\n　　　　　　　　//向本机的4700端口发出客户请求\n　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));\n　　　　　　　　//由系统标准输入设备构造BufferedReader对象\n　　　　　　　　PrintWriter os=new PrintWriter(socket.getOutputStream());\n　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象\n　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));\n　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象\n　　　　　　　　String readline;\n　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串\n　　　　　　　　while(!readline.equals(\"bye\")){\n　　　　　　　　//若从标准输入读入的字符串为 \"bye\"则停止循环\n　　　　　　　　　　os.println(readline);\n　　　　　　　　　　//将从系统标准输入读入的字符串输出到Server\n　　　　　　　　　　os.flush();\n　　　　　　　　　　//刷新输出流，使Server马上收到该字符串\n　　　　　　　　　　System.out.println(\"Client:\"+readline);\n　　　　　　　　　　//在系统标准输出上打印读入的字符串\n                 System.out.println(\"Server:\"+is.readLine());\n　　　　　　　　　　//从Server读入一字符串，并打印到标准输出上\n　　　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串\n　　　　　　　　} //继续循环\n　　　　　　　　os.close(); //关闭Socket输出流\n　　　　　　　　is.close(); //关闭Socket输入流\n　　　　　　　　socket.close(); //关闭Socket\n　　　　　　}catch(Exception e) {\n　　　　　　　　System.out.println(\"Error\"+e); //出错，则打印出错信息\n　　　　　　}\n　　}\n}\n```\n\t2. 服务器端程序\n\n```\nimport java.io.*;\n   import java.net.*;\n   import java.applet.Applet;\n　　public class TalkServer{\n　　　　public static void main(String args[]) {\n　　　　　　try{\n　　　　　　　　ServerSocket server=null;\n　　　　　　　　try{\n　　　　　　　　　　server=new ServerSocket(4700);\n　　　　　　　　//创建一个ServerSocket在端口4700监听客户请求\n　　　　　　　　}catch(Exception e) {\n　　　　　　　　　　System.out.println(\"can not listen to:\"+e);\n　　　　　　　　//出错，打印出错信息\n　　　　　　　　}\n　　　　　　　　Socket socket=null;\n　　　　　　　　try{\n　　　　　　　　　　socket=server.accept();\n　　　　　　　　　　//使用accept()阻塞等待客户请求，有客户\n　　　　　　　　　　//请求到来则产生一个Socket对象，并继续执行\n　　　　　　　　}catch(Exception e) {\n　　　　　　　　　　System.out.println(\"Error.\"+e);\n　　　　　　　　　　//出错，打印出错信息\n　　　　　　　　}\n　　　　　　　　String line;\n　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));\n　　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象\n　　　　　　　　PrintWriter os=newPrintWriter(socket.getOutputStream());\n　　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象\n　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));\n　　　　　　　　　//由系统标准输入设备构造BufferedReader对象\n　　　　　　　　System.out.println(\"Client:\"+is.readLine());\n　　　　　　　　//在标准输出上打印从客户端读入的字符串\n　　　　　　　　line=sin.readLine();\n　　　　　　　　//从标准输入读入一字符串\n　　　　　　　　while(!line.equals(\"bye\")){\n　　　　　　　　//如果该字符串为 \"bye\"，则停止循环\n　　　　　　　　　　os.println(line);\n　　　　　　　　　　//向客户端输出该字符串\n　　　　　　　　　　os.flush();\n　　　　　　　　　　//刷新输出流，使Client马上收到该字符串\n　　　　　　　　　　System.out.println(\"Server:\"+line);\n　　　　　　　　　　//在系统标准输出上打印读入的字符串\n　　　　　　　　　  System.out.println(\"Client:\"+is.readLine());\n　　　　　　　　　　//从Client读入一字符串，并打印到标准输出上\n　　　　　　　　　　line=sin.readLine();\n　　　　　　　　　　//从系统标准输入读入一字符串\n　　　　　　　　} 　//继续循环\n　　　　　　　　os.close(); //关闭Socket输出流\n　　　　　　　　is.close(); //关闭Socket输入流\n　　　　　　　　socket.close(); //关闭Socket\n　　　　　　　　server.close(); //关闭ServerSocket\n　　　　　　}catch(Exception e){\n　　　　　　　　System.out.println(\"Error:\"+e);\n　　　　　　　　//出错，打印出错信息\n　　　　　　}\n　　　　}\n　　}\n```\n5，支持多客户的client/server程序\n\n前面的Client/Server程序只能实现Server和一个客户的对话。在实际应用 中，往往是在服务器上运行一个永久的程序，它可以接收来自其他多个客户端的请求，提供相应的服务。为了实现在服务器方给多个客户提供服务的功能，需要对上 面的程序进行改造，利用多线程实现多客户机制。服务器总是在指定的端口上监听是否有客户请求，一旦监听到客户请求，服务器就会启动一个专门的服务线程来响 应该客户的请求，而服务器本身在启动完线程之后马上又进入监听状态，等待下一个客户的到来。","source":"_posts/Java-Socket.md","raw":"---\ntitle: Java Socket编程\ndate: 2017-02-17 08:38:48\ncategories: Java\ntags: \n\t-  Java\n\t-  Socekt\ndescription: Java Socket编程\n---\n一，网络编程中两个主要的问题\n\n一个是如何准确的定位网络上一台或多台主机，另一个就是找到主机后如何可靠高效的进行数据传输。 \n在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。 \n而TCP层则提供面向应用的可靠（TCP）的或非可靠（UDP）的数据传输机制，这是网络编程的主要对象，一般不需要关心IP层是如何处理数据的。\n目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服务端口，使后来的客户也 能及时得到服务。\n\n二，两类传输协议：TCP；UDP\n\nTCP是Tranfer Control Protocol的 简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建 立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送 或接收操作。\nUDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。\n\n比较：\n\n    UDP：\n\t1，每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。\n    2，UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。\n    3，UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方\n\n    TCP：\n\t1，面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。\n    2，TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。\n    3，TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。\n应用：\n>1. TCP在网络通信上有极强的生命力，例如远程连接（Telnet）和文件传输（FTP）都需要不定长度的数据被可靠地传输。但是可靠的传输是要付出代价的，对数据内容正确性的检验必然占用计算机的处理时间和网络的带宽，因此TCP传输的效率不如UDP高。\n2. UDP操作简单，而且仅需要较少的监护，因此通常用于局域网高可靠性的分散系统中client/server应用程序。例如视频会议系统，并不要求音频视频数据绝对的正确，只要保证连贯性就可以了，这种情况下显然使用UDP会更合理一些。\n\n三，基于Socket的java网络编程\n\n1，什么是Socket\n\n网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket。Socket通常用来实现客户方和服务方的连接。Socket是TCP/IP协议的一个十分流行的编程界面，一个Socket由一个IP地址和一个端口号唯一确定。\n但是，Socket所支持的协议种类也不光TCP/IP一种，因此两者之间是没有必然联系的。在Java环境下，Socket编程主要是指基于TCP/IP协议的网络编程。\n\n2，Socket通讯的过程\n\nServer端Listen(监听)某个端口是否有连接请求，Client端向Server 端发出Connect(连接)请求，Server端向Client端发回Accept（接受）消息。一个连接就建立起来了。Server端和Client 端都可以通过Send，Write等方法与对方通信。\n对于一个功能齐全的Socket，都要包含以下基本结构，其工作过程包含以下四个基本的步骤：\n　　（1） 创建Socket；\n　　（2） 打开连接到Socket的输入/出流；\n　　（3） 按照一定的协议对Socket进行读/写操作；\n　　（4） 关闭Socket.（在实际应用中，并未使用到显示的close，虽然很多文章都推荐如此，不过在我的程序中，可能因为程序本身比较简单，要求不高，所以并未造成什么影响。）\n3，创建Socket\n\n创建Socket\njava在包java.net中提供了两个类Socket和ServerSocket，分别用来表示双向连接的客户端和服务端。这是两个封装得非常好的类，使用很方便。其构造方法如下：\n```\nSocket(InetAddress address, int port);\nSocket(InetAddress address, int port, boolean stream);\nSocket(String host, int prot);\nSocket(String host, int prot, boolean stream);\nSocket(SocketImpl impl)\nSocket(String host, int port, InetAddress localAddr, int localPort)\nSocket(InetAddress address, int port, InetAddress localAddr, int localPort)\nServerSocket(int port);\nServerSocket(int port, int backlog);\nServerSocket(int port, int backlog, InetAddress bindAddr)\n```\n其中address、host和port分别是双向连接中另一方的IP地址、主机名和端 口号，stream指明socket是流socket还是数据报socket，localPort表示本地主机的端口号，localAddr和 bindAddr是本地机器的地址（ServerSocket的主机地址），impl是socket的父类，既可以用来创建serverSocket又可 以用来创建Socket。count则表示服务端所能支持的最大连接数。例如：\n```\nSocket client = new Socket(\"127.0.01.\", 80);\nServerSocket server = new ServerSocket(80);\n```\n注意，在选择端口时，必须小心。每一个端口提供一种特定的服务，只有给出正确的端口，才 能获得相应的服务。0~1023的端口号为系统所保留，例如http服务的端口号为80,telnet服务的端口号为21,ftp服务的端口号为23, 所以我们在选择端口号时，最好选择一个大于1023的数以防止发生冲突。\n在创建socket时如果发生错误，将产生IOException，在程序中必须对之作出处理。所以在创建Socket或ServerSocket是必须捕获或抛出例外。\n\n4，简单的Client/Server程序\n\n\t1. 客户端程序\n\n```\nimport java.io.*;\n   import java.net.*;\n　　public class TalkClient {\n　　　　public static void main(String args[]) {\n　　　　　　try{\n　　　　　　　　Socket socket=new Socket(\"127.0.0.1\",4700);\n　　　　　　　　//向本机的4700端口发出客户请求\n　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));\n　　　　　　　　//由系统标准输入设备构造BufferedReader对象\n　　　　　　　　PrintWriter os=new PrintWriter(socket.getOutputStream());\n　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象\n　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));\n　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象\n　　　　　　　　String readline;\n　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串\n　　　　　　　　while(!readline.equals(\"bye\")){\n　　　　　　　　//若从标准输入读入的字符串为 \"bye\"则停止循环\n　　　　　　　　　　os.println(readline);\n　　　　　　　　　　//将从系统标准输入读入的字符串输出到Server\n　　　　　　　　　　os.flush();\n　　　　　　　　　　//刷新输出流，使Server马上收到该字符串\n　　　　　　　　　　System.out.println(\"Client:\"+readline);\n　　　　　　　　　　//在系统标准输出上打印读入的字符串\n                 System.out.println(\"Server:\"+is.readLine());\n　　　　　　　　　　//从Server读入一字符串，并打印到标准输出上\n　　　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串\n　　　　　　　　} //继续循环\n　　　　　　　　os.close(); //关闭Socket输出流\n　　　　　　　　is.close(); //关闭Socket输入流\n　　　　　　　　socket.close(); //关闭Socket\n　　　　　　}catch(Exception e) {\n　　　　　　　　System.out.println(\"Error\"+e); //出错，则打印出错信息\n　　　　　　}\n　　}\n}\n```\n\t2. 服务器端程序\n\n```\nimport java.io.*;\n   import java.net.*;\n   import java.applet.Applet;\n　　public class TalkServer{\n　　　　public static void main(String args[]) {\n　　　　　　try{\n　　　　　　　　ServerSocket server=null;\n　　　　　　　　try{\n　　　　　　　　　　server=new ServerSocket(4700);\n　　　　　　　　//创建一个ServerSocket在端口4700监听客户请求\n　　　　　　　　}catch(Exception e) {\n　　　　　　　　　　System.out.println(\"can not listen to:\"+e);\n　　　　　　　　//出错，打印出错信息\n　　　　　　　　}\n　　　　　　　　Socket socket=null;\n　　　　　　　　try{\n　　　　　　　　　　socket=server.accept();\n　　　　　　　　　　//使用accept()阻塞等待客户请求，有客户\n　　　　　　　　　　//请求到来则产生一个Socket对象，并继续执行\n　　　　　　　　}catch(Exception e) {\n　　　　　　　　　　System.out.println(\"Error.\"+e);\n　　　　　　　　　　//出错，打印出错信息\n　　　　　　　　}\n　　　　　　　　String line;\n　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));\n　　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象\n　　　　　　　　PrintWriter os=newPrintWriter(socket.getOutputStream());\n　　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象\n　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));\n　　　　　　　　　//由系统标准输入设备构造BufferedReader对象\n　　　　　　　　System.out.println(\"Client:\"+is.readLine());\n　　　　　　　　//在标准输出上打印从客户端读入的字符串\n　　　　　　　　line=sin.readLine();\n　　　　　　　　//从标准输入读入一字符串\n　　　　　　　　while(!line.equals(\"bye\")){\n　　　　　　　　//如果该字符串为 \"bye\"，则停止循环\n　　　　　　　　　　os.println(line);\n　　　　　　　　　　//向客户端输出该字符串\n　　　　　　　　　　os.flush();\n　　　　　　　　　　//刷新输出流，使Client马上收到该字符串\n　　　　　　　　　　System.out.println(\"Server:\"+line);\n　　　　　　　　　　//在系统标准输出上打印读入的字符串\n　　　　　　　　　  System.out.println(\"Client:\"+is.readLine());\n　　　　　　　　　　//从Client读入一字符串，并打印到标准输出上\n　　　　　　　　　　line=sin.readLine();\n　　　　　　　　　　//从系统标准输入读入一字符串\n　　　　　　　　} 　//继续循环\n　　　　　　　　os.close(); //关闭Socket输出流\n　　　　　　　　is.close(); //关闭Socket输入流\n　　　　　　　　socket.close(); //关闭Socket\n　　　　　　　　server.close(); //关闭ServerSocket\n　　　　　　}catch(Exception e){\n　　　　　　　　System.out.println(\"Error:\"+e);\n　　　　　　　　//出错，打印出错信息\n　　　　　　}\n　　　　}\n　　}\n```\n5，支持多客户的client/server程序\n\n前面的Client/Server程序只能实现Server和一个客户的对话。在实际应用 中，往往是在服务器上运行一个永久的程序，它可以接收来自其他多个客户端的请求，提供相应的服务。为了实现在服务器方给多个客户提供服务的功能，需要对上 面的程序进行改造，利用多线程实现多客户机制。服务器总是在指定的端口上监听是否有客户请求，一旦监听到客户请求，服务器就会启动一个专门的服务线程来响 应该客户的请求，而服务器本身在启动完线程之后马上又进入监听状态，等待下一个客户的到来。","slug":"Java-Socket","published":1,"updated":"2017-05-05T13:11:33.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o690009poc5wm1b74mi","content":"<p>一，网络编程中两个主要的问题</p>\n<p>一个是如何准确的定位网络上一台或多台主机，另一个就是找到主机后如何可靠高效的进行数据传输。<br>在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。<br>而TCP层则提供面向应用的可靠（TCP）的或非可靠（UDP）的数据传输机制，这是网络编程的主要对象，一般不需要关心IP层是如何处理数据的。<br>目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服务端口，使后来的客户也 能及时得到服务。</p>\n<p>二，两类传输协议：TCP；UDP</p>\n<p>TCP是Tranfer Control Protocol的 简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建 立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送 或接收操作。<br>UDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。</p>\n<p>比较：</p>\n<pre><code>UDP：\n1，每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。\n2，UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。\n3，UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方\n\nTCP：\n1，面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。\n2，TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。\n3，TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。\n</code></pre><p>应用：</p>\n<blockquote>\n<ol>\n<li>TCP在网络通信上有极强的生命力，例如远程连接（Telnet）和文件传输（FTP）都需要不定长度的数据被可靠地传输。但是可靠的传输是要付出代价的，对数据内容正确性的检验必然占用计算机的处理时间和网络的带宽，因此TCP传输的效率不如UDP高。</li>\n<li>UDP操作简单，而且仅需要较少的监护，因此通常用于局域网高可靠性的分散系统中client/server应用程序。例如视频会议系统，并不要求音频视频数据绝对的正确，只要保证连贯性就可以了，这种情况下显然使用UDP会更合理一些。</li>\n</ol>\n</blockquote>\n<p>三，基于Socket的java网络编程</p>\n<p>1，什么是Socket</p>\n<p>网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket。Socket通常用来实现客户方和服务方的连接。Socket是TCP/IP协议的一个十分流行的编程界面，一个Socket由一个IP地址和一个端口号唯一确定。<br>但是，Socket所支持的协议种类也不光TCP/IP一种，因此两者之间是没有必然联系的。在Java环境下，Socket编程主要是指基于TCP/IP协议的网络编程。</p>\n<p>2，Socket通讯的过程</p>\n<p>Server端Listen(监听)某个端口是否有连接请求，Client端向Server 端发出Connect(连接)请求，Server端向Client端发回Accept（接受）消息。一个连接就建立起来了。Server端和Client 端都可以通过Send，Write等方法与对方通信。<br>对于一个功能齐全的Socket，都要包含以下基本结构，其工作过程包含以下四个基本的步骤：<br>　　（1） 创建Socket；<br>　　（2） 打开连接到Socket的输入/出流；<br>　　（3） 按照一定的协议对Socket进行读/写操作；<br>　　（4） 关闭Socket.（在实际应用中，并未使用到显示的close，虽然很多文章都推荐如此，不过在我的程序中，可能因为程序本身比较简单，要求不高，所以并未造成什么影响。）<br>3，创建Socket</p>\n<p>创建Socket<br>java在包java.net中提供了两个类Socket和ServerSocket，分别用来表示双向连接的客户端和服务端。这是两个封装得非常好的类，使用很方便。其构造方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Socket(InetAddress address, int port);</div><div class=\"line\">Socket(InetAddress address, int port, boolean stream);</div><div class=\"line\">Socket(String host, int prot);</div><div class=\"line\">Socket(String host, int prot, boolean stream);</div><div class=\"line\">Socket(SocketImpl impl)</div><div class=\"line\">Socket(String host, int port, InetAddress localAddr, int localPort)</div><div class=\"line\">Socket(InetAddress address, int port, InetAddress localAddr, int localPort)</div><div class=\"line\">ServerSocket(int port);</div><div class=\"line\">ServerSocket(int port, int backlog);</div><div class=\"line\">ServerSocket(int port, int backlog, InetAddress bindAddr)</div></pre></td></tr></table></figure></p>\n<p>其中address、host和port分别是双向连接中另一方的IP地址、主机名和端 口号，stream指明socket是流socket还是数据报socket，localPort表示本地主机的端口号，localAddr和 bindAddr是本地机器的地址（ServerSocket的主机地址），impl是socket的父类，既可以用来创建serverSocket又可 以用来创建Socket。count则表示服务端所能支持的最大连接数。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Socket client = new Socket(&quot;127.0.01.&quot;, 80);</div><div class=\"line\">ServerSocket server = new ServerSocket(80);</div></pre></td></tr></table></figure></p>\n<p>注意，在选择端口时，必须小心。每一个端口提供一种特定的服务，只有给出正确的端口，才 能获得相应的服务。0~1023的端口号为系统所保留，例如http服务的端口号为80,telnet服务的端口号为21,ftp服务的端口号为23, 所以我们在选择端口号时，最好选择一个大于1023的数以防止发生冲突。<br>在创建socket时如果发生错误，将产生IOException，在程序中必须对之作出处理。所以在创建Socket或ServerSocket是必须捕获或抛出例外。</p>\n<p>4，简单的Client/Server程序</p>\n<pre><code>1. 客户端程序\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.*;</div><div class=\"line\">   import java.net.*;</div><div class=\"line\">　　public class TalkClient &#123;</div><div class=\"line\">　　　　public static void main(String args[]) &#123;</div><div class=\"line\">　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　Socket socket=new Socket(&quot;127.0.0.1&quot;,4700);</div><div class=\"line\">　　　　　　　　//向本机的4700端口发出客户请求</div><div class=\"line\">　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));</div><div class=\"line\">　　　　　　　　//由系统标准输入设备构造BufferedReader对象</div><div class=\"line\">　　　　　　　　PrintWriter os=new PrintWriter(socket.getOutputStream());</div><div class=\"line\">　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象</div><div class=\"line\">　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));</div><div class=\"line\">　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象</div><div class=\"line\">　　　　　　　　String readline;</div><div class=\"line\">　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串</div><div class=\"line\">　　　　　　　　while(!readline.equals(&quot;bye&quot;))&#123;</div><div class=\"line\">　　　　　　　　//若从标准输入读入的字符串为 &quot;bye&quot;则停止循环</div><div class=\"line\">　　　　　　　　　　os.println(readline);</div><div class=\"line\">　　　　　　　　　　//将从系统标准输入读入的字符串输出到Server</div><div class=\"line\">　　　　　　　　　　os.flush();</div><div class=\"line\">　　　　　　　　　　//刷新输出流，使Server马上收到该字符串</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;Client:&quot;+readline);</div><div class=\"line\">　　　　　　　　　　//在系统标准输出上打印读入的字符串</div><div class=\"line\">                 System.out.println(&quot;Server:&quot;+is.readLine());</div><div class=\"line\">　　　　　　　　　　//从Server读入一字符串，并打印到标准输出上</div><div class=\"line\">　　　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串</div><div class=\"line\">　　　　　　　　&#125; //继续循环</div><div class=\"line\">　　　　　　　　os.close(); //关闭Socket输出流</div><div class=\"line\">　　　　　　　　is.close(); //关闭Socket输入流</div><div class=\"line\">　　　　　　　　socket.close(); //关闭Socket</div><div class=\"line\">　　　　　　&#125;catch(Exception e) &#123;</div><div class=\"line\">　　　　　　　　System.out.println(&quot;Error&quot;+e); //出错，则打印出错信息</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>2. 服务器端程序\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.*;</div><div class=\"line\">   import java.net.*;</div><div class=\"line\">   import java.applet.Applet;</div><div class=\"line\">　　public class TalkServer&#123;</div><div class=\"line\">　　　　public static void main(String args[]) &#123;</div><div class=\"line\">　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　ServerSocket server=null;</div><div class=\"line\">　　　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　　　server=new ServerSocket(4700);</div><div class=\"line\">　　　　　　　　//创建一个ServerSocket在端口4700监听客户请求</div><div class=\"line\">　　　　　　　　&#125;catch(Exception e) &#123;</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;can not listen to:&quot;+e);</div><div class=\"line\">　　　　　　　　//出错，打印出错信息</div><div class=\"line\">　　　　　　　　&#125;</div><div class=\"line\">　　　　　　　　Socket socket=null;</div><div class=\"line\">　　　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　　　socket=server.accept();</div><div class=\"line\">　　　　　　　　　　//使用accept()阻塞等待客户请求，有客户</div><div class=\"line\">　　　　　　　　　　//请求到来则产生一个Socket对象，并继续执行</div><div class=\"line\">　　　　　　　　&#125;catch(Exception e) &#123;</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;Error.&quot;+e);</div><div class=\"line\">　　　　　　　　　　//出错，打印出错信息</div><div class=\"line\">　　　　　　　　&#125;</div><div class=\"line\">　　　　　　　　String line;</div><div class=\"line\">　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));</div><div class=\"line\">　　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象</div><div class=\"line\">　　　　　　　　PrintWriter os=newPrintWriter(socket.getOutputStream());</div><div class=\"line\">　　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象</div><div class=\"line\">　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));</div><div class=\"line\">　　　　　　　　　//由系统标准输入设备构造BufferedReader对象</div><div class=\"line\">　　　　　　　　System.out.println(&quot;Client:&quot;+is.readLine());</div><div class=\"line\">　　　　　　　　//在标准输出上打印从客户端读入的字符串</div><div class=\"line\">　　　　　　　　line=sin.readLine();</div><div class=\"line\">　　　　　　　　//从标准输入读入一字符串</div><div class=\"line\">　　　　　　　　while(!line.equals(&quot;bye&quot;))&#123;</div><div class=\"line\">　　　　　　　　//如果该字符串为 &quot;bye&quot;，则停止循环</div><div class=\"line\">　　　　　　　　　　os.println(line);</div><div class=\"line\">　　　　　　　　　　//向客户端输出该字符串</div><div class=\"line\">　　　　　　　　　　os.flush();</div><div class=\"line\">　　　　　　　　　　//刷新输出流，使Client马上收到该字符串</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;Server:&quot;+line);</div><div class=\"line\">　　　　　　　　　　//在系统标准输出上打印读入的字符串</div><div class=\"line\">　　　　　　　　　  System.out.println(&quot;Client:&quot;+is.readLine());</div><div class=\"line\">　　　　　　　　　　//从Client读入一字符串，并打印到标准输出上</div><div class=\"line\">　　　　　　　　　　line=sin.readLine();</div><div class=\"line\">　　　　　　　　　　//从系统标准输入读入一字符串</div><div class=\"line\">　　　　　　　　&#125; 　//继续循环</div><div class=\"line\">　　　　　　　　os.close(); //关闭Socket输出流</div><div class=\"line\">　　　　　　　　is.close(); //关闭Socket输入流</div><div class=\"line\">　　　　　　　　socket.close(); //关闭Socket</div><div class=\"line\">　　　　　　　　server.close(); //关闭ServerSocket</div><div class=\"line\">　　　　　　&#125;catch(Exception e)&#123;</div><div class=\"line\">　　　　　　　　System.out.println(&quot;Error:&quot;+e);</div><div class=\"line\">　　　　　　　　//出错，打印出错信息</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>5，支持多客户的client/server程序</p>\n<p>前面的Client/Server程序只能实现Server和一个客户的对话。在实际应用 中，往往是在服务器上运行一个永久的程序，它可以接收来自其他多个客户端的请求，提供相应的服务。为了实现在服务器方给多个客户提供服务的功能，需要对上 面的程序进行改造，利用多线程实现多客户机制。服务器总是在指定的端口上监听是否有客户请求，一旦监听到客户请求，服务器就会启动一个专门的服务线程来响 应该客户的请求，而服务器本身在启动完线程之后马上又进入监听状态，等待下一个客户的到来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一，网络编程中两个主要的问题</p>\n<p>一个是如何准确的定位网络上一台或多台主机，另一个就是找到主机后如何可靠高效的进行数据传输。<br>在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。<br>而TCP层则提供面向应用的可靠（TCP）的或非可靠（UDP）的数据传输机制，这是网络编程的主要对象，一般不需要关心IP层是如何处理数据的。<br>目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服务端口，使后来的客户也 能及时得到服务。</p>\n<p>二，两类传输协议：TCP；UDP</p>\n<p>TCP是Tranfer Control Protocol的 简称，是一种面向连接的保证可靠传输的协议。通过TCP协议传输，得到的是一个顺序的无差错的数据流。发送方和接收方的成对的两个socket之间必须建 立连接，以便在TCP协议的基础上进行通信，当一个socket（通常都是server socket）等待建立连接时，另一个socket可以要求进行连接，一旦这两个socket连接起来，它们就可以进行双向数据传输，双方都可以进行发送 或接收操作。<br>UDP是User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。</p>\n<p>比较：</p>\n<pre><code>UDP：\n1，每个数据报中都给出了完整的地址信息，因此无需要建立发送方和接收方的连接。\n2，UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。\n3，UDP是一个不可靠的协议，发送方所发送的数据报并不一定以相同的次序到达接收方\n\nTCP：\n1，面向连接的协议，在socket之间进行数据传输之前必然要建立连接，所以在TCP中需要连接时间。\n2，TCP传输数据大小限制，一旦连接建立起来，双方的socket就可以按统一的格式传输大的数据。\n3，TCP是一个可靠的协议，它确保接收方完全正确地获取发送方所发送的全部数据。\n</code></pre><p>应用：</p>\n<blockquote>\n<ol>\n<li>TCP在网络通信上有极强的生命力，例如远程连接（Telnet）和文件传输（FTP）都需要不定长度的数据被可靠地传输。但是可靠的传输是要付出代价的，对数据内容正确性的检验必然占用计算机的处理时间和网络的带宽，因此TCP传输的效率不如UDP高。</li>\n<li>UDP操作简单，而且仅需要较少的监护，因此通常用于局域网高可靠性的分散系统中client/server应用程序。例如视频会议系统，并不要求音频视频数据绝对的正确，只要保证连贯性就可以了，这种情况下显然使用UDP会更合理一些。</li>\n</ol>\n</blockquote>\n<p>三，基于Socket的java网络编程</p>\n<p>1，什么是Socket</p>\n<p>网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket。Socket通常用来实现客户方和服务方的连接。Socket是TCP/IP协议的一个十分流行的编程界面，一个Socket由一个IP地址和一个端口号唯一确定。<br>但是，Socket所支持的协议种类也不光TCP/IP一种，因此两者之间是没有必然联系的。在Java环境下，Socket编程主要是指基于TCP/IP协议的网络编程。</p>\n<p>2，Socket通讯的过程</p>\n<p>Server端Listen(监听)某个端口是否有连接请求，Client端向Server 端发出Connect(连接)请求，Server端向Client端发回Accept（接受）消息。一个连接就建立起来了。Server端和Client 端都可以通过Send，Write等方法与对方通信。<br>对于一个功能齐全的Socket，都要包含以下基本结构，其工作过程包含以下四个基本的步骤：<br>　　（1） 创建Socket；<br>　　（2） 打开连接到Socket的输入/出流；<br>　　（3） 按照一定的协议对Socket进行读/写操作；<br>　　（4） 关闭Socket.（在实际应用中，并未使用到显示的close，虽然很多文章都推荐如此，不过在我的程序中，可能因为程序本身比较简单，要求不高，所以并未造成什么影响。）<br>3，创建Socket</p>\n<p>创建Socket<br>java在包java.net中提供了两个类Socket和ServerSocket，分别用来表示双向连接的客户端和服务端。这是两个封装得非常好的类，使用很方便。其构造方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Socket(InetAddress address, int port);</div><div class=\"line\">Socket(InetAddress address, int port, boolean stream);</div><div class=\"line\">Socket(String host, int prot);</div><div class=\"line\">Socket(String host, int prot, boolean stream);</div><div class=\"line\">Socket(SocketImpl impl)</div><div class=\"line\">Socket(String host, int port, InetAddress localAddr, int localPort)</div><div class=\"line\">Socket(InetAddress address, int port, InetAddress localAddr, int localPort)</div><div class=\"line\">ServerSocket(int port);</div><div class=\"line\">ServerSocket(int port, int backlog);</div><div class=\"line\">ServerSocket(int port, int backlog, InetAddress bindAddr)</div></pre></td></tr></table></figure></p>\n<p>其中address、host和port分别是双向连接中另一方的IP地址、主机名和端 口号，stream指明socket是流socket还是数据报socket，localPort表示本地主机的端口号，localAddr和 bindAddr是本地机器的地址（ServerSocket的主机地址），impl是socket的父类，既可以用来创建serverSocket又可 以用来创建Socket。count则表示服务端所能支持的最大连接数。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Socket client = new Socket(&quot;127.0.01.&quot;, 80);</div><div class=\"line\">ServerSocket server = new ServerSocket(80);</div></pre></td></tr></table></figure></p>\n<p>注意，在选择端口时，必须小心。每一个端口提供一种特定的服务，只有给出正确的端口，才 能获得相应的服务。0~1023的端口号为系统所保留，例如http服务的端口号为80,telnet服务的端口号为21,ftp服务的端口号为23, 所以我们在选择端口号时，最好选择一个大于1023的数以防止发生冲突。<br>在创建socket时如果发生错误，将产生IOException，在程序中必须对之作出处理。所以在创建Socket或ServerSocket是必须捕获或抛出例外。</p>\n<p>4，简单的Client/Server程序</p>\n<pre><code>1. 客户端程序\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.*;</div><div class=\"line\">   import java.net.*;</div><div class=\"line\">　　public class TalkClient &#123;</div><div class=\"line\">　　　　public static void main(String args[]) &#123;</div><div class=\"line\">　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　Socket socket=new Socket(&quot;127.0.0.1&quot;,4700);</div><div class=\"line\">　　　　　　　　//向本机的4700端口发出客户请求</div><div class=\"line\">　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));</div><div class=\"line\">　　　　　　　　//由系统标准输入设备构造BufferedReader对象</div><div class=\"line\">　　　　　　　　PrintWriter os=new PrintWriter(socket.getOutputStream());</div><div class=\"line\">　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象</div><div class=\"line\">　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));</div><div class=\"line\">　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象</div><div class=\"line\">　　　　　　　　String readline;</div><div class=\"line\">　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串</div><div class=\"line\">　　　　　　　　while(!readline.equals(&quot;bye&quot;))&#123;</div><div class=\"line\">　　　　　　　　//若从标准输入读入的字符串为 &quot;bye&quot;则停止循环</div><div class=\"line\">　　　　　　　　　　os.println(readline);</div><div class=\"line\">　　　　　　　　　　//将从系统标准输入读入的字符串输出到Server</div><div class=\"line\">　　　　　　　　　　os.flush();</div><div class=\"line\">　　　　　　　　　　//刷新输出流，使Server马上收到该字符串</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;Client:&quot;+readline);</div><div class=\"line\">　　　　　　　　　　//在系统标准输出上打印读入的字符串</div><div class=\"line\">                 System.out.println(&quot;Server:&quot;+is.readLine());</div><div class=\"line\">　　　　　　　　　　//从Server读入一字符串，并打印到标准输出上</div><div class=\"line\">　　　　　　　　　　readline=sin.readLine(); //从系统标准输入读入一字符串</div><div class=\"line\">　　　　　　　　&#125; //继续循环</div><div class=\"line\">　　　　　　　　os.close(); //关闭Socket输出流</div><div class=\"line\">　　　　　　　　is.close(); //关闭Socket输入流</div><div class=\"line\">　　　　　　　　socket.close(); //关闭Socket</div><div class=\"line\">　　　　　　&#125;catch(Exception e) &#123;</div><div class=\"line\">　　　　　　　　System.out.println(&quot;Error&quot;+e); //出错，则打印出错信息</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>2. 服务器端程序\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.*;</div><div class=\"line\">   import java.net.*;</div><div class=\"line\">   import java.applet.Applet;</div><div class=\"line\">　　public class TalkServer&#123;</div><div class=\"line\">　　　　public static void main(String args[]) &#123;</div><div class=\"line\">　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　ServerSocket server=null;</div><div class=\"line\">　　　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　　　server=new ServerSocket(4700);</div><div class=\"line\">　　　　　　　　//创建一个ServerSocket在端口4700监听客户请求</div><div class=\"line\">　　　　　　　　&#125;catch(Exception e) &#123;</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;can not listen to:&quot;+e);</div><div class=\"line\">　　　　　　　　//出错，打印出错信息</div><div class=\"line\">　　　　　　　　&#125;</div><div class=\"line\">　　　　　　　　Socket socket=null;</div><div class=\"line\">　　　　　　　　try&#123;</div><div class=\"line\">　　　　　　　　　　socket=server.accept();</div><div class=\"line\">　　　　　　　　　　//使用accept()阻塞等待客户请求，有客户</div><div class=\"line\">　　　　　　　　　　//请求到来则产生一个Socket对象，并继续执行</div><div class=\"line\">　　　　　　　　&#125;catch(Exception e) &#123;</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;Error.&quot;+e);</div><div class=\"line\">　　　　　　　　　　//出错，打印出错信息</div><div class=\"line\">　　　　　　　　&#125;</div><div class=\"line\">　　　　　　　　String line;</div><div class=\"line\">　　　　　　　　BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));</div><div class=\"line\">　　　　　　　　　//由Socket对象得到输入流，并构造相应的BufferedReader对象</div><div class=\"line\">　　　　　　　　PrintWriter os=newPrintWriter(socket.getOutputStream());</div><div class=\"line\">　　　　　　　　　//由Socket对象得到输出流，并构造PrintWriter对象</div><div class=\"line\">　　　　　　　　BufferedReader sin=new BufferedReader(new InputStreamReader(System.in));</div><div class=\"line\">　　　　　　　　　//由系统标准输入设备构造BufferedReader对象</div><div class=\"line\">　　　　　　　　System.out.println(&quot;Client:&quot;+is.readLine());</div><div class=\"line\">　　　　　　　　//在标准输出上打印从客户端读入的字符串</div><div class=\"line\">　　　　　　　　line=sin.readLine();</div><div class=\"line\">　　　　　　　　//从标准输入读入一字符串</div><div class=\"line\">　　　　　　　　while(!line.equals(&quot;bye&quot;))&#123;</div><div class=\"line\">　　　　　　　　//如果该字符串为 &quot;bye&quot;，则停止循环</div><div class=\"line\">　　　　　　　　　　os.println(line);</div><div class=\"line\">　　　　　　　　　　//向客户端输出该字符串</div><div class=\"line\">　　　　　　　　　　os.flush();</div><div class=\"line\">　　　　　　　　　　//刷新输出流，使Client马上收到该字符串</div><div class=\"line\">　　　　　　　　　　System.out.println(&quot;Server:&quot;+line);</div><div class=\"line\">　　　　　　　　　　//在系统标准输出上打印读入的字符串</div><div class=\"line\">　　　　　　　　　  System.out.println(&quot;Client:&quot;+is.readLine());</div><div class=\"line\">　　　　　　　　　　//从Client读入一字符串，并打印到标准输出上</div><div class=\"line\">　　　　　　　　　　line=sin.readLine();</div><div class=\"line\">　　　　　　　　　　//从系统标准输入读入一字符串</div><div class=\"line\">　　　　　　　　&#125; 　//继续循环</div><div class=\"line\">　　　　　　　　os.close(); //关闭Socket输出流</div><div class=\"line\">　　　　　　　　is.close(); //关闭Socket输入流</div><div class=\"line\">　　　　　　　　socket.close(); //关闭Socket</div><div class=\"line\">　　　　　　　　server.close(); //关闭ServerSocket</div><div class=\"line\">　　　　　　&#125;catch(Exception e)&#123;</div><div class=\"line\">　　　　　　　　System.out.println(&quot;Error:&quot;+e);</div><div class=\"line\">　　　　　　　　//出错，打印出错信息</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>5，支持多客户的client/server程序</p>\n<p>前面的Client/Server程序只能实现Server和一个客户的对话。在实际应用 中，往往是在服务器上运行一个永久的程序，它可以接收来自其他多个客户端的请求，提供相应的服务。为了实现在服务器方给多个客户提供服务的功能，需要对上 面的程序进行改造，利用多线程实现多客户机制。服务器总是在指定的端口上监听是否有客户请求，一旦监听到客户请求，服务器就会启动一个专门的服务线程来响 应该客户的请求，而服务器本身在启动完线程之后马上又进入监听状态，等待下一个客户的到来。</p>\n"},{"title":"Java synchronized详解","date":"2017-02-16T13:44:06.000Z","description":"Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。","_content":"记下来，很重要。\nJava语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。\n\n1. 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n2. 然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n3. 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n4. 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n5. 以上规则对其它对象锁同样适用.\n\n举例说明： \n\t1. 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n\n```\npackage ths;\npublic class Thread1 implements Runnable {  \n     public void run() {  \n          synchronized(this) {  \n               for (int i = 0; i < 5; i++) {  \n                    System.out.println(Thread.currentThread().getName() + \" synchronized loop \" + i);  \n               }  \n          }  \n     }  \n     public static void main(String[] args) {  \n          Thread1 t1 = new Thread1();  \n          Thread ta = new Thread(t1, \"A\");  \n          Thread tb = new Thread(t1, \"B\");  \n          ta.start();  \n          tb.start();  \n     } \n}\n```\n结果：\n```\n\tA synchronized loop 0  \n    A synchronized loop 1  \n    A synchronized loop 2  \n    A synchronized loop 3  \n    A synchronized loop 4  \n    B synchronized loop 0  \n    B synchronized loop 1  \n    B synchronized loop 2  \n    B synchronized loop 3  \n    B synchronized loop 4\n```\n\t2. 然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n\n```\npackage ths;\n\npublic class Thread2 {  \n     public void m4t1() {  \n          synchronized(this) {  \n               int i = 5;  \n               while( i-- > 0) {  \n                    System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n                    try {  \n                         Thread.sleep(500);  \n                    } catch (InterruptedException ie) {  \n                    }  \n               }  \n          }  \n     }  \n     public void m4t2() {  \n          int i = 5;  \n          while( i-- > 0) {  \n               System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n               try {  \n                    Thread.sleep(500);  \n               } catch (InterruptedException ie) {  \n               }  \n          }  \n     }  \n     public static void main(String[] args) {  \n          final Thread2 myt2 = new Thread2();  \n          Thread t1 = new Thread(  new Runnable() {  public void run() {  myt2.m4t1();  }  }, \"t1\"  );  \n          Thread t2 = new Thread(  new Runnable() {  public void run() { myt2.m4t2();   }  }, \"t2\"  );  \n          t1.start();  \n          t2.start();  \n     } \n}\n```\n结果：\n```\n\tt1 : 4  \n    t2 : 4  \n    t1 : 3  \n    t2 : 3  \n    t1 : 2  \n    t2 : 2  \n    t1 : 1  \n    t2 : 1  \n    t1 : 0  \n    t2 : 0\n```\n\t3. 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n\n```\n//修改Thread2.m4t2()方法：  \npublic void m4t2() {  \n      synchronized(this) {  \n           int i = 5;  \n           while( i-- > 0) {  \n                System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n                try {  \n                     Thread.sleep(500);  \n                } catch (InterruptedException ie) {  \n           \t\t}  \n          }  \n     }\n}\n```\n结果：\n```\n    t1 : 4  \n    t1 : 3  \n    t1 : 2  \n    t1 : 1  \n    t1 : 0  \n    t2 : 4  \n    t2 : 3  \n    t2 : 2  \n    t2 : 1  \n    t2 : 0\n```\n\t4. 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n\n```\n//修改Thread2.m4t2()方法如下：\n\n public synchronized void m4t2() {  \n      int i = 5;  \n      while( i-- > 0) {  \n           System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n           try {  \n                Thread.sleep(500);  \n           } catch (InterruptedException ie) {  \n           }  \n      }  \n }\n```\n结果：\n```\n    t1 : 4  \n    t1 : 3  \n    t1 : 2  \n    t1 : 1  \n    t1 : 0  \n    t2 : 4  \n    t2 : 3  \n    t2 : 2  \n    t2 : 1  \n    t2 : 0\n```\n\t5. 以上规则对其它对象锁同样适用:\n\n```\npackage ths;\n\npublic class Thread3 { \n     class Inner { \n          private void m4t1() { \n               int i = 5; \n               while(i-- > 0) { \n                    System.out.println(Thread.currentThread().getName() + \" : Inner.m4t1()=\" + i); \n                    try { \n                         Thread.sleep(500); \n                    } catch(InterruptedException ie) { \n                    } \n               } \n          } \n          private void m4t2() { \n               int i = 5; \n               while(i-- > 0) { \n                    System.out.println(Thread.currentThread().getName() + \" : Inner.m4t2()=\" + i); \n                    try { \n                         Thread.sleep(500); \n                    } catch(InterruptedException ie) { \n                    } \n               } \n          } \n     } \n     private void m4t1(Inner inner) { \n          synchronized(inner) { //使用对象锁 \n          inner.m4t1(); \n     } \n     private void m4t2(Inner inner) { \n          inner.m4t2(); \n     } \n     public static void main(String[] args) { \n          final Thread3 myt3 = new Thread3(); \n          final Inner inner = myt3.new Inner(); \n          Thread t1 = new Thread( new Runnable() {public void run() { myt3.m4t1(inner);} }, \"t1\"); \n     Thread t2 = new Thread( new Runnable() {public void run() { myt3.m4t2(inner);} }, \"t2\"); \n     t1.start(); \n     t2.start(); \n  } \n}\n```\n结果：\n尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。\n```\n\tt1 : Inner.m4t1()=4  \n    t2 : Inner.m4t2()=4  \n    t1 : Inner.m4t1()=3  \n    t2 : Inner.m4t2()=3  \n    t1 : Inner.m4t1()=2  \n    t2 : Inner.m4t2()=2  \n    t1 : Inner.m4t1()=1  \n    t2 : Inner.m4t2()=1  \n    t1 : Inner.m4t1()=0  \n    t2 : Inner.m4t2()=0\n```\n现在在Inner.m4t2()前面加上synchronized：\n```\nprivate synchronized void m4t2() {  \n          int i = 5;  \n          while(i-- > 0) {  \n               System.out.println(Thread.currentThread().getName() + \" : Inner.m4t2()=\" + i);  \n               try {  \n                    Thread.sleep(500);  \n               } catch(InterruptedException ie) {  \n               }  \n          }  \n     }\n```\n结果：\n尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。\n```\n\tt1 : Inner.m4t1()=4  \n    t1 : Inner.m4t1()=3  \n    t1 : Inner.m4t1()=2  \n    t1 : Inner.m4t1()=1  \n    t1 : Inner.m4t1()=0  \n    t2 : Inner.m4t2()=4  \n    t2 : Inner.m4t2()=3  \n    t2 : Inner.m4t2()=2  \n    t2 : Inner.m4t2()=1  \n    t2 : Inner.m4t2()=0\n```\n\nsynchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。 \n\t1. synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如： \npublic synchronized void accessVal(int newVal); \nsynchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）。 \n在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成员变量的访问。 \nsynchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供了更好的解决办法，那就是 synchronized 块。 \n\t2. synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：\n```\nsynchronized(syncObject) {  \n//允许访问控制的代码  \n}  \n```\nsynchronized 块是这样一个代码块，其中的代码必须获得对象syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。 \n对synchronized(this)的一些理解 \n一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。 \n二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。 \n三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。 \n四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。 \n五、以上规则对其它对象锁同样适用 \n\njava中synchronized用法 \n打个比方：一个object就像一个大房子，大门永远打开。房子里有 很多房间（也就是方法）。 \n这些房间有上锁的（synchronized方法）， 和不上锁之分（普通方法）。房门口放着一把钥匙（key），这把钥匙可以打开所有上锁的房间。 \n另外我把所有想调用该对象方法的线程比喻成想进入这房子某个 房间的人。所有的东西就这么多了，下面我们看看这些东西之间如何作用的。 \n在此我们先来明确一下我们的前提条件。该对象至少有一synchronized方法，否则这个key还有啥意义。当然也就不会有我们的这个主题了。 \n一个人想进入某间上了锁的房间，他来到房子门口，看见钥匙在那儿（说明暂时还没有其他人要使用上锁的 房间）。于是他走上去拿到了钥匙，并且按照自己 的计划使用那些房间。注意一点，他每次使用完一次上锁的房间后会马上把钥匙还回去。即使他要连续使用两间上锁的房间，中间他也要把钥匙还回去，再取回来。因此，普通情况下钥匙的使用原则是：“随用随借，用完即还。”这时其他人可以不受限制的使用那些不上锁的房间，一个人用一间可以，两个人用一间也可以，没限制。但是如果当某个人想要进入上锁的房间，他就要跑到大门口去看看了。有钥匙当然拿了就走，没有的话，就只能等了。 \n要是很多人在等这把钥匙，等钥匙还回来以后，谁会优先得到钥匙？Not guaranteed。象前面例子里那个想连续使用两个上锁房间的家伙，他中间还钥匙的时候如果还有其他人在等钥匙，那么没有任何保证这家伙能再次拿到。 （JAVA规范在很多地方都明确说明不保证，象Thread.sleep()休息后多久会返回运行，相同优先权的线程那个首先被执行，当要访问对象的锁被 释放后处于等待池的多个线程哪个会优先得到，等等。我想最终的决定权是在JVM，之所以不保证，就是因为JVM在做出上述决定的时候，绝不是简简单单根据 一个条件来做出判断，而是根据很多条。而由于判断条件太多，如果说出来可能会影响JAVA的推广，也可能是因为知识产权保护的原因吧。SUN给了个不保证 就混过去了。无可厚非。但我相信这些不确定，并非完全不确定。因为计算机这东西本身就是按指令运行的。即使看起来很随机的现象，其实都是有规律可寻。学过 计算机的都知道，计算机里随机数的学名是伪随机数，是人运用一定的方法写出来的，看上去随机罢了。另外，或许是因为要想弄的确定太费事，也没多大意义，所 以不确定就不确定了吧。） \n再来看看同步代码块。和同步方法有小小的不同。 \n1. 从尺寸上讲，同步代码块比同步方法小。你可以把同步代码块看成是没上锁房间里的一块用带锁的屏风隔开的空间。 \n2. 同步代码块还可以人为的指定获得某个其它对象的key。就像是指定用哪一把钥匙才能开这个屏风的锁，你可以用本房的钥匙；你也可以指定用另一个房子的钥匙才能开，这样的话，你要跑到另一栋房子那儿把那个钥匙拿来，并用那个房子的钥匙来打开这个房子的带锁的屏风。 \n\n记住你获得的那另一栋房子的钥匙，并不影响其他人进入那栋房子没有锁的房间。 \n为什么要使用同步代码块呢？我想应该是这样的：首先对程序来讲同步的部分很影响运行效率，而一个方法通常是先创建一些局部变量，再对这些变量做一些 操作，如运算，显示等等；而同步所覆盖的代码越多，对效率的影响就越严重。因此我们通常尽量缩小其影响范围。 \n如何做？同步代码块。我们只把一个方法中该同 步的地方同步，比如运算。 \n另外，同步代码块可以指定钥匙这一特点有个额外的好处，是可以在一定时期内霸占某个对象的key。还记得前面说过普通情况下钥匙的使用原则吗。现在不是普通情况了。你所取得的那把钥匙不是永远不还，而是在退出同步代码块时才还。 \n还用前面那个想连续用两个上锁房间的家伙打比方。怎样才能在用完一间以后，继续使用另一间呢。用同步代码块吧。先创建另外一个线程，做一个同步代码 块，把那个代码块的锁指向这个房子的钥匙。然后启动那个线程。只要你能在进入那个代码块时抓到这房子的钥匙，你就可以一直保留到退出那个代码块。也就是说 你甚至可以对本房内所有上锁的房间遍历，甚至再sleep(10*60*1000)，而房门口却还有1000个线程在等这把钥匙呢。很过瘾吧。 \n在此对sleep()方法和钥匙的关联性讲一下。一个线程在拿到key后，且没有完成同步的内容时，如果被强制sleep()了，那key还一直在 它那儿。直到它再次运行，做完所有同步内容，才会归还key。记住，那家伙只是干活干累了，去休息一下，他并没干完他要干的事。为了避免别人进入那个房间 把里面搞的一团糟，即使在睡觉的时候他也要把那唯一的钥匙戴在身上。 \n最后，也许有人会问，为什么要一把钥匙通开，而不是一个钥匙一个门呢？我想这纯粹是因为复杂性问题。一个钥匙一个门当然更安全，但是会牵扯好多问题。钥匙 的产生，保管，获得，归还等等。其复杂性有可能随同步方法的增加呈几何级数增加，严重影响效率。这也算是一个权衡的问题吧。为了增加一点点安全性，导致效 率大大降低，是多么不可取啊。\nsynchronized的一个简单例子\n```\npublic class TextThread {\n\npublic static void main(String[] args) { \n   TxtThread tt = new TxtThread(); \n   new Thread(tt).start(); \n   new Thread(tt).start(); \n   new Thread(tt).start(); \n   new Thread(tt).start(); \n} \n}\n\nclass TxtThread implements Runnable { \nint num = 100; \nString str = new String();\n\npublic void run() { \n   synchronized (str) { \n    while (num > 0) {\n\n     try { \n      Thread.sleep(1); \n     } catch (Exception e) { \n      e.getMessage(); \n     } \n     System.out.println(Thread.currentThread().getName() \n       + \"this is \" + num--); \n    } \n   } \n} \n}\n```\n上面的例子中为了制造一个时间差,也就是出错的机会,使用了Thread.sleep(10)、Java对多线程的支持与同步机制深受大家的喜爱，似乎看起来使用了synchronized关键字就可以轻松地解决多线程共享数据同步问题。到底如何？――还得对synchronized关键字的作用进行深入了解才可定论。\n总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。 \n在进一步阐述之前，我们需要明确几点：\n- A．无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。\n- B．每个对象只有一个锁（lock）与之相关联。\n- C．实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。\n\n\n接着来讨论synchronized用到不同地方对代码产生的影响：\n假设P1、P2是同一个类的不同对象，这个类中定义了以下几种情况的同步块或同步方法，P1、P2就都可以调用它们。\n\t1. 把synchronized当作函数修饰符时，示例代码如下：\n\n```\nPublic synchronized void methodAAA()\n{\n//….\n}\n```\n这也就是同步方法，那这时synchronized锁定的是哪个对象呢？它锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，它们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却可以任意调用这个被加了synchronized关键字的方法。\n上边的示例代码等同于如下代码：\n```\npublic void methodAAA()\n{\n\tsynchronized (this)      // (1)\n\t{\n\t     //…..\n\t}\n}\n```\n(1)处的this指的是什么呢？它指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。――那个拿到了P1对象锁的线程，才可以调用P1的同步方法，而对P2而言，P1这个锁与它毫不相干，程序也可能在这种情形下摆脱同步机制的控制，造成数据混乱：\n\t2. 同步块，示例代码如下：\n\n```\npublic void method3(SomeObject so)\n{\n    synchronized(so)\n    { \n       //….. \n    }\n}\n```\n这时，锁就是so这个对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：\n```\nclass Foo implements Runnable\n{\n        private byte[] lock = new byte[0]; // 特殊的instance变量\n        Public void methodA() \n        {\n           synchronized(lock) { //… }\n        }\n        //…..\n}\n```\n注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock= new Object()则需要7行操作码。\n\t3. 将synchronized作用于static 函数，示例代码如下：\n\n```\nClass Foo \n{\n    public synchronized static void methodAAA()   // 同步的static 函数 \n    { \n        //…. \n    }\n    public void methodBBB() \n    {\n       synchronized(Foo.class)   // class literal(类名称字面常量)\n    } \n}\n```\n代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。\n记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。 \n可以推断：如果一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj\n在多线程中分别访问A和B两个方法时，不会构成同步，因为它们的锁都不一样。A方法的锁是Obj这个对象，而B的锁是Obj所属的那个Class。\n小结如下： \n搞清楚synchronized锁定的是哪个对象，就能帮助我们设计更安全的多线程程序。\n还有一些技巧可以让我们对共享资源的同步访问更加安全：\n1. 定义private 的instance变量+它的 get方法，而不要定义public/protected的instance变量。如果将变量定义为public，对象在外界可以绕过同步方法的控制而直接取得它，并改动它。这也是JavaBean的标准实现方式之一。\n2. 如果instance变量是一个对象，如数组或ArrayList什么的，那上述方法仍然不安全，因为当外界对象通过get方法拿到这个instance对象的引用后，又将其指向另一个对象，那么这个private变量也就变了，岂不是很危险。 这个时候就需要将get方法也加上synchronized同步，并且，只返回这个private对象的clone()――这样，调用端得到的就是对象副本的引用了\n\n作者：GangWang\n出处：http://www.cnblogs.com/GnagWang/ \n本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。 ","source":"_posts/Java-synchronized.md","raw":"---\ntitle: Java synchronized详解\ndate: 2017-02-16 21:44:06\ncategories: Java\ntags: \n\t-  Java\n\t-  多线程\n\ndescription: Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。\n---\n记下来，很重要。\nJava语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。\n\n1. 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n2. 然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n3. 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n4. 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n5. 以上规则对其它对象锁同样适用.\n\n举例说明： \n\t1. 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n\n```\npackage ths;\npublic class Thread1 implements Runnable {  \n     public void run() {  \n          synchronized(this) {  \n               for (int i = 0; i < 5; i++) {  \n                    System.out.println(Thread.currentThread().getName() + \" synchronized loop \" + i);  \n               }  \n          }  \n     }  \n     public static void main(String[] args) {  \n          Thread1 t1 = new Thread1();  \n          Thread ta = new Thread(t1, \"A\");  \n          Thread tb = new Thread(t1, \"B\");  \n          ta.start();  \n          tb.start();  \n     } \n}\n```\n结果：\n```\n\tA synchronized loop 0  \n    A synchronized loop 1  \n    A synchronized loop 2  \n    A synchronized loop 3  \n    A synchronized loop 4  \n    B synchronized loop 0  \n    B synchronized loop 1  \n    B synchronized loop 2  \n    B synchronized loop 3  \n    B synchronized loop 4\n```\n\t2. 然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n\n```\npackage ths;\n\npublic class Thread2 {  \n     public void m4t1() {  \n          synchronized(this) {  \n               int i = 5;  \n               while( i-- > 0) {  \n                    System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n                    try {  \n                         Thread.sleep(500);  \n                    } catch (InterruptedException ie) {  \n                    }  \n               }  \n          }  \n     }  \n     public void m4t2() {  \n          int i = 5;  \n          while( i-- > 0) {  \n               System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n               try {  \n                    Thread.sleep(500);  \n               } catch (InterruptedException ie) {  \n               }  \n          }  \n     }  \n     public static void main(String[] args) {  \n          final Thread2 myt2 = new Thread2();  \n          Thread t1 = new Thread(  new Runnable() {  public void run() {  myt2.m4t1();  }  }, \"t1\"  );  \n          Thread t2 = new Thread(  new Runnable() {  public void run() { myt2.m4t2();   }  }, \"t2\"  );  \n          t1.start();  \n          t2.start();  \n     } \n}\n```\n结果：\n```\n\tt1 : 4  \n    t2 : 4  \n    t1 : 3  \n    t2 : 3  \n    t1 : 2  \n    t2 : 2  \n    t1 : 1  \n    t2 : 1  \n    t1 : 0  \n    t2 : 0\n```\n\t3. 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n\n```\n//修改Thread2.m4t2()方法：  \npublic void m4t2() {  \n      synchronized(this) {  \n           int i = 5;  \n           while( i-- > 0) {  \n                System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n                try {  \n                     Thread.sleep(500);  \n                } catch (InterruptedException ie) {  \n           \t\t}  \n          }  \n     }\n}\n```\n结果：\n```\n    t1 : 4  \n    t1 : 3  \n    t1 : 2  \n    t1 : 1  \n    t1 : 0  \n    t2 : 4  \n    t2 : 3  \n    t2 : 2  \n    t2 : 1  \n    t2 : 0\n```\n\t4. 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n\n```\n//修改Thread2.m4t2()方法如下：\n\n public synchronized void m4t2() {  \n      int i = 5;  \n      while( i-- > 0) {  \n           System.out.println(Thread.currentThread().getName() + \" : \" + i);  \n           try {  \n                Thread.sleep(500);  \n           } catch (InterruptedException ie) {  \n           }  \n      }  \n }\n```\n结果：\n```\n    t1 : 4  \n    t1 : 3  \n    t1 : 2  \n    t1 : 1  \n    t1 : 0  \n    t2 : 4  \n    t2 : 3  \n    t2 : 2  \n    t2 : 1  \n    t2 : 0\n```\n\t5. 以上规则对其它对象锁同样适用:\n\n```\npackage ths;\n\npublic class Thread3 { \n     class Inner { \n          private void m4t1() { \n               int i = 5; \n               while(i-- > 0) { \n                    System.out.println(Thread.currentThread().getName() + \" : Inner.m4t1()=\" + i); \n                    try { \n                         Thread.sleep(500); \n                    } catch(InterruptedException ie) { \n                    } \n               } \n          } \n          private void m4t2() { \n               int i = 5; \n               while(i-- > 0) { \n                    System.out.println(Thread.currentThread().getName() + \" : Inner.m4t2()=\" + i); \n                    try { \n                         Thread.sleep(500); \n                    } catch(InterruptedException ie) { \n                    } \n               } \n          } \n     } \n     private void m4t1(Inner inner) { \n          synchronized(inner) { //使用对象锁 \n          inner.m4t1(); \n     } \n     private void m4t2(Inner inner) { \n          inner.m4t2(); \n     } \n     public static void main(String[] args) { \n          final Thread3 myt3 = new Thread3(); \n          final Inner inner = myt3.new Inner(); \n          Thread t1 = new Thread( new Runnable() {public void run() { myt3.m4t1(inner);} }, \"t1\"); \n     Thread t2 = new Thread( new Runnable() {public void run() { myt3.m4t2(inner);} }, \"t2\"); \n     t1.start(); \n     t2.start(); \n  } \n}\n```\n结果：\n尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。\n```\n\tt1 : Inner.m4t1()=4  \n    t2 : Inner.m4t2()=4  \n    t1 : Inner.m4t1()=3  \n    t2 : Inner.m4t2()=3  \n    t1 : Inner.m4t1()=2  \n    t2 : Inner.m4t2()=2  \n    t1 : Inner.m4t1()=1  \n    t2 : Inner.m4t2()=1  \n    t1 : Inner.m4t1()=0  \n    t2 : Inner.m4t2()=0\n```\n现在在Inner.m4t2()前面加上synchronized：\n```\nprivate synchronized void m4t2() {  \n          int i = 5;  \n          while(i-- > 0) {  \n               System.out.println(Thread.currentThread().getName() + \" : Inner.m4t2()=\" + i);  \n               try {  \n                    Thread.sleep(500);  \n               } catch(InterruptedException ie) {  \n               }  \n          }  \n     }\n```\n结果：\n尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。\n```\n\tt1 : Inner.m4t1()=4  \n    t1 : Inner.m4t1()=3  \n    t1 : Inner.m4t1()=2  \n    t1 : Inner.m4t1()=1  \n    t1 : Inner.m4t1()=0  \n    t2 : Inner.m4t2()=4  \n    t2 : Inner.m4t2()=3  \n    t2 : Inner.m4t2()=2  \n    t2 : Inner.m4t2()=1  \n    t2 : Inner.m4t2()=0\n```\n\nsynchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。 \n\t1. synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如： \npublic synchronized void accessVal(int newVal); \nsynchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）。 \n在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成员变量的访问。 \nsynchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供了更好的解决办法，那就是 synchronized 块。 \n\t2. synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：\n```\nsynchronized(syncObject) {  \n//允许访问控制的代码  \n}  \n```\nsynchronized 块是这样一个代码块，其中的代码必须获得对象syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。 \n对synchronized(this)的一些理解 \n一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。 \n二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。 \n三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。 \n四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。 \n五、以上规则对其它对象锁同样适用 \n\njava中synchronized用法 \n打个比方：一个object就像一个大房子，大门永远打开。房子里有 很多房间（也就是方法）。 \n这些房间有上锁的（synchronized方法）， 和不上锁之分（普通方法）。房门口放着一把钥匙（key），这把钥匙可以打开所有上锁的房间。 \n另外我把所有想调用该对象方法的线程比喻成想进入这房子某个 房间的人。所有的东西就这么多了，下面我们看看这些东西之间如何作用的。 \n在此我们先来明确一下我们的前提条件。该对象至少有一synchronized方法，否则这个key还有啥意义。当然也就不会有我们的这个主题了。 \n一个人想进入某间上了锁的房间，他来到房子门口，看见钥匙在那儿（说明暂时还没有其他人要使用上锁的 房间）。于是他走上去拿到了钥匙，并且按照自己 的计划使用那些房间。注意一点，他每次使用完一次上锁的房间后会马上把钥匙还回去。即使他要连续使用两间上锁的房间，中间他也要把钥匙还回去，再取回来。因此，普通情况下钥匙的使用原则是：“随用随借，用完即还。”这时其他人可以不受限制的使用那些不上锁的房间，一个人用一间可以，两个人用一间也可以，没限制。但是如果当某个人想要进入上锁的房间，他就要跑到大门口去看看了。有钥匙当然拿了就走，没有的话，就只能等了。 \n要是很多人在等这把钥匙，等钥匙还回来以后，谁会优先得到钥匙？Not guaranteed。象前面例子里那个想连续使用两个上锁房间的家伙，他中间还钥匙的时候如果还有其他人在等钥匙，那么没有任何保证这家伙能再次拿到。 （JAVA规范在很多地方都明确说明不保证，象Thread.sleep()休息后多久会返回运行，相同优先权的线程那个首先被执行，当要访问对象的锁被 释放后处于等待池的多个线程哪个会优先得到，等等。我想最终的决定权是在JVM，之所以不保证，就是因为JVM在做出上述决定的时候，绝不是简简单单根据 一个条件来做出判断，而是根据很多条。而由于判断条件太多，如果说出来可能会影响JAVA的推广，也可能是因为知识产权保护的原因吧。SUN给了个不保证 就混过去了。无可厚非。但我相信这些不确定，并非完全不确定。因为计算机这东西本身就是按指令运行的。即使看起来很随机的现象，其实都是有规律可寻。学过 计算机的都知道，计算机里随机数的学名是伪随机数，是人运用一定的方法写出来的，看上去随机罢了。另外，或许是因为要想弄的确定太费事，也没多大意义，所 以不确定就不确定了吧。） \n再来看看同步代码块。和同步方法有小小的不同。 \n1. 从尺寸上讲，同步代码块比同步方法小。你可以把同步代码块看成是没上锁房间里的一块用带锁的屏风隔开的空间。 \n2. 同步代码块还可以人为的指定获得某个其它对象的key。就像是指定用哪一把钥匙才能开这个屏风的锁，你可以用本房的钥匙；你也可以指定用另一个房子的钥匙才能开，这样的话，你要跑到另一栋房子那儿把那个钥匙拿来，并用那个房子的钥匙来打开这个房子的带锁的屏风。 \n\n记住你获得的那另一栋房子的钥匙，并不影响其他人进入那栋房子没有锁的房间。 \n为什么要使用同步代码块呢？我想应该是这样的：首先对程序来讲同步的部分很影响运行效率，而一个方法通常是先创建一些局部变量，再对这些变量做一些 操作，如运算，显示等等；而同步所覆盖的代码越多，对效率的影响就越严重。因此我们通常尽量缩小其影响范围。 \n如何做？同步代码块。我们只把一个方法中该同 步的地方同步，比如运算。 \n另外，同步代码块可以指定钥匙这一特点有个额外的好处，是可以在一定时期内霸占某个对象的key。还记得前面说过普通情况下钥匙的使用原则吗。现在不是普通情况了。你所取得的那把钥匙不是永远不还，而是在退出同步代码块时才还。 \n还用前面那个想连续用两个上锁房间的家伙打比方。怎样才能在用完一间以后，继续使用另一间呢。用同步代码块吧。先创建另外一个线程，做一个同步代码 块，把那个代码块的锁指向这个房子的钥匙。然后启动那个线程。只要你能在进入那个代码块时抓到这房子的钥匙，你就可以一直保留到退出那个代码块。也就是说 你甚至可以对本房内所有上锁的房间遍历，甚至再sleep(10*60*1000)，而房门口却还有1000个线程在等这把钥匙呢。很过瘾吧。 \n在此对sleep()方法和钥匙的关联性讲一下。一个线程在拿到key后，且没有完成同步的内容时，如果被强制sleep()了，那key还一直在 它那儿。直到它再次运行，做完所有同步内容，才会归还key。记住，那家伙只是干活干累了，去休息一下，他并没干完他要干的事。为了避免别人进入那个房间 把里面搞的一团糟，即使在睡觉的时候他也要把那唯一的钥匙戴在身上。 \n最后，也许有人会问，为什么要一把钥匙通开，而不是一个钥匙一个门呢？我想这纯粹是因为复杂性问题。一个钥匙一个门当然更安全，但是会牵扯好多问题。钥匙 的产生，保管，获得，归还等等。其复杂性有可能随同步方法的增加呈几何级数增加，严重影响效率。这也算是一个权衡的问题吧。为了增加一点点安全性，导致效 率大大降低，是多么不可取啊。\nsynchronized的一个简单例子\n```\npublic class TextThread {\n\npublic static void main(String[] args) { \n   TxtThread tt = new TxtThread(); \n   new Thread(tt).start(); \n   new Thread(tt).start(); \n   new Thread(tt).start(); \n   new Thread(tt).start(); \n} \n}\n\nclass TxtThread implements Runnable { \nint num = 100; \nString str = new String();\n\npublic void run() { \n   synchronized (str) { \n    while (num > 0) {\n\n     try { \n      Thread.sleep(1); \n     } catch (Exception e) { \n      e.getMessage(); \n     } \n     System.out.println(Thread.currentThread().getName() \n       + \"this is \" + num--); \n    } \n   } \n} \n}\n```\n上面的例子中为了制造一个时间差,也就是出错的机会,使用了Thread.sleep(10)、Java对多线程的支持与同步机制深受大家的喜爱，似乎看起来使用了synchronized关键字就可以轻松地解决多线程共享数据同步问题。到底如何？――还得对synchronized关键字的作用进行深入了解才可定论。\n总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。 \n在进一步阐述之前，我们需要明确几点：\n- A．无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。\n- B．每个对象只有一个锁（lock）与之相关联。\n- C．实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。\n\n\n接着来讨论synchronized用到不同地方对代码产生的影响：\n假设P1、P2是同一个类的不同对象，这个类中定义了以下几种情况的同步块或同步方法，P1、P2就都可以调用它们。\n\t1. 把synchronized当作函数修饰符时，示例代码如下：\n\n```\nPublic synchronized void methodAAA()\n{\n//….\n}\n```\n这也就是同步方法，那这时synchronized锁定的是哪个对象呢？它锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，它们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却可以任意调用这个被加了synchronized关键字的方法。\n上边的示例代码等同于如下代码：\n```\npublic void methodAAA()\n{\n\tsynchronized (this)      // (1)\n\t{\n\t     //…..\n\t}\n}\n```\n(1)处的this指的是什么呢？它指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。――那个拿到了P1对象锁的线程，才可以调用P1的同步方法，而对P2而言，P1这个锁与它毫不相干，程序也可能在这种情形下摆脱同步机制的控制，造成数据混乱：\n\t2. 同步块，示例代码如下：\n\n```\npublic void method3(SomeObject so)\n{\n    synchronized(so)\n    { \n       //….. \n    }\n}\n```\n这时，锁就是so这个对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：\n```\nclass Foo implements Runnable\n{\n        private byte[] lock = new byte[0]; // 特殊的instance变量\n        Public void methodA() \n        {\n           synchronized(lock) { //… }\n        }\n        //…..\n}\n```\n注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock= new Object()则需要7行操作码。\n\t3. 将synchronized作用于static 函数，示例代码如下：\n\n```\nClass Foo \n{\n    public synchronized static void methodAAA()   // 同步的static 函数 \n    { \n        //…. \n    }\n    public void methodBBB() \n    {\n       synchronized(Foo.class)   // class literal(类名称字面常量)\n    } \n}\n```\n代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。\n记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。 \n可以推断：如果一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj\n在多线程中分别访问A和B两个方法时，不会构成同步，因为它们的锁都不一样。A方法的锁是Obj这个对象，而B的锁是Obj所属的那个Class。\n小结如下： \n搞清楚synchronized锁定的是哪个对象，就能帮助我们设计更安全的多线程程序。\n还有一些技巧可以让我们对共享资源的同步访问更加安全：\n1. 定义private 的instance变量+它的 get方法，而不要定义public/protected的instance变量。如果将变量定义为public，对象在外界可以绕过同步方法的控制而直接取得它，并改动它。这也是JavaBean的标准实现方式之一。\n2. 如果instance变量是一个对象，如数组或ArrayList什么的，那上述方法仍然不安全，因为当外界对象通过get方法拿到这个instance对象的引用后，又将其指向另一个对象，那么这个private变量也就变了，岂不是很危险。 这个时候就需要将get方法也加上synchronized同步，并且，只返回这个private对象的clone()――这样，调用端得到的就是对象副本的引用了\n\n作者：GangWang\n出处：http://www.cnblogs.com/GnagWang/ \n本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。 ","slug":"Java-synchronized","published":1,"updated":"2017-05-05T13:11:33.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o69000dpoc53oqroou1","content":"<p>记下来，很重要。<br>Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>\n<ol>\n<li>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</li>\n<li>然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</li>\n<li>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</li>\n<li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</li>\n<li>以上规则对其它对象锁同样适用.</li>\n</ol>\n<p>举例说明： </p>\n<pre><code>1. 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package ths;</div><div class=\"line\">public class Thread1 implements Runnable &#123;  </div><div class=\"line\">     public void run() &#123;  </div><div class=\"line\">          synchronized(this) &#123;  </div><div class=\"line\">               for (int i = 0; i &lt; 5; i++) &#123;  </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; synchronized loop &quot; + i);  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     public static void main(String[] args) &#123;  </div><div class=\"line\">          Thread1 t1 = new Thread1();  </div><div class=\"line\">          Thread ta = new Thread(t1, &quot;A&quot;);  </div><div class=\"line\">          Thread tb = new Thread(t1, &quot;B&quot;);  </div><div class=\"line\">          ta.start();  </div><div class=\"line\">          tb.start();  </div><div class=\"line\">     &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">A synchronized loop 0  </div><div class=\"line\">   A synchronized loop 1  </div><div class=\"line\">   A synchronized loop 2  </div><div class=\"line\">   A synchronized loop 3  </div><div class=\"line\">   A synchronized loop 4  </div><div class=\"line\">   B synchronized loop 0  </div><div class=\"line\">   B synchronized loop 1  </div><div class=\"line\">   B synchronized loop 2  </div><div class=\"line\">   B synchronized loop 3  </div><div class=\"line\">   B synchronized loop 4</div></pre></td></tr></table></figure></p>\n<pre><code>2. 然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">package ths;</div><div class=\"line\"></div><div class=\"line\">public class Thread2 &#123;  </div><div class=\"line\">     public void m4t1() &#123;  </div><div class=\"line\">          synchronized(this) &#123;  </div><div class=\"line\">               int i = 5;  </div><div class=\"line\">               while( i-- &gt; 0) &#123;  </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">                    try &#123;  </div><div class=\"line\">                         Thread.sleep(500);  </div><div class=\"line\">                    &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     public void m4t2() &#123;  </div><div class=\"line\">          int i = 5;  </div><div class=\"line\">          while( i-- &gt; 0) &#123;  </div><div class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">               try &#123;  </div><div class=\"line\">                    Thread.sleep(500);  </div><div class=\"line\">               &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     public static void main(String[] args) &#123;  </div><div class=\"line\">          final Thread2 myt2 = new Thread2();  </div><div class=\"line\">          Thread t1 = new Thread(  new Runnable() &#123;  public void run() &#123;  myt2.m4t1();  &#125;  &#125;, &quot;t1&quot;  );  </div><div class=\"line\">          Thread t2 = new Thread(  new Runnable() &#123;  public void run() &#123; myt2.m4t2();   &#125;  &#125;, &quot;t2&quot;  );  </div><div class=\"line\">          t1.start();  </div><div class=\"line\">          t2.start();  </div><div class=\"line\">     &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : 4  </div><div class=\"line\">   t2 : 4  </div><div class=\"line\">   t1 : 3  </div><div class=\"line\">   t2 : 3  </div><div class=\"line\">   t1 : 2  </div><div class=\"line\">   t2 : 2  </div><div class=\"line\">   t1 : 1  </div><div class=\"line\">   t2 : 1  </div><div class=\"line\">   t1 : 0  </div><div class=\"line\">   t2 : 0</div></pre></td></tr></table></figure></p>\n<pre><code>3. 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//修改Thread2.m4t2()方法：  </div><div class=\"line\">public void m4t2() &#123;  </div><div class=\"line\">      synchronized(this) &#123;  </div><div class=\"line\">           int i = 5;  </div><div class=\"line\">           while( i-- &gt; 0) &#123;  </div><div class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">                try &#123;  </div><div class=\"line\">                     Thread.sleep(500);  </div><div class=\"line\">                &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">           \t\t&#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : 4  </div><div class=\"line\">t1 : 3  </div><div class=\"line\">t1 : 2  </div><div class=\"line\">t1 : 1  </div><div class=\"line\">t1 : 0  </div><div class=\"line\">t2 : 4  </div><div class=\"line\">t2 : 3  </div><div class=\"line\">t2 : 2  </div><div class=\"line\">t2 : 1  </div><div class=\"line\">t2 : 0</div></pre></td></tr></table></figure></p>\n<pre><code>4. 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//修改Thread2.m4t2()方法如下：</div><div class=\"line\"></div><div class=\"line\"> public synchronized void m4t2() &#123;  </div><div class=\"line\">      int i = 5;  </div><div class=\"line\">      while( i-- &gt; 0) &#123;  </div><div class=\"line\">           System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">           try &#123;  </div><div class=\"line\">                Thread.sleep(500);  </div><div class=\"line\">           &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">           &#125;  </div><div class=\"line\">      &#125;  </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : 4  </div><div class=\"line\">t1 : 3  </div><div class=\"line\">t1 : 2  </div><div class=\"line\">t1 : 1  </div><div class=\"line\">t1 : 0  </div><div class=\"line\">t2 : 4  </div><div class=\"line\">t2 : 3  </div><div class=\"line\">t2 : 2  </div><div class=\"line\">t2 : 1  </div><div class=\"line\">t2 : 0</div></pre></td></tr></table></figure></p>\n<pre><code>5. 以上规则对其它对象锁同样适用:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">package ths;</div><div class=\"line\"></div><div class=\"line\">public class Thread3 &#123; </div><div class=\"line\">     class Inner &#123; </div><div class=\"line\">          private void m4t1() &#123; </div><div class=\"line\">               int i = 5; </div><div class=\"line\">               while(i-- &gt; 0) &#123; </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; : Inner.m4t1()=&quot; + i); </div><div class=\"line\">                    try &#123; </div><div class=\"line\">                         Thread.sleep(500); </div><div class=\"line\">                    &#125; catch(InterruptedException ie) &#123; </div><div class=\"line\">                    &#125; </div><div class=\"line\">               &#125; </div><div class=\"line\">          &#125; </div><div class=\"line\">          private void m4t2() &#123; </div><div class=\"line\">               int i = 5; </div><div class=\"line\">               while(i-- &gt; 0) &#123; </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; : Inner.m4t2()=&quot; + i); </div><div class=\"line\">                    try &#123; </div><div class=\"line\">                         Thread.sleep(500); </div><div class=\"line\">                    &#125; catch(InterruptedException ie) &#123; </div><div class=\"line\">                    &#125; </div><div class=\"line\">               &#125; </div><div class=\"line\">          &#125; </div><div class=\"line\">     &#125; </div><div class=\"line\">     private void m4t1(Inner inner) &#123; </div><div class=\"line\">          synchronized(inner) &#123; //使用对象锁 </div><div class=\"line\">          inner.m4t1(); </div><div class=\"line\">     &#125; </div><div class=\"line\">     private void m4t2(Inner inner) &#123; </div><div class=\"line\">          inner.m4t2(); </div><div class=\"line\">     &#125; </div><div class=\"line\">     public static void main(String[] args) &#123; </div><div class=\"line\">          final Thread3 myt3 = new Thread3(); </div><div class=\"line\">          final Inner inner = myt3.new Inner(); </div><div class=\"line\">          Thread t1 = new Thread( new Runnable() &#123;public void run() &#123; myt3.m4t1(inner);&#125; &#125;, &quot;t1&quot;); </div><div class=\"line\">     Thread t2 = new Thread( new Runnable() &#123;public void run() &#123; myt3.m4t2(inner);&#125; &#125;, &quot;t2&quot;); </div><div class=\"line\">     t1.start(); </div><div class=\"line\">     t2.start(); </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br>尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : Inner.m4t1()=4  </div><div class=\"line\">   t2 : Inner.m4t2()=4  </div><div class=\"line\">   t1 : Inner.m4t1()=3  </div><div class=\"line\">   t2 : Inner.m4t2()=3  </div><div class=\"line\">   t1 : Inner.m4t1()=2  </div><div class=\"line\">   t2 : Inner.m4t2()=2  </div><div class=\"line\">   t1 : Inner.m4t1()=1  </div><div class=\"line\">   t2 : Inner.m4t2()=1  </div><div class=\"line\">   t1 : Inner.m4t1()=0  </div><div class=\"line\">   t2 : Inner.m4t2()=0</div></pre></td></tr></table></figure></p>\n<p>现在在Inner.m4t2()前面加上synchronized：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private synchronized void m4t2() &#123;  </div><div class=\"line\">          int i = 5;  </div><div class=\"line\">          while(i-- &gt; 0) &#123;  </div><div class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; : Inner.m4t2()=&quot; + i);  </div><div class=\"line\">               try &#123;  </div><div class=\"line\">                    Thread.sleep(500);  </div><div class=\"line\">               &#125; catch(InterruptedException ie) &#123;  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure></p>\n<p>结果：<br>尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : Inner.m4t1()=4  </div><div class=\"line\">   t1 : Inner.m4t1()=3  </div><div class=\"line\">   t1 : Inner.m4t1()=2  </div><div class=\"line\">   t1 : Inner.m4t1()=1  </div><div class=\"line\">   t1 : Inner.m4t1()=0  </div><div class=\"line\">   t2 : Inner.m4t2()=4  </div><div class=\"line\">   t2 : Inner.m4t2()=3  </div><div class=\"line\">   t2 : Inner.m4t2()=2  </div><div class=\"line\">   t2 : Inner.m4t2()=1  </div><div class=\"line\">   t2 : Inner.m4t2()=0</div></pre></td></tr></table></figure></p>\n<p>synchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。 </p>\n<pre><code>1. synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如： \n</code></pre><p>public synchronized void accessVal(int newVal);<br>synchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）。<br>在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成员变量的访问。<br>synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供了更好的解决办法，那就是 synchronized 块。 </p>\n<pre><code>2. synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">synchronized(syncObject) &#123;  </div><div class=\"line\">//允许访问控制的代码  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>synchronized 块是这样一个代码块，其中的代码必须获得对象syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。<br>对synchronized(this)的一些理解<br>一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。<br>三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。<br>四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br>五、以上规则对其它对象锁同样适用 </p>\n<p>java中synchronized用法<br>打个比方：一个object就像一个大房子，大门永远打开。房子里有 很多房间（也就是方法）。<br>这些房间有上锁的（synchronized方法）， 和不上锁之分（普通方法）。房门口放着一把钥匙（key），这把钥匙可以打开所有上锁的房间。<br>另外我把所有想调用该对象方法的线程比喻成想进入这房子某个 房间的人。所有的东西就这么多了，下面我们看看这些东西之间如何作用的。<br>在此我们先来明确一下我们的前提条件。该对象至少有一synchronized方法，否则这个key还有啥意义。当然也就不会有我们的这个主题了。<br>一个人想进入某间上了锁的房间，他来到房子门口，看见钥匙在那儿（说明暂时还没有其他人要使用上锁的 房间）。于是他走上去拿到了钥匙，并且按照自己 的计划使用那些房间。注意一点，他每次使用完一次上锁的房间后会马上把钥匙还回去。即使他要连续使用两间上锁的房间，中间他也要把钥匙还回去，再取回来。因此，普通情况下钥匙的使用原则是：“随用随借，用完即还。”这时其他人可以不受限制的使用那些不上锁的房间，一个人用一间可以，两个人用一间也可以，没限制。但是如果当某个人想要进入上锁的房间，他就要跑到大门口去看看了。有钥匙当然拿了就走，没有的话，就只能等了。<br>要是很多人在等这把钥匙，等钥匙还回来以后，谁会优先得到钥匙？Not guaranteed。象前面例子里那个想连续使用两个上锁房间的家伙，他中间还钥匙的时候如果还有其他人在等钥匙，那么没有任何保证这家伙能再次拿到。 （JAVA规范在很多地方都明确说明不保证，象Thread.sleep()休息后多久会返回运行，相同优先权的线程那个首先被执行，当要访问对象的锁被 释放后处于等待池的多个线程哪个会优先得到，等等。我想最终的决定权是在JVM，之所以不保证，就是因为JVM在做出上述决定的时候，绝不是简简单单根据 一个条件来做出判断，而是根据很多条。而由于判断条件太多，如果说出来可能会影响JAVA的推广，也可能是因为知识产权保护的原因吧。SUN给了个不保证 就混过去了。无可厚非。但我相信这些不确定，并非完全不确定。因为计算机这东西本身就是按指令运行的。即使看起来很随机的现象，其实都是有规律可寻。学过 计算机的都知道，计算机里随机数的学名是伪随机数，是人运用一定的方法写出来的，看上去随机罢了。另外，或许是因为要想弄的确定太费事，也没多大意义，所 以不确定就不确定了吧。）<br>再来看看同步代码块。和同步方法有小小的不同。 </p>\n<ol>\n<li>从尺寸上讲，同步代码块比同步方法小。你可以把同步代码块看成是没上锁房间里的一块用带锁的屏风隔开的空间。 </li>\n<li>同步代码块还可以人为的指定获得某个其它对象的key。就像是指定用哪一把钥匙才能开这个屏风的锁，你可以用本房的钥匙；你也可以指定用另一个房子的钥匙才能开，这样的话，你要跑到另一栋房子那儿把那个钥匙拿来，并用那个房子的钥匙来打开这个房子的带锁的屏风。 </li>\n</ol>\n<p>记住你获得的那另一栋房子的钥匙，并不影响其他人进入那栋房子没有锁的房间。<br>为什么要使用同步代码块呢？我想应该是这样的：首先对程序来讲同步的部分很影响运行效率，而一个方法通常是先创建一些局部变量，再对这些变量做一些 操作，如运算，显示等等；而同步所覆盖的代码越多，对效率的影响就越严重。因此我们通常尽量缩小其影响范围。<br>如何做？同步代码块。我们只把一个方法中该同 步的地方同步，比如运算。<br>另外，同步代码块可以指定钥匙这一特点有个额外的好处，是可以在一定时期内霸占某个对象的key。还记得前面说过普通情况下钥匙的使用原则吗。现在不是普通情况了。你所取得的那把钥匙不是永远不还，而是在退出同步代码块时才还。<br>还用前面那个想连续用两个上锁房间的家伙打比方。怎样才能在用完一间以后，继续使用另一间呢。用同步代码块吧。先创建另外一个线程，做一个同步代码 块，把那个代码块的锁指向这个房子的钥匙。然后启动那个线程。只要你能在进入那个代码块时抓到这房子的钥匙，你就可以一直保留到退出那个代码块。也就是说 你甚至可以对本房内所有上锁的房间遍历，甚至再sleep(10<em>60</em>1000)，而房门口却还有1000个线程在等这把钥匙呢。很过瘾吧。<br>在此对sleep()方法和钥匙的关联性讲一下。一个线程在拿到key后，且没有完成同步的内容时，如果被强制sleep()了，那key还一直在 它那儿。直到它再次运行，做完所有同步内容，才会归还key。记住，那家伙只是干活干累了，去休息一下，他并没干完他要干的事。为了避免别人进入那个房间 把里面搞的一团糟，即使在睡觉的时候他也要把那唯一的钥匙戴在身上。<br>最后，也许有人会问，为什么要一把钥匙通开，而不是一个钥匙一个门呢？我想这纯粹是因为复杂性问题。一个钥匙一个门当然更安全，但是会牵扯好多问题。钥匙 的产生，保管，获得，归还等等。其复杂性有可能随同步方法的增加呈几何级数增加，严重影响效率。这也算是一个权衡的问题吧。为了增加一点点安全性，导致效 率大大降低，是多么不可取啊。<br>synchronized的一个简单例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TextThread &#123;</div><div class=\"line\"></div><div class=\"line\">public static void main(String[] args) &#123; </div><div class=\"line\">   TxtThread tt = new TxtThread(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TxtThread implements Runnable &#123; </div><div class=\"line\">int num = 100; </div><div class=\"line\">String str = new String();</div><div class=\"line\"></div><div class=\"line\">public void run() &#123; </div><div class=\"line\">   synchronized (str) &#123; </div><div class=\"line\">    while (num &gt; 0) &#123;</div><div class=\"line\"></div><div class=\"line\">     try &#123; </div><div class=\"line\">      Thread.sleep(1); </div><div class=\"line\">     &#125; catch (Exception e) &#123; </div><div class=\"line\">      e.getMessage(); </div><div class=\"line\">     &#125; </div><div class=\"line\">     System.out.println(Thread.currentThread().getName() </div><div class=\"line\">       + &quot;this is &quot; + num--); </div><div class=\"line\">    &#125; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的例子中为了制造一个时间差,也就是出错的机会,使用了Thread.sleep(10)、Java对多线程的支持与同步机制深受大家的喜爱，似乎看起来使用了synchronized关键字就可以轻松地解决多线程共享数据同步问题。到底如何？――还得对synchronized关键字的作用进行深入了解才可定论。<br>总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。<br>在进一步阐述之前，我们需要明确几点：</p>\n<ul>\n<li>A．无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。</li>\n<li>B．每个对象只有一个锁（lock）与之相关联。</li>\n<li>C．实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</li>\n</ul>\n<p>接着来讨论synchronized用到不同地方对代码产生的影响：<br>假设P1、P2是同一个类的不同对象，这个类中定义了以下几种情况的同步块或同步方法，P1、P2就都可以调用它们。</p>\n<pre><code>1. 把synchronized当作函数修饰符时，示例代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Public synchronized void methodAAA()</div><div class=\"line\">&#123;</div><div class=\"line\">//….</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这也就是同步方法，那这时synchronized锁定的是哪个对象呢？它锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，它们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却可以任意调用这个被加了synchronized关键字的方法。<br>上边的示例代码等同于如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void methodAAA()</div><div class=\"line\">&#123;</div><div class=\"line\">\tsynchronized (this)      // (1)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t     //…..</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(1)处的this指的是什么呢？它指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。――那个拿到了P1对象锁的线程，才可以调用P1的同步方法，而对P2而言，P1这个锁与它毫不相干，程序也可能在这种情形下摆脱同步机制的控制，造成数据混乱：</p>\n<pre><code>2. 同步块，示例代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void method3(SomeObject so)</div><div class=\"line\">&#123;</div><div class=\"line\">    synchronized(so)</div><div class=\"line\">    &#123; </div><div class=\"line\">       //….. </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时，锁就是so这个对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Foo implements Runnable</div><div class=\"line\">&#123;</div><div class=\"line\">        private byte[] lock = new byte[0]; // 特殊的instance变量</div><div class=\"line\">        Public void methodA() </div><div class=\"line\">        &#123;</div><div class=\"line\">           synchronized(lock) &#123; //… &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //…..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock= new Object()则需要7行操作码。</p>\n<pre><code>3. 将synchronized作用于static 函数，示例代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class Foo </div><div class=\"line\">&#123;</div><div class=\"line\">    public synchronized static void methodAAA()   // 同步的static 函数 </div><div class=\"line\">    &#123; </div><div class=\"line\">        //…. </div><div class=\"line\">    &#125;</div><div class=\"line\">    public void methodBBB() </div><div class=\"line\">    &#123;</div><div class=\"line\">       synchronized(Foo.class)   // class literal(类名称字面常量)</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。<br>记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。<br>可以推断：如果一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj<br>在多线程中分别访问A和B两个方法时，不会构成同步，因为它们的锁都不一样。A方法的锁是Obj这个对象，而B的锁是Obj所属的那个Class。<br>小结如下：<br>搞清楚synchronized锁定的是哪个对象，就能帮助我们设计更安全的多线程程序。<br>还有一些技巧可以让我们对共享资源的同步访问更加安全：</p>\n<ol>\n<li>定义private 的instance变量+它的 get方法，而不要定义public/protected的instance变量。如果将变量定义为public，对象在外界可以绕过同步方法的控制而直接取得它，并改动它。这也是JavaBean的标准实现方式之一。</li>\n<li>如果instance变量是一个对象，如数组或ArrayList什么的，那上述方法仍然不安全，因为当外界对象通过get方法拿到这个instance对象的引用后，又将其指向另一个对象，那么这个private变量也就变了，岂不是很危险。 这个时候就需要将get方法也加上synchronized同步，并且，只返回这个private对象的clone()――这样，调用端得到的就是对象副本的引用了</li>\n</ol>\n<p>作者：GangWang<br>出处：<a href=\"http://www.cnblogs.com/GnagWang/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/GnagWang/</a><br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>记下来，很重要。<br>Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>\n<ol>\n<li>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</li>\n<li>然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</li>\n<li>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</li>\n<li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</li>\n<li>以上规则对其它对象锁同样适用.</li>\n</ol>\n<p>举例说明： </p>\n<pre><code>1. 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package ths;</div><div class=\"line\">public class Thread1 implements Runnable &#123;  </div><div class=\"line\">     public void run() &#123;  </div><div class=\"line\">          synchronized(this) &#123;  </div><div class=\"line\">               for (int i = 0; i &lt; 5; i++) &#123;  </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; synchronized loop &quot; + i);  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     public static void main(String[] args) &#123;  </div><div class=\"line\">          Thread1 t1 = new Thread1();  </div><div class=\"line\">          Thread ta = new Thread(t1, &quot;A&quot;);  </div><div class=\"line\">          Thread tb = new Thread(t1, &quot;B&quot;);  </div><div class=\"line\">          ta.start();  </div><div class=\"line\">          tb.start();  </div><div class=\"line\">     &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">A synchronized loop 0  </div><div class=\"line\">   A synchronized loop 1  </div><div class=\"line\">   A synchronized loop 2  </div><div class=\"line\">   A synchronized loop 3  </div><div class=\"line\">   A synchronized loop 4  </div><div class=\"line\">   B synchronized loop 0  </div><div class=\"line\">   B synchronized loop 1  </div><div class=\"line\">   B synchronized loop 2  </div><div class=\"line\">   B synchronized loop 3  </div><div class=\"line\">   B synchronized loop 4</div></pre></td></tr></table></figure></p>\n<pre><code>2. 然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">package ths;</div><div class=\"line\"></div><div class=\"line\">public class Thread2 &#123;  </div><div class=\"line\">     public void m4t1() &#123;  </div><div class=\"line\">          synchronized(this) &#123;  </div><div class=\"line\">               int i = 5;  </div><div class=\"line\">               while( i-- &gt; 0) &#123;  </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">                    try &#123;  </div><div class=\"line\">                         Thread.sleep(500);  </div><div class=\"line\">                    &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     public void m4t2() &#123;  </div><div class=\"line\">          int i = 5;  </div><div class=\"line\">          while( i-- &gt; 0) &#123;  </div><div class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">               try &#123;  </div><div class=\"line\">                    Thread.sleep(500);  </div><div class=\"line\">               &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;  </div><div class=\"line\">     public static void main(String[] args) &#123;  </div><div class=\"line\">          final Thread2 myt2 = new Thread2();  </div><div class=\"line\">          Thread t1 = new Thread(  new Runnable() &#123;  public void run() &#123;  myt2.m4t1();  &#125;  &#125;, &quot;t1&quot;  );  </div><div class=\"line\">          Thread t2 = new Thread(  new Runnable() &#123;  public void run() &#123; myt2.m4t2();   &#125;  &#125;, &quot;t2&quot;  );  </div><div class=\"line\">          t1.start();  </div><div class=\"line\">          t2.start();  </div><div class=\"line\">     &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : 4  </div><div class=\"line\">   t2 : 4  </div><div class=\"line\">   t1 : 3  </div><div class=\"line\">   t2 : 3  </div><div class=\"line\">   t1 : 2  </div><div class=\"line\">   t2 : 2  </div><div class=\"line\">   t1 : 1  </div><div class=\"line\">   t2 : 1  </div><div class=\"line\">   t1 : 0  </div><div class=\"line\">   t2 : 0</div></pre></td></tr></table></figure></p>\n<pre><code>3. 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//修改Thread2.m4t2()方法：  </div><div class=\"line\">public void m4t2() &#123;  </div><div class=\"line\">      synchronized(this) &#123;  </div><div class=\"line\">           int i = 5;  </div><div class=\"line\">           while( i-- &gt; 0) &#123;  </div><div class=\"line\">                System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">                try &#123;  </div><div class=\"line\">                     Thread.sleep(500);  </div><div class=\"line\">                &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">           \t\t&#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : 4  </div><div class=\"line\">t1 : 3  </div><div class=\"line\">t1 : 2  </div><div class=\"line\">t1 : 1  </div><div class=\"line\">t1 : 0  </div><div class=\"line\">t2 : 4  </div><div class=\"line\">t2 : 3  </div><div class=\"line\">t2 : 2  </div><div class=\"line\">t2 : 1  </div><div class=\"line\">t2 : 0</div></pre></td></tr></table></figure></p>\n<pre><code>4. 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//修改Thread2.m4t2()方法如下：</div><div class=\"line\"></div><div class=\"line\"> public synchronized void m4t2() &#123;  </div><div class=\"line\">      int i = 5;  </div><div class=\"line\">      while( i-- &gt; 0) &#123;  </div><div class=\"line\">           System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i);  </div><div class=\"line\">           try &#123;  </div><div class=\"line\">                Thread.sleep(500);  </div><div class=\"line\">           &#125; catch (InterruptedException ie) &#123;  </div><div class=\"line\">           &#125;  </div><div class=\"line\">      &#125;  </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : 4  </div><div class=\"line\">t1 : 3  </div><div class=\"line\">t1 : 2  </div><div class=\"line\">t1 : 1  </div><div class=\"line\">t1 : 0  </div><div class=\"line\">t2 : 4  </div><div class=\"line\">t2 : 3  </div><div class=\"line\">t2 : 2  </div><div class=\"line\">t2 : 1  </div><div class=\"line\">t2 : 0</div></pre></td></tr></table></figure></p>\n<pre><code>5. 以上规则对其它对象锁同样适用:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">package ths;</div><div class=\"line\"></div><div class=\"line\">public class Thread3 &#123; </div><div class=\"line\">     class Inner &#123; </div><div class=\"line\">          private void m4t1() &#123; </div><div class=\"line\">               int i = 5; </div><div class=\"line\">               while(i-- &gt; 0) &#123; </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; : Inner.m4t1()=&quot; + i); </div><div class=\"line\">                    try &#123; </div><div class=\"line\">                         Thread.sleep(500); </div><div class=\"line\">                    &#125; catch(InterruptedException ie) &#123; </div><div class=\"line\">                    &#125; </div><div class=\"line\">               &#125; </div><div class=\"line\">          &#125; </div><div class=\"line\">          private void m4t2() &#123; </div><div class=\"line\">               int i = 5; </div><div class=\"line\">               while(i-- &gt; 0) &#123; </div><div class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot; : Inner.m4t2()=&quot; + i); </div><div class=\"line\">                    try &#123; </div><div class=\"line\">                         Thread.sleep(500); </div><div class=\"line\">                    &#125; catch(InterruptedException ie) &#123; </div><div class=\"line\">                    &#125; </div><div class=\"line\">               &#125; </div><div class=\"line\">          &#125; </div><div class=\"line\">     &#125; </div><div class=\"line\">     private void m4t1(Inner inner) &#123; </div><div class=\"line\">          synchronized(inner) &#123; //使用对象锁 </div><div class=\"line\">          inner.m4t1(); </div><div class=\"line\">     &#125; </div><div class=\"line\">     private void m4t2(Inner inner) &#123; </div><div class=\"line\">          inner.m4t2(); </div><div class=\"line\">     &#125; </div><div class=\"line\">     public static void main(String[] args) &#123; </div><div class=\"line\">          final Thread3 myt3 = new Thread3(); </div><div class=\"line\">          final Inner inner = myt3.new Inner(); </div><div class=\"line\">          Thread t1 = new Thread( new Runnable() &#123;public void run() &#123; myt3.m4t1(inner);&#125; &#125;, &quot;t1&quot;); </div><div class=\"line\">     Thread t2 = new Thread( new Runnable() &#123;public void run() &#123; myt3.m4t2(inner);&#125; &#125;, &quot;t2&quot;); </div><div class=\"line\">     t1.start(); </div><div class=\"line\">     t2.start(); </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br>尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : Inner.m4t1()=4  </div><div class=\"line\">   t2 : Inner.m4t2()=4  </div><div class=\"line\">   t1 : Inner.m4t1()=3  </div><div class=\"line\">   t2 : Inner.m4t2()=3  </div><div class=\"line\">   t1 : Inner.m4t1()=2  </div><div class=\"line\">   t2 : Inner.m4t2()=2  </div><div class=\"line\">   t1 : Inner.m4t1()=1  </div><div class=\"line\">   t2 : Inner.m4t2()=1  </div><div class=\"line\">   t1 : Inner.m4t1()=0  </div><div class=\"line\">   t2 : Inner.m4t2()=0</div></pre></td></tr></table></figure></p>\n<p>现在在Inner.m4t2()前面加上synchronized：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private synchronized void m4t2() &#123;  </div><div class=\"line\">          int i = 5;  </div><div class=\"line\">          while(i-- &gt; 0) &#123;  </div><div class=\"line\">               System.out.println(Thread.currentThread().getName() + &quot; : Inner.m4t2()=&quot; + i);  </div><div class=\"line\">               try &#123;  </div><div class=\"line\">                    Thread.sleep(500);  </div><div class=\"line\">               &#125; catch(InterruptedException ie) &#123;  </div><div class=\"line\">               &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure></p>\n<p>结果：<br>尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 : Inner.m4t1()=4  </div><div class=\"line\">   t1 : Inner.m4t1()=3  </div><div class=\"line\">   t1 : Inner.m4t1()=2  </div><div class=\"line\">   t1 : Inner.m4t1()=1  </div><div class=\"line\">   t1 : Inner.m4t1()=0  </div><div class=\"line\">   t2 : Inner.m4t2()=4  </div><div class=\"line\">   t2 : Inner.m4t2()=3  </div><div class=\"line\">   t2 : Inner.m4t2()=2  </div><div class=\"line\">   t2 : Inner.m4t2()=1  </div><div class=\"line\">   t2 : Inner.m4t2()=0</div></pre></td></tr></table></figure></p>\n<p>synchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。 </p>\n<pre><code>1. synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如： \n</code></pre><p>public synchronized void accessVal(int newVal);<br>synchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）。<br>在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成员变量的访问。<br>synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供了更好的解决办法，那就是 synchronized 块。 </p>\n<pre><code>2. synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">synchronized(syncObject) &#123;  </div><div class=\"line\">//允许访问控制的代码  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>synchronized 块是这样一个代码块，其中的代码必须获得对象syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。<br>对synchronized(this)的一些理解<br>一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。<br>三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。<br>四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br>五、以上规则对其它对象锁同样适用 </p>\n<p>java中synchronized用法<br>打个比方：一个object就像一个大房子，大门永远打开。房子里有 很多房间（也就是方法）。<br>这些房间有上锁的（synchronized方法）， 和不上锁之分（普通方法）。房门口放着一把钥匙（key），这把钥匙可以打开所有上锁的房间。<br>另外我把所有想调用该对象方法的线程比喻成想进入这房子某个 房间的人。所有的东西就这么多了，下面我们看看这些东西之间如何作用的。<br>在此我们先来明确一下我们的前提条件。该对象至少有一synchronized方法，否则这个key还有啥意义。当然也就不会有我们的这个主题了。<br>一个人想进入某间上了锁的房间，他来到房子门口，看见钥匙在那儿（说明暂时还没有其他人要使用上锁的 房间）。于是他走上去拿到了钥匙，并且按照自己 的计划使用那些房间。注意一点，他每次使用完一次上锁的房间后会马上把钥匙还回去。即使他要连续使用两间上锁的房间，中间他也要把钥匙还回去，再取回来。因此，普通情况下钥匙的使用原则是：“随用随借，用完即还。”这时其他人可以不受限制的使用那些不上锁的房间，一个人用一间可以，两个人用一间也可以，没限制。但是如果当某个人想要进入上锁的房间，他就要跑到大门口去看看了。有钥匙当然拿了就走，没有的话，就只能等了。<br>要是很多人在等这把钥匙，等钥匙还回来以后，谁会优先得到钥匙？Not guaranteed。象前面例子里那个想连续使用两个上锁房间的家伙，他中间还钥匙的时候如果还有其他人在等钥匙，那么没有任何保证这家伙能再次拿到。 （JAVA规范在很多地方都明确说明不保证，象Thread.sleep()休息后多久会返回运行，相同优先权的线程那个首先被执行，当要访问对象的锁被 释放后处于等待池的多个线程哪个会优先得到，等等。我想最终的决定权是在JVM，之所以不保证，就是因为JVM在做出上述决定的时候，绝不是简简单单根据 一个条件来做出判断，而是根据很多条。而由于判断条件太多，如果说出来可能会影响JAVA的推广，也可能是因为知识产权保护的原因吧。SUN给了个不保证 就混过去了。无可厚非。但我相信这些不确定，并非完全不确定。因为计算机这东西本身就是按指令运行的。即使看起来很随机的现象，其实都是有规律可寻。学过 计算机的都知道，计算机里随机数的学名是伪随机数，是人运用一定的方法写出来的，看上去随机罢了。另外，或许是因为要想弄的确定太费事，也没多大意义，所 以不确定就不确定了吧。）<br>再来看看同步代码块。和同步方法有小小的不同。 </p>\n<ol>\n<li>从尺寸上讲，同步代码块比同步方法小。你可以把同步代码块看成是没上锁房间里的一块用带锁的屏风隔开的空间。 </li>\n<li>同步代码块还可以人为的指定获得某个其它对象的key。就像是指定用哪一把钥匙才能开这个屏风的锁，你可以用本房的钥匙；你也可以指定用另一个房子的钥匙才能开，这样的话，你要跑到另一栋房子那儿把那个钥匙拿来，并用那个房子的钥匙来打开这个房子的带锁的屏风。 </li>\n</ol>\n<p>记住你获得的那另一栋房子的钥匙，并不影响其他人进入那栋房子没有锁的房间。<br>为什么要使用同步代码块呢？我想应该是这样的：首先对程序来讲同步的部分很影响运行效率，而一个方法通常是先创建一些局部变量，再对这些变量做一些 操作，如运算，显示等等；而同步所覆盖的代码越多，对效率的影响就越严重。因此我们通常尽量缩小其影响范围。<br>如何做？同步代码块。我们只把一个方法中该同 步的地方同步，比如运算。<br>另外，同步代码块可以指定钥匙这一特点有个额外的好处，是可以在一定时期内霸占某个对象的key。还记得前面说过普通情况下钥匙的使用原则吗。现在不是普通情况了。你所取得的那把钥匙不是永远不还，而是在退出同步代码块时才还。<br>还用前面那个想连续用两个上锁房间的家伙打比方。怎样才能在用完一间以后，继续使用另一间呢。用同步代码块吧。先创建另外一个线程，做一个同步代码 块，把那个代码块的锁指向这个房子的钥匙。然后启动那个线程。只要你能在进入那个代码块时抓到这房子的钥匙，你就可以一直保留到退出那个代码块。也就是说 你甚至可以对本房内所有上锁的房间遍历，甚至再sleep(10<em>60</em>1000)，而房门口却还有1000个线程在等这把钥匙呢。很过瘾吧。<br>在此对sleep()方法和钥匙的关联性讲一下。一个线程在拿到key后，且没有完成同步的内容时，如果被强制sleep()了，那key还一直在 它那儿。直到它再次运行，做完所有同步内容，才会归还key。记住，那家伙只是干活干累了，去休息一下，他并没干完他要干的事。为了避免别人进入那个房间 把里面搞的一团糟，即使在睡觉的时候他也要把那唯一的钥匙戴在身上。<br>最后，也许有人会问，为什么要一把钥匙通开，而不是一个钥匙一个门呢？我想这纯粹是因为复杂性问题。一个钥匙一个门当然更安全，但是会牵扯好多问题。钥匙 的产生，保管，获得，归还等等。其复杂性有可能随同步方法的增加呈几何级数增加，严重影响效率。这也算是一个权衡的问题吧。为了增加一点点安全性，导致效 率大大降低，是多么不可取啊。<br>synchronized的一个简单例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TextThread &#123;</div><div class=\"line\"></div><div class=\"line\">public static void main(String[] args) &#123; </div><div class=\"line\">   TxtThread tt = new TxtThread(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">   new Thread(tt).start(); </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TxtThread implements Runnable &#123; </div><div class=\"line\">int num = 100; </div><div class=\"line\">String str = new String();</div><div class=\"line\"></div><div class=\"line\">public void run() &#123; </div><div class=\"line\">   synchronized (str) &#123; </div><div class=\"line\">    while (num &gt; 0) &#123;</div><div class=\"line\"></div><div class=\"line\">     try &#123; </div><div class=\"line\">      Thread.sleep(1); </div><div class=\"line\">     &#125; catch (Exception e) &#123; </div><div class=\"line\">      e.getMessage(); </div><div class=\"line\">     &#125; </div><div class=\"line\">     System.out.println(Thread.currentThread().getName() </div><div class=\"line\">       + &quot;this is &quot; + num--); </div><div class=\"line\">    &#125; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的例子中为了制造一个时间差,也就是出错的机会,使用了Thread.sleep(10)、Java对多线程的支持与同步机制深受大家的喜爱，似乎看起来使用了synchronized关键字就可以轻松地解决多线程共享数据同步问题。到底如何？――还得对synchronized关键字的作用进行深入了解才可定论。<br>总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。<br>在进一步阐述之前，我们需要明确几点：</p>\n<ul>\n<li>A．无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。</li>\n<li>B．每个对象只有一个锁（lock）与之相关联。</li>\n<li>C．实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</li>\n</ul>\n<p>接着来讨论synchronized用到不同地方对代码产生的影响：<br>假设P1、P2是同一个类的不同对象，这个类中定义了以下几种情况的同步块或同步方法，P1、P2就都可以调用它们。</p>\n<pre><code>1. 把synchronized当作函数修饰符时，示例代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Public synchronized void methodAAA()</div><div class=\"line\">&#123;</div><div class=\"line\">//….</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这也就是同步方法，那这时synchronized锁定的是哪个对象呢？它锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，它们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却可以任意调用这个被加了synchronized关键字的方法。<br>上边的示例代码等同于如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void methodAAA()</div><div class=\"line\">&#123;</div><div class=\"line\">\tsynchronized (this)      // (1)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t     //…..</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(1)处的this指的是什么呢？它指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。――那个拿到了P1对象锁的线程，才可以调用P1的同步方法，而对P2而言，P1这个锁与它毫不相干，程序也可能在这种情形下摆脱同步机制的控制，造成数据混乱：</p>\n<pre><code>2. 同步块，示例代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void method3(SomeObject so)</div><div class=\"line\">&#123;</div><div class=\"line\">    synchronized(so)</div><div class=\"line\">    &#123; </div><div class=\"line\">       //….. </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时，锁就是so这个对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Foo implements Runnable</div><div class=\"line\">&#123;</div><div class=\"line\">        private byte[] lock = new byte[0]; // 特殊的instance变量</div><div class=\"line\">        Public void methodA() </div><div class=\"line\">        &#123;</div><div class=\"line\">           synchronized(lock) &#123; //… &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //…..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock= new Object()则需要7行操作码。</p>\n<pre><code>3. 将synchronized作用于static 函数，示例代码如下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class Foo </div><div class=\"line\">&#123;</div><div class=\"line\">    public synchronized static void methodAAA()   // 同步的static 函数 </div><div class=\"line\">    &#123; </div><div class=\"line\">        //…. </div><div class=\"line\">    &#125;</div><div class=\"line\">    public void methodBBB() </div><div class=\"line\">    &#123;</div><div class=\"line\">       synchronized(Foo.class)   // class literal(类名称字面常量)</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。<br>记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。<br>可以推断：如果一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj<br>在多线程中分别访问A和B两个方法时，不会构成同步，因为它们的锁都不一样。A方法的锁是Obj这个对象，而B的锁是Obj所属的那个Class。<br>小结如下：<br>搞清楚synchronized锁定的是哪个对象，就能帮助我们设计更安全的多线程程序。<br>还有一些技巧可以让我们对共享资源的同步访问更加安全：</p>\n<ol>\n<li>定义private 的instance变量+它的 get方法，而不要定义public/protected的instance变量。如果将变量定义为public，对象在外界可以绕过同步方法的控制而直接取得它，并改动它。这也是JavaBean的标准实现方式之一。</li>\n<li>如果instance变量是一个对象，如数组或ArrayList什么的，那上述方法仍然不安全，因为当外界对象通过get方法拿到这个instance对象的引用后，又将其指向另一个对象，那么这个private变量也就变了，岂不是很危险。 这个时候就需要将get方法也加上synchronized同步，并且，只返回这个private对象的clone()――这样，调用端得到的就是对象副本的引用了</li>\n</ol>\n<p>作者：GangWang<br>出处：<a href=\"http://www.cnblogs.com/GnagWang/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/GnagWang/</a><br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。 </p>\n"},{"title":"WPF DevExpress ChartControl使用之PieChart","date":"2017-02-10T16:51:28.000Z","description":"WPF中使用DevExpress ChartControl控件绘制Pie饼状图。","_content":"饼状图要比XYDiagram要简单一点，大体上也是那些东西，没有了X、Y坐标轴，也就没有了第二坐标，要简单一点。\n![WPF饼状图](http://i4.buimg.com/567571/cdf282babe7f9ea8.png)\nPieChartControl.xaml\n```\n<UserControl x:Class=\"WpfControl.PieChartControl\"\n         xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n         xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n         xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n         xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n         xmlns:dxc=\"http://schemas.devexpress.com/winfx/2008/xaml/charts\"\n         mc:Ignorable=\"d\">\n    <Grid>\n        <dxc:ChartControl x:Name=\"chart\"\n                          MouseDown=\"chart_MouseDown\"\n                          MouseMove=\"chart_MouseMove\"\n                          MouseUp=\"chart_MouseUp\">\n            <dxc:ChartControl.Titles>\n                <dxc:Title x:Name=\"title\" Content=\"Title\" Dock=\"Top\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Top\"/>\n            </dxc:ChartControl.Titles>\n            <dxc:SimpleDiagram2D x:Name=\"diagram2D\">\n            </dxc:SimpleDiagram2D>\n            <dxc:ChartControl.Legend>\n                <dxc:Legend HorizontalPosition=\"Right\"/>\n            </dxc:ChartControl.Legend>\n        </dxc:ChartControl>\n    </Grid>\n</UserControl>\n```\n\nPieChartControl.cs\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing DevExpress.Xpf.Charts;\nusing Dugufeixue.Common;\nnamespace WpfControl\n{\n    /// <summary>\n    /// PieChartControl.xaml 的交互逻辑\n    /// </summary>\n    public partial class PieChartControl : UserControl\n    {\n        const int clickDelta = 200;\n        DateTime mouseDownTime;\n        bool rotate;\n        Point startPosition;\n        public PieChartControl(DataEntity de, bool isUseColor)\n        {\n            InitializeComponent();\n            LoadPieChart(de, isUseColor);\n        }\n        public void LoadPieChart(DataEntity de, bool isUseColor)\n        {\n            Series series= new PieSeries2D();\n            //设置饼状图Label样式\n            SeriesLabel label = new SeriesLabel();\n            label.Indent = 15;\n            label.TextPattern = \"{A}: {VP:P2}\";\n            series.Label = label;\n            foreach (KeyValuePair<string, double> kvp in de.Dic)\n            {\n                //这里和XYDiagram不一样，饼状图只能用SeriesPoint添加点来创建Series，没找到其他的好方法\n                SeriesPoint point = new SeriesPoint(kvp.Key, kvp.Value);\n                if (isUseColor)\n                {\n                    SolidColorBrush brush;\n                    if (kvp.Key.Contains(\"运行\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"启动\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"正常\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"停止\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"启炉\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"停炉\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"开\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"关\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"故障\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"需监管\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));\n                    }\n                    else if (kvp.Key.Contains(\"反馈\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));\n                    }\n                    else if (kvp.Key.Contains(\"高料位报警\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xC0, 0xCB));\n                    }\n                    else if (kvp.Key.Contains(\"无状态\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));\n                    }\n                    else if (kvp.Key.Contains(\"无\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));\n                    }\n                    else\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));\n                    }\n                    //设置每一个扇形的不同颜色\n                    point.Brush = brush;\n                }\n                series.Points.Add(point);\n            }\n            series.LabelsVisibility = true;\n            PieSeries2D.SetLabelPosition(series.Label,PieLabelPosition.Outside);\n            //设置Legend的格式\n            series.LegendTextPattern = \"{A}: {VP:P2}\";\n            diagram2D.Series.Add(series);\n            title.Content = de.Ytitle;\n        }\n        //设置饼状图的动画效果\n        bool IsClick(DateTime mouseUpTime)\n        {\n            return (mouseUpTime - mouseDownTime).TotalMilliseconds < clickDelta;\n        }\n        double CalcAngle(Point p1, Point p2)\n        {\n            Point center = new Point(chart.Diagram.ActualWidth / 2, chart.ActualHeight / 2);\n            Point relativeP1 = new Point(p1.X - center.X, p1.Y - center.Y);\n            Point relativeP2 = new Point(p2.X - center.X, p2.Y - center.Y);\n            double angleP1Radian = Math.Atan2(relativeP1.X, relativeP1.Y);\n            double angleP2Radian = Math.Atan2(relativeP2.X, relativeP2.Y);\n            double angle = (angleP2Radian - angleP1Radian) * 180 / (Math.PI * 2);\n            if (angle > 90)\n                angle = 180 - angle;\n            else if (angle < -90)\n                angle = 180 + angle;\n            return angle;\n        }\n        void chart_MouseUp(object sender, MouseButtonEventArgs e)\n        {\n            ChartHitInfo hitInfo = chart.CalcHitInfo(e.GetPosition(chart));\n            rotate = false;\n            if (hitInfo == null || hitInfo.SeriesPoint == null || !IsClick(DateTime.Now))\n                return;\n            double distance = PieSeries.GetExplodedDistance(hitInfo.SeriesPoint);\n            Storyboard storyBoard = new Storyboard();\n            DoubleAnimation animation = new DoubleAnimation();\n            animation.Duration = new Duration(new TimeSpan(0, 0, 0, 0, 300));\n            animation.To = distance > 0 ? 0 : 0.3;\n            storyBoard.Children.Add(animation);\n            Storyboard.SetTarget(animation, hitInfo.SeriesPoint);\n            Storyboard.SetTargetProperty(animation, new PropertyPath(PieSeries.ExplodedDistanceProperty));\n            storyBoard.Begin();\n        }\n        void chart_MouseDown(object sender, MouseButtonEventArgs e)\n        {\n            mouseDownTime = DateTime.Now;\n            Point position = e.GetPosition(chart);\n            ChartHitInfo hitInfo = chart.CalcHitInfo(position);\n            if (hitInfo != null && hitInfo.SeriesPoint != null)\n            {\n                rotate = true;\n                startPosition = position;\n            }\n        }\n        void chart_MouseMove(object sender, MouseEventArgs e)\n        {\n            Point position = e.GetPosition(chart);\n            ChartHitInfo hitInfo = chart.CalcHitInfo(position);\n            if (hitInfo == null)\n                return;\n            if (rotate && !IsClick(DateTime.Now))\n            {\n                PieSeries2D series = chart.Diagram.Series[0] as PieSeries2D;\n                double angleDelta = CalcAngle(startPosition, position);\n                startPosition = position;\n            }\n        }\n    }\n}\n```","source":"_posts/WPF-DevExpress-Pie.md","raw":"---\ntitle: WPF DevExpress ChartControl使用之PieChart\ndate: 2017-02-11 00:51:28\ncategories: DevExpress\ntags: \n\t- DevExpress Chart\n\t- WPF\ndescription: WPF中使用DevExpress ChartControl控件绘制Pie饼状图。\n---\n饼状图要比XYDiagram要简单一点，大体上也是那些东西，没有了X、Y坐标轴，也就没有了第二坐标，要简单一点。\n![WPF饼状图](http://i4.buimg.com/567571/cdf282babe7f9ea8.png)\nPieChartControl.xaml\n```\n<UserControl x:Class=\"WpfControl.PieChartControl\"\n         xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n         xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n         xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n         xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n         xmlns:dxc=\"http://schemas.devexpress.com/winfx/2008/xaml/charts\"\n         mc:Ignorable=\"d\">\n    <Grid>\n        <dxc:ChartControl x:Name=\"chart\"\n                          MouseDown=\"chart_MouseDown\"\n                          MouseMove=\"chart_MouseMove\"\n                          MouseUp=\"chart_MouseUp\">\n            <dxc:ChartControl.Titles>\n                <dxc:Title x:Name=\"title\" Content=\"Title\" Dock=\"Top\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Top\"/>\n            </dxc:ChartControl.Titles>\n            <dxc:SimpleDiagram2D x:Name=\"diagram2D\">\n            </dxc:SimpleDiagram2D>\n            <dxc:ChartControl.Legend>\n                <dxc:Legend HorizontalPosition=\"Right\"/>\n            </dxc:ChartControl.Legend>\n        </dxc:ChartControl>\n    </Grid>\n</UserControl>\n```\n\nPieChartControl.cs\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing DevExpress.Xpf.Charts;\nusing Dugufeixue.Common;\nnamespace WpfControl\n{\n    /// <summary>\n    /// PieChartControl.xaml 的交互逻辑\n    /// </summary>\n    public partial class PieChartControl : UserControl\n    {\n        const int clickDelta = 200;\n        DateTime mouseDownTime;\n        bool rotate;\n        Point startPosition;\n        public PieChartControl(DataEntity de, bool isUseColor)\n        {\n            InitializeComponent();\n            LoadPieChart(de, isUseColor);\n        }\n        public void LoadPieChart(DataEntity de, bool isUseColor)\n        {\n            Series series= new PieSeries2D();\n            //设置饼状图Label样式\n            SeriesLabel label = new SeriesLabel();\n            label.Indent = 15;\n            label.TextPattern = \"{A}: {VP:P2}\";\n            series.Label = label;\n            foreach (KeyValuePair<string, double> kvp in de.Dic)\n            {\n                //这里和XYDiagram不一样，饼状图只能用SeriesPoint添加点来创建Series，没找到其他的好方法\n                SeriesPoint point = new SeriesPoint(kvp.Key, kvp.Value);\n                if (isUseColor)\n                {\n                    SolidColorBrush brush;\n                    if (kvp.Key.Contains(\"运行\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"启动\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"正常\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"停止\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"启炉\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"停炉\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"开\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"关\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"故障\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xFF, 0x00));\n                    }\n                    else if (kvp.Key.Contains(\"需监管\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));\n                    }\n                    else if (kvp.Key.Contains(\"反馈\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));\n                    }\n                    else if (kvp.Key.Contains(\"高料位报警\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xC0, 0xCB));\n                    }\n                    else if (kvp.Key.Contains(\"无状态\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));\n                    }\n                    else if (kvp.Key.Contains(\"无\"))\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));\n                    }\n                    else\n                    {\n                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));\n                    }\n                    //设置每一个扇形的不同颜色\n                    point.Brush = brush;\n                }\n                series.Points.Add(point);\n            }\n            series.LabelsVisibility = true;\n            PieSeries2D.SetLabelPosition(series.Label,PieLabelPosition.Outside);\n            //设置Legend的格式\n            series.LegendTextPattern = \"{A}: {VP:P2}\";\n            diagram2D.Series.Add(series);\n            title.Content = de.Ytitle;\n        }\n        //设置饼状图的动画效果\n        bool IsClick(DateTime mouseUpTime)\n        {\n            return (mouseUpTime - mouseDownTime).TotalMilliseconds < clickDelta;\n        }\n        double CalcAngle(Point p1, Point p2)\n        {\n            Point center = new Point(chart.Diagram.ActualWidth / 2, chart.ActualHeight / 2);\n            Point relativeP1 = new Point(p1.X - center.X, p1.Y - center.Y);\n            Point relativeP2 = new Point(p2.X - center.X, p2.Y - center.Y);\n            double angleP1Radian = Math.Atan2(relativeP1.X, relativeP1.Y);\n            double angleP2Radian = Math.Atan2(relativeP2.X, relativeP2.Y);\n            double angle = (angleP2Radian - angleP1Radian) * 180 / (Math.PI * 2);\n            if (angle > 90)\n                angle = 180 - angle;\n            else if (angle < -90)\n                angle = 180 + angle;\n            return angle;\n        }\n        void chart_MouseUp(object sender, MouseButtonEventArgs e)\n        {\n            ChartHitInfo hitInfo = chart.CalcHitInfo(e.GetPosition(chart));\n            rotate = false;\n            if (hitInfo == null || hitInfo.SeriesPoint == null || !IsClick(DateTime.Now))\n                return;\n            double distance = PieSeries.GetExplodedDistance(hitInfo.SeriesPoint);\n            Storyboard storyBoard = new Storyboard();\n            DoubleAnimation animation = new DoubleAnimation();\n            animation.Duration = new Duration(new TimeSpan(0, 0, 0, 0, 300));\n            animation.To = distance > 0 ? 0 : 0.3;\n            storyBoard.Children.Add(animation);\n            Storyboard.SetTarget(animation, hitInfo.SeriesPoint);\n            Storyboard.SetTargetProperty(animation, new PropertyPath(PieSeries.ExplodedDistanceProperty));\n            storyBoard.Begin();\n        }\n        void chart_MouseDown(object sender, MouseButtonEventArgs e)\n        {\n            mouseDownTime = DateTime.Now;\n            Point position = e.GetPosition(chart);\n            ChartHitInfo hitInfo = chart.CalcHitInfo(position);\n            if (hitInfo != null && hitInfo.SeriesPoint != null)\n            {\n                rotate = true;\n                startPosition = position;\n            }\n        }\n        void chart_MouseMove(object sender, MouseEventArgs e)\n        {\n            Point position = e.GetPosition(chart);\n            ChartHitInfo hitInfo = chart.CalcHitInfo(position);\n            if (hitInfo == null)\n                return;\n            if (rotate && !IsClick(DateTime.Now))\n            {\n                PieSeries2D series = chart.Diagram.Series[0] as PieSeries2D;\n                double angleDelta = CalcAngle(startPosition, position);\n                startPosition = position;\n            }\n        }\n    }\n}\n```","slug":"WPF-DevExpress-Pie","published":1,"updated":"2017-05-05T13:11:33.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o69000fpoc5pfmo884x","content":"<p>饼状图要比XYDiagram要简单一点，大体上也是那些东西，没有了X、Y坐标轴，也就没有了第二坐标，要简单一点。<br><img src=\"http://i4.buimg.com/567571/cdf282babe7f9ea8.png\" alt=\"WPF饼状图\"><br>PieChartControl.xaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;UserControl x:Class=&quot;WpfControl.PieChartControl&quot;</div><div class=\"line\">         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</div><div class=\"line\">         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</div><div class=\"line\">         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</div><div class=\"line\">         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</div><div class=\"line\">         xmlns:dxc=&quot;http://schemas.devexpress.com/winfx/2008/xaml/charts&quot;</div><div class=\"line\">         mc:Ignorable=&quot;d&quot;&gt;</div><div class=\"line\">    &lt;Grid&gt;</div><div class=\"line\">        &lt;dxc:ChartControl x:Name=&quot;chart&quot;</div><div class=\"line\">                          MouseDown=&quot;chart_MouseDown&quot;</div><div class=\"line\">                          MouseMove=&quot;chart_MouseMove&quot;</div><div class=\"line\">                          MouseUp=&quot;chart_MouseUp&quot;&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.Titles&gt;</div><div class=\"line\">                &lt;dxc:Title x:Name=&quot;title&quot; Content=&quot;Title&quot; Dock=&quot;Top&quot; HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Top&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.Titles&gt;</div><div class=\"line\">            &lt;dxc:SimpleDiagram2D x:Name=&quot;diagram2D&quot;&gt;</div><div class=\"line\">            &lt;/dxc:SimpleDiagram2D&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.Legend&gt;</div><div class=\"line\">                &lt;dxc:Legend HorizontalPosition=&quot;Right&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.Legend&gt;</div><div class=\"line\">        &lt;/dxc:ChartControl&gt;</div><div class=\"line\">    &lt;/Grid&gt;</div><div class=\"line\">&lt;/UserControl&gt;</div></pre></td></tr></table></figure></p>\n<p>PieChartControl.cs<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Windows;</div><div class=\"line\">using System.Windows.Controls;</div><div class=\"line\">using System.Windows.Input;</div><div class=\"line\">using System.Windows.Media;</div><div class=\"line\">using System.Windows.Media.Animation;</div><div class=\"line\">using DevExpress.Xpf.Charts;</div><div class=\"line\">using Dugufeixue.Common;</div><div class=\"line\">namespace WpfControl</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// PieChartControl.xaml 的交互逻辑</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    public partial class PieChartControl : UserControl</div><div class=\"line\">    &#123;</div><div class=\"line\">        const int clickDelta = 200;</div><div class=\"line\">        DateTime mouseDownTime;</div><div class=\"line\">        bool rotate;</div><div class=\"line\">        Point startPosition;</div><div class=\"line\">        public PieChartControl(DataEntity de, bool isUseColor)</div><div class=\"line\">        &#123;</div><div class=\"line\">            InitializeComponent();</div><div class=\"line\">            LoadPieChart(de, isUseColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        public void LoadPieChart(DataEntity de, bool isUseColor)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Series series= new PieSeries2D();</div><div class=\"line\">            //设置饼状图Label样式</div><div class=\"line\">            SeriesLabel label = new SeriesLabel();</div><div class=\"line\">            label.Indent = 15;</div><div class=\"line\">            label.TextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div><div class=\"line\">            series.Label = label;</div><div class=\"line\">            foreach (KeyValuePair&lt;string, double&gt; kvp in de.Dic)</div><div class=\"line\">            &#123;</div><div class=\"line\">                //这里和XYDiagram不一样，饼状图只能用SeriesPoint添加点来创建Series，没找到其他的好方法</div><div class=\"line\">                SeriesPoint point = new SeriesPoint(kvp.Key, kvp.Value);</div><div class=\"line\">                if (isUseColor)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    SolidColorBrush brush;</div><div class=\"line\">                    if (kvp.Key.Contains(&quot;运行&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;启动&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;正常&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;停止&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;启炉&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;停炉&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;开&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;关&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;故障&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;需监管&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;反馈&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;高料位报警&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xC0, 0xCB));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;无状态&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;无&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    //设置每一个扇形的不同颜色</div><div class=\"line\">                    point.Brush = brush;</div><div class=\"line\">                &#125;</div><div class=\"line\">                series.Points.Add(point);</div><div class=\"line\">            &#125;</div><div class=\"line\">            series.LabelsVisibility = true;</div><div class=\"line\">            PieSeries2D.SetLabelPosition(series.Label,PieLabelPosition.Outside);</div><div class=\"line\">            //设置Legend的格式</div><div class=\"line\">            series.LegendTextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div><div class=\"line\">            diagram2D.Series.Add(series);</div><div class=\"line\">            title.Content = de.Ytitle;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //设置饼状图的动画效果</div><div class=\"line\">        bool IsClick(DateTime mouseUpTime)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (mouseUpTime - mouseDownTime).TotalMilliseconds &lt; clickDelta;</div><div class=\"line\">        &#125;</div><div class=\"line\">        double CalcAngle(Point p1, Point p2)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Point center = new Point(chart.Diagram.ActualWidth / 2, chart.ActualHeight / 2);</div><div class=\"line\">            Point relativeP1 = new Point(p1.X - center.X, p1.Y - center.Y);</div><div class=\"line\">            Point relativeP2 = new Point(p2.X - center.X, p2.Y - center.Y);</div><div class=\"line\">            double angleP1Radian = Math.Atan2(relativeP1.X, relativeP1.Y);</div><div class=\"line\">            double angleP2Radian = Math.Atan2(relativeP2.X, relativeP2.Y);</div><div class=\"line\">            double angle = (angleP2Radian - angleP1Radian) * 180 / (Math.PI * 2);</div><div class=\"line\">            if (angle &gt; 90)</div><div class=\"line\">                angle = 180 - angle;</div><div class=\"line\">            else if (angle &lt; -90)</div><div class=\"line\">                angle = 180 + angle;</div><div class=\"line\">            return angle;</div><div class=\"line\">        &#125;</div><div class=\"line\">        void chart_MouseUp(object sender, MouseButtonEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ChartHitInfo hitInfo = chart.CalcHitInfo(e.GetPosition(chart));</div><div class=\"line\">            rotate = false;</div><div class=\"line\">            if (hitInfo == null || hitInfo.SeriesPoint == null || !IsClick(DateTime.Now))</div><div class=\"line\">                return;</div><div class=\"line\">            double distance = PieSeries.GetExplodedDistance(hitInfo.SeriesPoint);</div><div class=\"line\">            Storyboard storyBoard = new Storyboard();</div><div class=\"line\">            DoubleAnimation animation = new DoubleAnimation();</div><div class=\"line\">            animation.Duration = new Duration(new TimeSpan(0, 0, 0, 0, 300));</div><div class=\"line\">            animation.To = distance &gt; 0 ? 0 : 0.3;</div><div class=\"line\">            storyBoard.Children.Add(animation);</div><div class=\"line\">            Storyboard.SetTarget(animation, hitInfo.SeriesPoint);</div><div class=\"line\">            Storyboard.SetTargetProperty(animation, new PropertyPath(PieSeries.ExplodedDistanceProperty));</div><div class=\"line\">            storyBoard.Begin();</div><div class=\"line\">        &#125;</div><div class=\"line\">        void chart_MouseDown(object sender, MouseButtonEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            mouseDownTime = DateTime.Now;</div><div class=\"line\">            Point position = e.GetPosition(chart);</div><div class=\"line\">            ChartHitInfo hitInfo = chart.CalcHitInfo(position);</div><div class=\"line\">            if (hitInfo != null &amp;&amp; hitInfo.SeriesPoint != null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                rotate = true;</div><div class=\"line\">                startPosition = position;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        void chart_MouseMove(object sender, MouseEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Point position = e.GetPosition(chart);</div><div class=\"line\">            ChartHitInfo hitInfo = chart.CalcHitInfo(position);</div><div class=\"line\">            if (hitInfo == null)</div><div class=\"line\">                return;</div><div class=\"line\">            if (rotate &amp;&amp; !IsClick(DateTime.Now))</div><div class=\"line\">            &#123;</div><div class=\"line\">                PieSeries2D series = chart.Diagram.Series[0] as PieSeries2D;</div><div class=\"line\">                double angleDelta = CalcAngle(startPosition, position);</div><div class=\"line\">                startPosition = position;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>饼状图要比XYDiagram要简单一点，大体上也是那些东西，没有了X、Y坐标轴，也就没有了第二坐标，要简单一点。<br><img src=\"http://i4.buimg.com/567571/cdf282babe7f9ea8.png\" alt=\"WPF饼状图\"><br>PieChartControl.xaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;UserControl x:Class=&quot;WpfControl.PieChartControl&quot;</div><div class=\"line\">         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</div><div class=\"line\">         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</div><div class=\"line\">         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</div><div class=\"line\">         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</div><div class=\"line\">         xmlns:dxc=&quot;http://schemas.devexpress.com/winfx/2008/xaml/charts&quot;</div><div class=\"line\">         mc:Ignorable=&quot;d&quot;&gt;</div><div class=\"line\">    &lt;Grid&gt;</div><div class=\"line\">        &lt;dxc:ChartControl x:Name=&quot;chart&quot;</div><div class=\"line\">                          MouseDown=&quot;chart_MouseDown&quot;</div><div class=\"line\">                          MouseMove=&quot;chart_MouseMove&quot;</div><div class=\"line\">                          MouseUp=&quot;chart_MouseUp&quot;&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.Titles&gt;</div><div class=\"line\">                &lt;dxc:Title x:Name=&quot;title&quot; Content=&quot;Title&quot; Dock=&quot;Top&quot; HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Top&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.Titles&gt;</div><div class=\"line\">            &lt;dxc:SimpleDiagram2D x:Name=&quot;diagram2D&quot;&gt;</div><div class=\"line\">            &lt;/dxc:SimpleDiagram2D&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.Legend&gt;</div><div class=\"line\">                &lt;dxc:Legend HorizontalPosition=&quot;Right&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.Legend&gt;</div><div class=\"line\">        &lt;/dxc:ChartControl&gt;</div><div class=\"line\">    &lt;/Grid&gt;</div><div class=\"line\">&lt;/UserControl&gt;</div></pre></td></tr></table></figure></p>\n<p>PieChartControl.cs<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Windows;</div><div class=\"line\">using System.Windows.Controls;</div><div class=\"line\">using System.Windows.Input;</div><div class=\"line\">using System.Windows.Media;</div><div class=\"line\">using System.Windows.Media.Animation;</div><div class=\"line\">using DevExpress.Xpf.Charts;</div><div class=\"line\">using Dugufeixue.Common;</div><div class=\"line\">namespace WpfControl</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// PieChartControl.xaml 的交互逻辑</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    public partial class PieChartControl : UserControl</div><div class=\"line\">    &#123;</div><div class=\"line\">        const int clickDelta = 200;</div><div class=\"line\">        DateTime mouseDownTime;</div><div class=\"line\">        bool rotate;</div><div class=\"line\">        Point startPosition;</div><div class=\"line\">        public PieChartControl(DataEntity de, bool isUseColor)</div><div class=\"line\">        &#123;</div><div class=\"line\">            InitializeComponent();</div><div class=\"line\">            LoadPieChart(de, isUseColor);</div><div class=\"line\">        &#125;</div><div class=\"line\">        public void LoadPieChart(DataEntity de, bool isUseColor)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Series series= new PieSeries2D();</div><div class=\"line\">            //设置饼状图Label样式</div><div class=\"line\">            SeriesLabel label = new SeriesLabel();</div><div class=\"line\">            label.Indent = 15;</div><div class=\"line\">            label.TextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div><div class=\"line\">            series.Label = label;</div><div class=\"line\">            foreach (KeyValuePair&lt;string, double&gt; kvp in de.Dic)</div><div class=\"line\">            &#123;</div><div class=\"line\">                //这里和XYDiagram不一样，饼状图只能用SeriesPoint添加点来创建Series，没找到其他的好方法</div><div class=\"line\">                SeriesPoint point = new SeriesPoint(kvp.Key, kvp.Value);</div><div class=\"line\">                if (isUseColor)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    SolidColorBrush brush;</div><div class=\"line\">                    if (kvp.Key.Contains(&quot;运行&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;启动&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;正常&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;停止&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;启炉&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;停炉&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;开&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;关&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;故障&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xFF, 0x00));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;需监管&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;反馈&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;高料位报警&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xFF, 0xC0, 0xCB));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;无状态&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (kvp.Key.Contains(&quot;无&quot;))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        brush = new SolidColorBrush(Color.FromRgb(0xCC, 0xCC, 0xCC));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    //设置每一个扇形的不同颜色</div><div class=\"line\">                    point.Brush = brush;</div><div class=\"line\">                &#125;</div><div class=\"line\">                series.Points.Add(point);</div><div class=\"line\">            &#125;</div><div class=\"line\">            series.LabelsVisibility = true;</div><div class=\"line\">            PieSeries2D.SetLabelPosition(series.Label,PieLabelPosition.Outside);</div><div class=\"line\">            //设置Legend的格式</div><div class=\"line\">            series.LegendTextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div><div class=\"line\">            diagram2D.Series.Add(series);</div><div class=\"line\">            title.Content = de.Ytitle;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //设置饼状图的动画效果</div><div class=\"line\">        bool IsClick(DateTime mouseUpTime)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (mouseUpTime - mouseDownTime).TotalMilliseconds &lt; clickDelta;</div><div class=\"line\">        &#125;</div><div class=\"line\">        double CalcAngle(Point p1, Point p2)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Point center = new Point(chart.Diagram.ActualWidth / 2, chart.ActualHeight / 2);</div><div class=\"line\">            Point relativeP1 = new Point(p1.X - center.X, p1.Y - center.Y);</div><div class=\"line\">            Point relativeP2 = new Point(p2.X - center.X, p2.Y - center.Y);</div><div class=\"line\">            double angleP1Radian = Math.Atan2(relativeP1.X, relativeP1.Y);</div><div class=\"line\">            double angleP2Radian = Math.Atan2(relativeP2.X, relativeP2.Y);</div><div class=\"line\">            double angle = (angleP2Radian - angleP1Radian) * 180 / (Math.PI * 2);</div><div class=\"line\">            if (angle &gt; 90)</div><div class=\"line\">                angle = 180 - angle;</div><div class=\"line\">            else if (angle &lt; -90)</div><div class=\"line\">                angle = 180 + angle;</div><div class=\"line\">            return angle;</div><div class=\"line\">        &#125;</div><div class=\"line\">        void chart_MouseUp(object sender, MouseButtonEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ChartHitInfo hitInfo = chart.CalcHitInfo(e.GetPosition(chart));</div><div class=\"line\">            rotate = false;</div><div class=\"line\">            if (hitInfo == null || hitInfo.SeriesPoint == null || !IsClick(DateTime.Now))</div><div class=\"line\">                return;</div><div class=\"line\">            double distance = PieSeries.GetExplodedDistance(hitInfo.SeriesPoint);</div><div class=\"line\">            Storyboard storyBoard = new Storyboard();</div><div class=\"line\">            DoubleAnimation animation = new DoubleAnimation();</div><div class=\"line\">            animation.Duration = new Duration(new TimeSpan(0, 0, 0, 0, 300));</div><div class=\"line\">            animation.To = distance &gt; 0 ? 0 : 0.3;</div><div class=\"line\">            storyBoard.Children.Add(animation);</div><div class=\"line\">            Storyboard.SetTarget(animation, hitInfo.SeriesPoint);</div><div class=\"line\">            Storyboard.SetTargetProperty(animation, new PropertyPath(PieSeries.ExplodedDistanceProperty));</div><div class=\"line\">            storyBoard.Begin();</div><div class=\"line\">        &#125;</div><div class=\"line\">        void chart_MouseDown(object sender, MouseButtonEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            mouseDownTime = DateTime.Now;</div><div class=\"line\">            Point position = e.GetPosition(chart);</div><div class=\"line\">            ChartHitInfo hitInfo = chart.CalcHitInfo(position);</div><div class=\"line\">            if (hitInfo != null &amp;&amp; hitInfo.SeriesPoint != null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                rotate = true;</div><div class=\"line\">                startPosition = position;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        void chart_MouseMove(object sender, MouseEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Point position = e.GetPosition(chart);</div><div class=\"line\">            ChartHitInfo hitInfo = chart.CalcHitInfo(position);</div><div class=\"line\">            if (hitInfo == null)</div><div class=\"line\">                return;</div><div class=\"line\">            if (rotate &amp;&amp; !IsClick(DateTime.Now))</div><div class=\"line\">            &#123;</div><div class=\"line\">                PieSeries2D series = chart.Diagram.Series[0] as PieSeries2D;</div><div class=\"line\">                double angleDelta = CalcAngle(startPosition, position);</div><div class=\"line\">                startPosition = position;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"WPF DevExpress ChartControl使用之XYDiagram","date":"2017-02-10T16:33:55.000Z","description":"WPF中使用DevExpress ChartControl控件绘制XYDiagrem折线图。","_content":"WPF使用Dev和WinForm有许多不同，相对而言，WPF要更简单和炫酷一点，我只做了一点基本的功能，没有仔细的研究，这里只介绍一下WPF Dev ChartControl绘制XYDiagram的基础。\n![XYDiagram折线图](http://i1.piimg.com/567571/506953353caf6f08.png)\n\nXYDiagramControl.xaml页面\n```\n<UserControl\n         xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n         xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n         xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n         xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n         xmlns:dxc=\"http://schemas.devexpress.com/winfx/2008/xaml/charts\"\n         xmlns:dxmvvm=\"http://schemas.devexpress.com/winfx/2008/xaml/mvvm\"\n         x:Class=\"WpfControl.XYDiagramControl\"\n         mc:Ignorable=\"d\">\n    <Grid>\n        <dxc:ChartControl HorizontalAlignment=\"Left\" Margin=\"0,0,0,0\" VerticalAlignment=\"Top\">\n            <dxc:XYDiagram2D  LabelsResolveOverlappingMinIndent=\"2\" x:Name=\"diagram1\" EnableAxisXNavigation=\"True\">\n                <dxc:XYDiagram2D.DefaultPane>\n                    <dxc:Pane Name=\"pane\"/>\n                </dxc:XYDiagram2D.DefaultPane>\n                <dxc:XYDiagram2D.AxisY>\n                    <dxc:AxisY2D GridLinesMinorVisible=\"False\">\n                    </dxc:AxisY2D>\n                </dxc:XYDiagram2D.AxisY>\n                <dxc:XYDiagram2D.SecondaryAxesY>\n                </dxc:XYDiagram2D.SecondaryAxesY>\n                <dxc:XYDiagram2D.AxisX>\n                    <dxc:AxisX2D GridLinesVisible=\"False\"/>\n                </dxc:XYDiagram2D.AxisX>\n                <dxc:LineSeries2D MarkerVisible=\"True\" LabelsVisibility=\"True\" ArgumentDataMember=\"Key\" ValueDataMember=\"Value\" x:Name=\"series1\">\n                    <dxc:LineSeries2D.LineStyle>\n                         <dxc:LineStyle Thickness=\"1\" />\n                    </dxc:LineSeries2D.LineStyle>\n                </dxc:LineSeries2D>\n            </dxc:XYDiagram2D>\n            <dxc:ChartControl.Legend>\n                <dxc:Legend HorizontalPosition=\"Right\"/>\n            </dxc:ChartControl.Legend>\n            <dxc:ChartControl.ToolTipController>\n                <dxc:ChartToolTipController AutoPopDelay=\"0\" InitialDelay=\"0\"/>\n            </dxc:ChartControl.ToolTipController>\n        </dxc:ChartControl>\n    </Grid>\n</UserControl>\n```\n\nXYDiagramControl.cs页面\n```\nusing System.Collections.Generic;\nusing System.Windows.Controls;\nusing DevExpress.Xpf.Charts;\nusing Dugufeixue.Common;\nnamespace WpfControl\n{\n    /// <summary>\n    /// UserControl2.xaml 的交互逻辑\n    /// </summary>\n    public partial class XYDiagramControl : UserControl\n    {\n        double maxValue = 0;\n        private char divider = '_';\n        public XYDiagramControl(List<DataEntity> decs, bool isLine, bool isShowLabel, bool isSameY)\n        {\n            InitializeComponent();\n            int index = 0;\n            foreach (DataEntity de in decs)\n            {\n                Series series = null;\n                if (!isSameY)\n                {\n                    //设置Y轴的第二坐标\n                    SecondaryAxisY2D SecondaryAxisY = new SecondaryAxisY2D();\n                    diagram1.SecondaryAxesY.Add(SecondaryAxisY);\n                    //设置第二坐标的标题\n                    AxisTitle title = new AxisTitle();\n                    title.Content = de.Ytitle;\n                    SecondaryAxisY.Title = title;\n                    if (isLine)\n                    {\n                        //新建一个折线图\n                        series = new LineSeries2D();\n                        //设置series与第二坐标轴关联\n                        XYDiagram2D.SetSeriesAxisY((LineSeries2D)series, SecondaryAxisY);\n                    }\n                    else\n                    {\n                        //新建一个柱状图\n                        series = new BarSideBySideSeries2D();\n                        //设置柱状图的Label\n                        SeriesLabel label = new SeriesLabel();\n                        label.Indent = 20;\n                        series.Label = label;\n                        if (isShowLabel)\n                        {\n                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);\n                        }\n                        XYDiagram2D.SetSeriesAxisY((BarSideBySideSeries2D)series, SecondaryAxisY);\n                    }\n                }\n                else\n                {\n                    if (isLine)\n                    {\n                        series = new LineSeries2D();\n                    }\n                    else\n                    {\n                        series = new BarSideBySideSeries2D();\n                        SeriesLabel label = new SeriesLabel();\n                        label.Indent = 20;\n                        series.Label = label;\n                        if (isShowLabel)\n                        {\n                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);\n                        }\n                    }\n                }\n                series.Name = \"series\" + index;\n                series.DisplayName = de.Displayname;\n                //设置series的数据源\n                series.DataSource = de.Dic;\n                series.LabelsVisibility = isShowLabel;\n                series.ArgumentDataMember = \"Key\";\n                series.ValueDataMember = \"Value\";\n                //向XYDiagram中添加series\n                diagram1.Series.Add(series);\n                index++;\n            }\n        }\n    }\n}\n```","source":"_posts/WPF-DevExpress-XYDiagram.md","raw":"---\ntitle: WPF DevExpress ChartControl使用之XYDiagram\ndate: 2017-02-11 00:33:55\ncategories: DevExpress\ntags: \n\t- DevExpress Chart\n\t- WPF\ndescription: WPF中使用DevExpress ChartControl控件绘制XYDiagrem折线图。\n---\nWPF使用Dev和WinForm有许多不同，相对而言，WPF要更简单和炫酷一点，我只做了一点基本的功能，没有仔细的研究，这里只介绍一下WPF Dev ChartControl绘制XYDiagram的基础。\n![XYDiagram折线图](http://i1.piimg.com/567571/506953353caf6f08.png)\n\nXYDiagramControl.xaml页面\n```\n<UserControl\n         xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n         xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n         xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n         xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n         xmlns:dxc=\"http://schemas.devexpress.com/winfx/2008/xaml/charts\"\n         xmlns:dxmvvm=\"http://schemas.devexpress.com/winfx/2008/xaml/mvvm\"\n         x:Class=\"WpfControl.XYDiagramControl\"\n         mc:Ignorable=\"d\">\n    <Grid>\n        <dxc:ChartControl HorizontalAlignment=\"Left\" Margin=\"0,0,0,0\" VerticalAlignment=\"Top\">\n            <dxc:XYDiagram2D  LabelsResolveOverlappingMinIndent=\"2\" x:Name=\"diagram1\" EnableAxisXNavigation=\"True\">\n                <dxc:XYDiagram2D.DefaultPane>\n                    <dxc:Pane Name=\"pane\"/>\n                </dxc:XYDiagram2D.DefaultPane>\n                <dxc:XYDiagram2D.AxisY>\n                    <dxc:AxisY2D GridLinesMinorVisible=\"False\">\n                    </dxc:AxisY2D>\n                </dxc:XYDiagram2D.AxisY>\n                <dxc:XYDiagram2D.SecondaryAxesY>\n                </dxc:XYDiagram2D.SecondaryAxesY>\n                <dxc:XYDiagram2D.AxisX>\n                    <dxc:AxisX2D GridLinesVisible=\"False\"/>\n                </dxc:XYDiagram2D.AxisX>\n                <dxc:LineSeries2D MarkerVisible=\"True\" LabelsVisibility=\"True\" ArgumentDataMember=\"Key\" ValueDataMember=\"Value\" x:Name=\"series1\">\n                    <dxc:LineSeries2D.LineStyle>\n                         <dxc:LineStyle Thickness=\"1\" />\n                    </dxc:LineSeries2D.LineStyle>\n                </dxc:LineSeries2D>\n            </dxc:XYDiagram2D>\n            <dxc:ChartControl.Legend>\n                <dxc:Legend HorizontalPosition=\"Right\"/>\n            </dxc:ChartControl.Legend>\n            <dxc:ChartControl.ToolTipController>\n                <dxc:ChartToolTipController AutoPopDelay=\"0\" InitialDelay=\"0\"/>\n            </dxc:ChartControl.ToolTipController>\n        </dxc:ChartControl>\n    </Grid>\n</UserControl>\n```\n\nXYDiagramControl.cs页面\n```\nusing System.Collections.Generic;\nusing System.Windows.Controls;\nusing DevExpress.Xpf.Charts;\nusing Dugufeixue.Common;\nnamespace WpfControl\n{\n    /// <summary>\n    /// UserControl2.xaml 的交互逻辑\n    /// </summary>\n    public partial class XYDiagramControl : UserControl\n    {\n        double maxValue = 0;\n        private char divider = '_';\n        public XYDiagramControl(List<DataEntity> decs, bool isLine, bool isShowLabel, bool isSameY)\n        {\n            InitializeComponent();\n            int index = 0;\n            foreach (DataEntity de in decs)\n            {\n                Series series = null;\n                if (!isSameY)\n                {\n                    //设置Y轴的第二坐标\n                    SecondaryAxisY2D SecondaryAxisY = new SecondaryAxisY2D();\n                    diagram1.SecondaryAxesY.Add(SecondaryAxisY);\n                    //设置第二坐标的标题\n                    AxisTitle title = new AxisTitle();\n                    title.Content = de.Ytitle;\n                    SecondaryAxisY.Title = title;\n                    if (isLine)\n                    {\n                        //新建一个折线图\n                        series = new LineSeries2D();\n                        //设置series与第二坐标轴关联\n                        XYDiagram2D.SetSeriesAxisY((LineSeries2D)series, SecondaryAxisY);\n                    }\n                    else\n                    {\n                        //新建一个柱状图\n                        series = new BarSideBySideSeries2D();\n                        //设置柱状图的Label\n                        SeriesLabel label = new SeriesLabel();\n                        label.Indent = 20;\n                        series.Label = label;\n                        if (isShowLabel)\n                        {\n                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);\n                        }\n                        XYDiagram2D.SetSeriesAxisY((BarSideBySideSeries2D)series, SecondaryAxisY);\n                    }\n                }\n                else\n                {\n                    if (isLine)\n                    {\n                        series = new LineSeries2D();\n                    }\n                    else\n                    {\n                        series = new BarSideBySideSeries2D();\n                        SeriesLabel label = new SeriesLabel();\n                        label.Indent = 20;\n                        series.Label = label;\n                        if (isShowLabel)\n                        {\n                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);\n                        }\n                    }\n                }\n                series.Name = \"series\" + index;\n                series.DisplayName = de.Displayname;\n                //设置series的数据源\n                series.DataSource = de.Dic;\n                series.LabelsVisibility = isShowLabel;\n                series.ArgumentDataMember = \"Key\";\n                series.ValueDataMember = \"Value\";\n                //向XYDiagram中添加series\n                diagram1.Series.Add(series);\n                index++;\n            }\n        }\n    }\n}\n```","slug":"WPF-DevExpress-XYDiagram","published":1,"updated":"2017-05-05T13:11:33.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o6o000ipoc5i56nadrs","content":"<p>WPF使用Dev和WinForm有许多不同，相对而言，WPF要更简单和炫酷一点，我只做了一点基本的功能，没有仔细的研究，这里只介绍一下WPF Dev ChartControl绘制XYDiagram的基础。<br><img src=\"http://i1.piimg.com/567571/506953353caf6f08.png\" alt=\"XYDiagram折线图\"></p>\n<p>XYDiagramControl.xaml页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;UserControl</div><div class=\"line\">         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</div><div class=\"line\">         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</div><div class=\"line\">         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</div><div class=\"line\">         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</div><div class=\"line\">         xmlns:dxc=&quot;http://schemas.devexpress.com/winfx/2008/xaml/charts&quot;</div><div class=\"line\">         xmlns:dxmvvm=&quot;http://schemas.devexpress.com/winfx/2008/xaml/mvvm&quot;</div><div class=\"line\">         x:Class=&quot;WpfControl.XYDiagramControl&quot;</div><div class=\"line\">         mc:Ignorable=&quot;d&quot;&gt;</div><div class=\"line\">    &lt;Grid&gt;</div><div class=\"line\">        &lt;dxc:ChartControl HorizontalAlignment=&quot;Left&quot; Margin=&quot;0,0,0,0&quot; VerticalAlignment=&quot;Top&quot;&gt;</div><div class=\"line\">            &lt;dxc:XYDiagram2D  LabelsResolveOverlappingMinIndent=&quot;2&quot; x:Name=&quot;diagram1&quot; EnableAxisXNavigation=&quot;True&quot;&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.DefaultPane&gt;</div><div class=\"line\">                    &lt;dxc:Pane Name=&quot;pane&quot;/&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.DefaultPane&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.AxisY&gt;</div><div class=\"line\">                    &lt;dxc:AxisY2D GridLinesMinorVisible=&quot;False&quot;&gt;</div><div class=\"line\">                    &lt;/dxc:AxisY2D&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.AxisY&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.SecondaryAxesY&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.SecondaryAxesY&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.AxisX&gt;</div><div class=\"line\">                    &lt;dxc:AxisX2D GridLinesVisible=&quot;False&quot;/&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.AxisX&gt;</div><div class=\"line\">                &lt;dxc:LineSeries2D MarkerVisible=&quot;True&quot; LabelsVisibility=&quot;True&quot; ArgumentDataMember=&quot;Key&quot; ValueDataMember=&quot;Value&quot; x:Name=&quot;series1&quot;&gt;</div><div class=\"line\">                    &lt;dxc:LineSeries2D.LineStyle&gt;</div><div class=\"line\">                         &lt;dxc:LineStyle Thickness=&quot;1&quot; /&gt;</div><div class=\"line\">                    &lt;/dxc:LineSeries2D.LineStyle&gt;</div><div class=\"line\">                &lt;/dxc:LineSeries2D&gt;</div><div class=\"line\">            &lt;/dxc:XYDiagram2D&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.Legend&gt;</div><div class=\"line\">                &lt;dxc:Legend HorizontalPosition=&quot;Right&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.Legend&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.ToolTipController&gt;</div><div class=\"line\">                &lt;dxc:ChartToolTipController AutoPopDelay=&quot;0&quot; InitialDelay=&quot;0&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.ToolTipController&gt;</div><div class=\"line\">        &lt;/dxc:ChartControl&gt;</div><div class=\"line\">    &lt;/Grid&gt;</div><div class=\"line\">&lt;/UserControl&gt;</div></pre></td></tr></table></figure></p>\n<p>XYDiagramControl.cs页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Windows.Controls;</div><div class=\"line\">using DevExpress.Xpf.Charts;</div><div class=\"line\">using Dugufeixue.Common;</div><div class=\"line\">namespace WpfControl</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// UserControl2.xaml 的交互逻辑</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    public partial class XYDiagramControl : UserControl</div><div class=\"line\">    &#123;</div><div class=\"line\">        double maxValue = 0;</div><div class=\"line\">        private char divider = &apos;_&apos;;</div><div class=\"line\">        public XYDiagramControl(List&lt;DataEntity&gt; decs, bool isLine, bool isShowLabel, bool isSameY)</div><div class=\"line\">        &#123;</div><div class=\"line\">            InitializeComponent();</div><div class=\"line\">            int index = 0;</div><div class=\"line\">            foreach (DataEntity de in decs)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Series series = null;</div><div class=\"line\">                if (!isSameY)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    //设置Y轴的第二坐标</div><div class=\"line\">                    SecondaryAxisY2D SecondaryAxisY = new SecondaryAxisY2D();</div><div class=\"line\">                    diagram1.SecondaryAxesY.Add(SecondaryAxisY);</div><div class=\"line\">                    //设置第二坐标的标题</div><div class=\"line\">                    AxisTitle title = new AxisTitle();</div><div class=\"line\">                    title.Content = de.Ytitle;</div><div class=\"line\">                    SecondaryAxisY.Title = title;</div><div class=\"line\">                    if (isLine)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        //新建一个折线图</div><div class=\"line\">                        series = new LineSeries2D();</div><div class=\"line\">                        //设置series与第二坐标轴关联</div><div class=\"line\">                        XYDiagram2D.SetSeriesAxisY((LineSeries2D)series, SecondaryAxisY);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        //新建一个柱状图</div><div class=\"line\">                        series = new BarSideBySideSeries2D();</div><div class=\"line\">                        //设置柱状图的Label</div><div class=\"line\">                        SeriesLabel label = new SeriesLabel();</div><div class=\"line\">                        label.Indent = 20;</div><div class=\"line\">                        series.Label = label;</div><div class=\"line\">                        if (isShowLabel)</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        XYDiagram2D.SetSeriesAxisY((BarSideBySideSeries2D)series, SecondaryAxisY);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else</div><div class=\"line\">                &#123;</div><div class=\"line\">                    if (isLine)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        series = new LineSeries2D();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        series = new BarSideBySideSeries2D();</div><div class=\"line\">                        SeriesLabel label = new SeriesLabel();</div><div class=\"line\">                        label.Indent = 20;</div><div class=\"line\">                        series.Label = label;</div><div class=\"line\">                        if (isShowLabel)</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                series.Name = &quot;series&quot; + index;</div><div class=\"line\">                series.DisplayName = de.Displayname;</div><div class=\"line\">                //设置series的数据源</div><div class=\"line\">                series.DataSource = de.Dic;</div><div class=\"line\">                series.LabelsVisibility = isShowLabel;</div><div class=\"line\">                series.ArgumentDataMember = &quot;Key&quot;;</div><div class=\"line\">                series.ValueDataMember = &quot;Value&quot;;</div><div class=\"line\">                //向XYDiagram中添加series</div><div class=\"line\">                diagram1.Series.Add(series);</div><div class=\"line\">                index++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>WPF使用Dev和WinForm有许多不同，相对而言，WPF要更简单和炫酷一点，我只做了一点基本的功能，没有仔细的研究，这里只介绍一下WPF Dev ChartControl绘制XYDiagram的基础。<br><img src=\"http://i1.piimg.com/567571/506953353caf6f08.png\" alt=\"XYDiagram折线图\"></p>\n<p>XYDiagramControl.xaml页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;UserControl</div><div class=\"line\">         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</div><div class=\"line\">         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</div><div class=\"line\">         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</div><div class=\"line\">         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</div><div class=\"line\">         xmlns:dxc=&quot;http://schemas.devexpress.com/winfx/2008/xaml/charts&quot;</div><div class=\"line\">         xmlns:dxmvvm=&quot;http://schemas.devexpress.com/winfx/2008/xaml/mvvm&quot;</div><div class=\"line\">         x:Class=&quot;WpfControl.XYDiagramControl&quot;</div><div class=\"line\">         mc:Ignorable=&quot;d&quot;&gt;</div><div class=\"line\">    &lt;Grid&gt;</div><div class=\"line\">        &lt;dxc:ChartControl HorizontalAlignment=&quot;Left&quot; Margin=&quot;0,0,0,0&quot; VerticalAlignment=&quot;Top&quot;&gt;</div><div class=\"line\">            &lt;dxc:XYDiagram2D  LabelsResolveOverlappingMinIndent=&quot;2&quot; x:Name=&quot;diagram1&quot; EnableAxisXNavigation=&quot;True&quot;&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.DefaultPane&gt;</div><div class=\"line\">                    &lt;dxc:Pane Name=&quot;pane&quot;/&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.DefaultPane&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.AxisY&gt;</div><div class=\"line\">                    &lt;dxc:AxisY2D GridLinesMinorVisible=&quot;False&quot;&gt;</div><div class=\"line\">                    &lt;/dxc:AxisY2D&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.AxisY&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.SecondaryAxesY&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.SecondaryAxesY&gt;</div><div class=\"line\">                &lt;dxc:XYDiagram2D.AxisX&gt;</div><div class=\"line\">                    &lt;dxc:AxisX2D GridLinesVisible=&quot;False&quot;/&gt;</div><div class=\"line\">                &lt;/dxc:XYDiagram2D.AxisX&gt;</div><div class=\"line\">                &lt;dxc:LineSeries2D MarkerVisible=&quot;True&quot; LabelsVisibility=&quot;True&quot; ArgumentDataMember=&quot;Key&quot; ValueDataMember=&quot;Value&quot; x:Name=&quot;series1&quot;&gt;</div><div class=\"line\">                    &lt;dxc:LineSeries2D.LineStyle&gt;</div><div class=\"line\">                         &lt;dxc:LineStyle Thickness=&quot;1&quot; /&gt;</div><div class=\"line\">                    &lt;/dxc:LineSeries2D.LineStyle&gt;</div><div class=\"line\">                &lt;/dxc:LineSeries2D&gt;</div><div class=\"line\">            &lt;/dxc:XYDiagram2D&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.Legend&gt;</div><div class=\"line\">                &lt;dxc:Legend HorizontalPosition=&quot;Right&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.Legend&gt;</div><div class=\"line\">            &lt;dxc:ChartControl.ToolTipController&gt;</div><div class=\"line\">                &lt;dxc:ChartToolTipController AutoPopDelay=&quot;0&quot; InitialDelay=&quot;0&quot;/&gt;</div><div class=\"line\">            &lt;/dxc:ChartControl.ToolTipController&gt;</div><div class=\"line\">        &lt;/dxc:ChartControl&gt;</div><div class=\"line\">    &lt;/Grid&gt;</div><div class=\"line\">&lt;/UserControl&gt;</div></pre></td></tr></table></figure></p>\n<p>XYDiagramControl.cs页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Windows.Controls;</div><div class=\"line\">using DevExpress.Xpf.Charts;</div><div class=\"line\">using Dugufeixue.Common;</div><div class=\"line\">namespace WpfControl</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// UserControl2.xaml 的交互逻辑</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    public partial class XYDiagramControl : UserControl</div><div class=\"line\">    &#123;</div><div class=\"line\">        double maxValue = 0;</div><div class=\"line\">        private char divider = &apos;_&apos;;</div><div class=\"line\">        public XYDiagramControl(List&lt;DataEntity&gt; decs, bool isLine, bool isShowLabel, bool isSameY)</div><div class=\"line\">        &#123;</div><div class=\"line\">            InitializeComponent();</div><div class=\"line\">            int index = 0;</div><div class=\"line\">            foreach (DataEntity de in decs)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Series series = null;</div><div class=\"line\">                if (!isSameY)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    //设置Y轴的第二坐标</div><div class=\"line\">                    SecondaryAxisY2D SecondaryAxisY = new SecondaryAxisY2D();</div><div class=\"line\">                    diagram1.SecondaryAxesY.Add(SecondaryAxisY);</div><div class=\"line\">                    //设置第二坐标的标题</div><div class=\"line\">                    AxisTitle title = new AxisTitle();</div><div class=\"line\">                    title.Content = de.Ytitle;</div><div class=\"line\">                    SecondaryAxisY.Title = title;</div><div class=\"line\">                    if (isLine)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        //新建一个折线图</div><div class=\"line\">                        series = new LineSeries2D();</div><div class=\"line\">                        //设置series与第二坐标轴关联</div><div class=\"line\">                        XYDiagram2D.SetSeriesAxisY((LineSeries2D)series, SecondaryAxisY);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        //新建一个柱状图</div><div class=\"line\">                        series = new BarSideBySideSeries2D();</div><div class=\"line\">                        //设置柱状图的Label</div><div class=\"line\">                        SeriesLabel label = new SeriesLabel();</div><div class=\"line\">                        label.Indent = 20;</div><div class=\"line\">                        series.Label = label;</div><div class=\"line\">                        if (isShowLabel)</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        XYDiagram2D.SetSeriesAxisY((BarSideBySideSeries2D)series, SecondaryAxisY);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else</div><div class=\"line\">                &#123;</div><div class=\"line\">                    if (isLine)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        series = new LineSeries2D();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        series = new BarSideBySideSeries2D();</div><div class=\"line\">                        SeriesLabel label = new SeriesLabel();</div><div class=\"line\">                        label.Indent = 20;</div><div class=\"line\">                        series.Label = label;</div><div class=\"line\">                        if (isShowLabel)</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            BarSideBySideSeries2D.SetLabelPosition(series.Label, Bar2DLabelPosition.Outside);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                series.Name = &quot;series&quot; + index;</div><div class=\"line\">                series.DisplayName = de.Displayname;</div><div class=\"line\">                //设置series的数据源</div><div class=\"line\">                series.DataSource = de.Dic;</div><div class=\"line\">                series.LabelsVisibility = isShowLabel;</div><div class=\"line\">                series.ArgumentDataMember = &quot;Key&quot;;</div><div class=\"line\">                series.ValueDataMember = &quot;Value&quot;;</div><div class=\"line\">                //向XYDiagram中添加series</div><div class=\"line\">                diagram1.Series.Add(series);</div><div class=\"line\">                index++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"从输入url到页面展示到底发生了什么","date":"2017-05-05T08:10:57.000Z","description":"网上搜索“从输入url到页面展示到底发生了什么”，你可以搜到一大堆的资料。并且面试这道题基本是必考题，本文的目的是通过输入url之后发生的事情来做知识的总结和扩展。","_content":"总的过程大致如下:\n\n## 输入地址 ##\n----------\n当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。\n\n## 浏览器查找域名的 IP 地址 ##\n----------\n1. 请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。\n2. 如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。\n3. 查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。\n4. 根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。\n5. 本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。\n6. 最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。\n下面这张图很完美的解释了这一过程：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/3425413-file_1493898166210_135e8.png)\n</div>\n\n知识扩展：\n1)什么是DNS？DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。\n通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。\n2)DNS查询的两种方式：递归查询和迭代查询\n1、递归解析\n当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/21533490-file_1493898166369_547a.png)\n</div>\n2、迭代解析\n当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/65167043-file_1493898166478_17f6.png)\n</div>\n3)DNS域名称空间的组织方式\n我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/56599982-file_1493898166589_100d6.png)\n</div>\n\n4)DNS负载均衡\n当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。\n\n## 浏览器向 web 服务器发送一个 HTTP 请求 ##\n----------\n拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024<端口<65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。\nTCP连接如图所示:\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/94580403-file_1493898166711_b57c.png)\n</div>\n```\nGET/sample.jspHTTP/1.1   Accept:image/gif.image/jpeg,*/*   \nAccept-Language:zh-cn   \nConnection:Keep-Alive   \nHost:localhost   \nUser-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)   \nAccept-Encoding:gzip,deflate   \n\nusername=jinqiao&password=1234\n```\n注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。\n（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1\n（2）请求头(Request Header)\n请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。\n```\nAccept:image/gif.image/jpeg.*/*   \nAccept-Language:zh-cn   \nConnection:Keep-Alive   \nHost:localhost   \nUser-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)   \nAccept-Encoding:gzip,deflate.\n```\n（3）请求正文\n请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：\n`username=jinqiao&password=1234`\n\n知识扩展：\n1）TCP三次握手第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；\n第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。\n第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。\n如图所示：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/8065937-file_1493898166838_66c.png)\n</div>\n2）为什需要三次握手？《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误” 书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接\n假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。\n3）TCP四次挥手\n第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。\n第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。\n第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。\n第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/94896276-file_1493898166949_43b1.png)\n</div>\n \n4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。\n\n## 服务器的永久重定向响应 ##\n\n----------\n\n服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“http://www.google.com/” 而非“http://google.com/”。\n为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像http://www.yy.com/和http://yy.com/ ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。\n\n**扩展知识**\n\n**1）301和302的区别。**\n301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。\n他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；\n302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301\n\n**2）重定向原因：**\n（1）网站调整（如改变网页目录结构）；\n（2）网页被移到一个新地址；\n（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。\n这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。\n \n**3）什么时候进行301或者302跳转呢？** \n当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。\n清晰明确而言：使用301跳转的大概场景如下：\n1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。\n2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。\n3、空间服务器不稳定，换空间的时候。\n\n## 浏览器跟踪重定向地址 ##\n\n----------\n\n现在浏览器知道了 \"http://www.google.com/\"才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的\n\n## 服务器处理请求 ##\n\n----------\n\n经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？\n后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。\n一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。\n如图所示：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/30916238-file_1493898167189_17aa4.png)\n</div>\n通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。\n扩展阅读：1）什么是反向代理？客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/68445623-file_1493898167073_3261.png)\n</div>\n\n## 服务器返回一个HTTP响应 ##\n\n----------\n\n经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。\nHTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：\n| 状态行\n| 响应头(Response Header)\n| 响应正文\n```\nHTTP/1.1 200 OK   \nDate: Sat, 31 Dec 2005 23:59:59 GMT   \nContent-Type: text/html;charset=ISO-8859-1   Content-Length: 122   ＜html＞   \n＜head＞   \n＜title＞http＜/title＞   \n＜/head＞   \n＜body＞   \n＜!-- body goes here --＞   \n＜/body＞   \n＜/html＞\n```\n\n**状态行：**\n状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。\n格式:    HTTP-Version Status-Code Reason-Phrase CRLF\n例如:    HTTP/1.1 200 OK \\r\\n\n-- **协议版本**：是用http1.0还是其他版本\n-- **状态描述**：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok\n-- **状态代码**：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下\n**1xx**：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。\n100 Continue\n101 Switching Protocols\n**2xx**：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功\n204 No Content 成功，但不返回任何实体的主体部分\n206 Partial Content 成功执行了一个范围（Range）请求\n**3xx**：重定向状态码，表示服务器要求客户端重定向。\n301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL\n302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源\n303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源\n304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存\n307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现\n**4xx**：客户端错误状态码，表示客户端的请求有非法内容。\n400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解\n401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用\n403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因\n404 Not Found 请求的资源不存在，例如，输入了错误的URL\n**5xx**：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。\n500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求\n503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常\n**响应头**：\n响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号\":\"分隔，典型的响应头有：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/64055094-file_1493898167331_125a.png)\n</div>\n**响应正文**\n包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/80493969-file_1493898167532_eec7.png)\n</div>\n\n## 浏览器显示 HTML ##\n\n----------\n\n在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：\n解析html以构建dom树 -> 构建render树 -> 布局render树 -> 绘制render树\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/38366570-file_1493898167656_1903.png)\n</div>\n\n浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。\n解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。\nDOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。\n页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/44989213-file_1493898167774_52cc.png)\n</div>\n\n当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。\nJS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。\nJS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里\n\n## 浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等) ##\n\n----------\n\n其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：\n图片：http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif\nCSS式样表：http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css\nJavaScript 文件：http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js\n这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等...\n不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中\n\n\n-----------------分割线-----------------\n\t\n\t参考文献：\n\thttps://segmentfault.com/a/1190000006879700  \n\thttp://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/\n\thttp://zrj.me/archives/589  \n","source":"_posts/What-Happened.md","raw":"---\ntitle: 从输入url到页面展示到底发生了什么\ndate: 2017-05-05 16:10:57\ncategories: 计算机网络\ntags: 计算机网络\ndescription: 网上搜索“从输入url到页面展示到底发生了什么”，你可以搜到一大堆的资料。并且面试这道题基本是必考题，本文的目的是通过输入url之后发生的事情来做知识的总结和扩展。\n---\n总的过程大致如下:\n\n## 输入地址 ##\n----------\n当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。\n\n## 浏览器查找域名的 IP 地址 ##\n----------\n1. 请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。\n2. 如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。\n3. 查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。\n4. 根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。\n5. 本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。\n6. 最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。\n下面这张图很完美的解释了这一过程：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/3425413-file_1493898166210_135e8.png)\n</div>\n\n知识扩展：\n1)什么是DNS？DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。\n通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。\n2)DNS查询的两种方式：递归查询和迭代查询\n1、递归解析\n当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/21533490-file_1493898166369_547a.png)\n</div>\n2、迭代解析\n当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/65167043-file_1493898166478_17f6.png)\n</div>\n3)DNS域名称空间的组织方式\n我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/56599982-file_1493898166589_100d6.png)\n</div>\n\n4)DNS负载均衡\n当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。\n\n## 浏览器向 web 服务器发送一个 HTTP 请求 ##\n----------\n拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024<端口<65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。\nTCP连接如图所示:\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/94580403-file_1493898166711_b57c.png)\n</div>\n```\nGET/sample.jspHTTP/1.1   Accept:image/gif.image/jpeg,*/*   \nAccept-Language:zh-cn   \nConnection:Keep-Alive   \nHost:localhost   \nUser-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)   \nAccept-Encoding:gzip,deflate   \n\nusername=jinqiao&password=1234\n```\n注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。\n（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1\n（2）请求头(Request Header)\n请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。\n```\nAccept:image/gif.image/jpeg.*/*   \nAccept-Language:zh-cn   \nConnection:Keep-Alive   \nHost:localhost   \nUser-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)   \nAccept-Encoding:gzip,deflate.\n```\n（3）请求正文\n请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：\n`username=jinqiao&password=1234`\n\n知识扩展：\n1）TCP三次握手第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；\n第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。\n第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。\n如图所示：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/8065937-file_1493898166838_66c.png)\n</div>\n2）为什需要三次握手？《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误” 书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接\n假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。\n3）TCP四次挥手\n第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。\n第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。\n第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。\n第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/94896276-file_1493898166949_43b1.png)\n</div>\n \n4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。\n\n## 服务器的永久重定向响应 ##\n\n----------\n\n服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“http://www.google.com/” 而非“http://google.com/”。\n为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像http://www.yy.com/和http://yy.com/ ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。\n\n**扩展知识**\n\n**1）301和302的区别。**\n301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。\n他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；\n302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301\n\n**2）重定向原因：**\n（1）网站调整（如改变网页目录结构）；\n（2）网页被移到一个新地址；\n（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。\n这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。\n \n**3）什么时候进行301或者302跳转呢？** \n当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。\n清晰明确而言：使用301跳转的大概场景如下：\n1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。\n2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。\n3、空间服务器不稳定，换空间的时候。\n\n## 浏览器跟踪重定向地址 ##\n\n----------\n\n现在浏览器知道了 \"http://www.google.com/\"才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的\n\n## 服务器处理请求 ##\n\n----------\n\n经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？\n后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。\n一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。\n如图所示：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/30916238-file_1493898167189_17aa4.png)\n</div>\n通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。\n扩展阅读：1）什么是反向代理？客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/68445623-file_1493898167073_3261.png)\n</div>\n\n## 服务器返回一个HTTP响应 ##\n\n----------\n\n经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。\nHTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：\n| 状态行\n| 响应头(Response Header)\n| 响应正文\n```\nHTTP/1.1 200 OK   \nDate: Sat, 31 Dec 2005 23:59:59 GMT   \nContent-Type: text/html;charset=ISO-8859-1   Content-Length: 122   ＜html＞   \n＜head＞   \n＜title＞http＜/title＞   \n＜/head＞   \n＜body＞   \n＜!-- body goes here --＞   \n＜/body＞   \n＜/html＞\n```\n\n**状态行：**\n状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。\n格式:    HTTP-Version Status-Code Reason-Phrase CRLF\n例如:    HTTP/1.1 200 OK \\r\\n\n-- **协议版本**：是用http1.0还是其他版本\n-- **状态描述**：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok\n-- **状态代码**：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下\n**1xx**：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。\n100 Continue\n101 Switching Protocols\n**2xx**：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功\n204 No Content 成功，但不返回任何实体的主体部分\n206 Partial Content 成功执行了一个范围（Range）请求\n**3xx**：重定向状态码，表示服务器要求客户端重定向。\n301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL\n302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源\n303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源\n304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存\n307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现\n**4xx**：客户端错误状态码，表示客户端的请求有非法内容。\n400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解\n401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用\n403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因\n404 Not Found 请求的资源不存在，例如，输入了错误的URL\n**5xx**：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。\n500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求\n503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常\n**响应头**：\n响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号\":\"分隔，典型的响应头有：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/64055094-file_1493898167331_125a.png)\n</div>\n**响应正文**\n包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/80493969-file_1493898167532_eec7.png)\n</div>\n\n## 浏览器显示 HTML ##\n\n----------\n\n在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：\n解析html以构建dom树 -> 构建render树 -> 布局render树 -> 绘制render树\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/38366570-file_1493898167656_1903.png)\n</div>\n\n浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。\n解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。\nDOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。\n页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。\n<div align=center>\n![](http://opf32dlts.bkt.clouddn.com/17-5-4/44989213-file_1493898167774_52cc.png)\n</div>\n\n当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。\nJS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。\nJS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里\n\n## 浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等) ##\n\n----------\n\n其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：\n图片：http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif\nCSS式样表：http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css\nJavaScript 文件：http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js\n这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等...\n不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中\n\n\n-----------------分割线-----------------\n\t\n\t参考文献：\n\thttps://segmentfault.com/a/1190000006879700  \n\thttp://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/\n\thttp://zrj.me/archives/589  \n","slug":"What-Happened","published":1,"updated":"2017-05-05T13:11:33.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o6o000jpoc5tw8nprf3","content":"<p>总的过程大致如下:</p>\n<h2 id=\"输入地址\"><a href=\"#输入地址\" class=\"headerlink\" title=\"输入地址\"></a>输入地址</h2><hr>\n<p>当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。</p>\n<h2 id=\"浏览器查找域名的-IP-地址\"><a href=\"#浏览器查找域名的-IP-地址\" class=\"headerlink\" title=\"浏览器查找域名的 IP 地址\"></a>浏览器查找域名的 IP 地址</h2><hr>\n<ol>\n<li>请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。</li>\n<li>如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</li>\n<li>查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</li>\n<li>根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</li>\n<li>本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。</li>\n<li>最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。<br>下面这张图很完美的解释了这一过程：<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/3425413-file_1493898166210_135e8.png\" alt=\"\"><br></div>\n\n</li>\n</ol>\n<p>知识扩展：<br>1)什么是DNS？DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。<br>通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。<br>2)DNS查询的两种方式：递归查询和迭代查询<br>1、递归解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/21533490-file_1493898166369_547a.png\" alt=\"\"><br></div><br>2、迭代解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/65167043-file_1493898166478_17f6.png\" alt=\"\"><br></div><br>3)DNS域名称空间的组织方式<br>我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/56599982-file_1493898166589_100d6.png\" alt=\"\"><br></div>\n\n<p>4)DNS负载均衡<br>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p>\n<h2 id=\"浏览器向-web-服务器发送一个-HTTP-请求\"><a href=\"#浏览器向-web-服务器发送一个-HTTP-请求\" class=\"headerlink\" title=\"浏览器向 web 服务器发送一个 HTTP 请求\"></a>浏览器向 web 服务器发送一个 HTTP 请求</h2><hr>\n<p>拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。<br>TCP连接如图所示:</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/94580403-file_1493898166711_b57c.png\" alt=\"\"><br></div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET/sample.jspHTTP/1.1   Accept:image/gif.image/jpeg,*/*   </div><div class=\"line\">Accept-Language:zh-cn   </div><div class=\"line\">Connection:Keep-Alive   </div><div class=\"line\">Host:localhost   </div><div class=\"line\">User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)   </div><div class=\"line\">Accept-Encoding:gzip,deflate   </div><div class=\"line\"></div><div class=\"line\">username=jinqiao&amp;password=1234</div></pre></td></tr></table></figure><br><br>注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。<br>（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1<br>（2）请求头(Request Header)<br>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:image/gif.image/jpeg.*/*   </div><div class=\"line\">Accept-Language:zh-cn   </div><div class=\"line\">Connection:Keep-Alive   </div><div class=\"line\">Host:localhost   </div><div class=\"line\">User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)   </div><div class=\"line\">Accept-Encoding:gzip,deflate.</div></pre></td></tr></table></figure><br><br>（3）请求正文<br>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：<br><code>username=jinqiao&amp;password=1234</code><br><br>知识扩展：<br>1）TCP三次握手第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；<br>第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。<br>第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。<br>如图所示：<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/8065937-file_1493898166838_66c.png\" alt=\"\"><br></div><br>2）为什需要三次握手？《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误” 书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接<br>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。<br>3）TCP四次挥手<br>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。<br>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。<br>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。<br>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/94896276-file_1493898166949_43b1.png\" alt=\"\"><br></div>\n\n<p>4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>\n<h2 id=\"服务器的永久重定向响应\"><a href=\"#服务器的永久重定向响应\" class=\"headerlink\" title=\"服务器的永久重定向响应\"></a>服务器的永久重定向响应</h2><hr>\n<p>服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“<a href=\"http://www.google.com/”\" target=\"_blank\" rel=\"external\">http://www.google.com/”</a> 而非“<a href=\"http://google.com/”。\" target=\"_blank\" rel=\"external\">http://google.com/”。</a><br>为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像<a href=\"http://www.yy.com/和http://yy.com/\" target=\"_blank\" rel=\"external\">http://www.yy.com/和http://yy.com/</a> ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</p>\n<p><strong>扩展知识</strong></p>\n<p><strong>1）301和302的区别。</strong><br>301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。<br>他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；<br>302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301</p>\n<p><strong>2）重定向原因：</strong><br>（1）网站调整（如改变网页目录结构）；<br>（2）网页被移到一个新地址；<br>（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。<br>这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p>\n<p><strong>3）什么时候进行301或者302跳转呢？</strong><br>当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。<br>清晰明确而言：使用301跳转的大概场景如下：<br>1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>3、空间服务器不稳定，换空间的时候。</p>\n<h2 id=\"浏览器跟踪重定向地址\"><a href=\"#浏览器跟踪重定向地址\" class=\"headerlink\" title=\"浏览器跟踪重定向地址\"></a>浏览器跟踪重定向地址</h2><hr>\n<p>现在浏览器知道了 “<a href=\"http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的\" target=\"_blank\" rel=\"external\">http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的</a></p>\n<h2 id=\"服务器处理请求\"><a href=\"#服务器处理请求\" class=\"headerlink\" title=\"服务器处理请求\"></a>服务器处理请求</h2><hr>\n<p>经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？<br>后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。<br>一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。<br>如图所示：</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/30916238-file_1493898167189_17aa4.png\" alt=\"\"><br></div><br>通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。<br>扩展阅读：1）什么是反向代理？客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/68445623-file_1493898167073_3261.png\" alt=\"\"><br></div>\n\n<h2 id=\"服务器返回一个HTTP响应\"><a href=\"#服务器返回一个HTTP响应\" class=\"headerlink\" title=\"服务器返回一个HTTP响应\"></a>服务器返回一个HTTP响应</h2><hr>\n<p>经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。<br>HTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：<br>| 状态行<br>| 响应头(Response Header)<br>| 响应正文<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK   </div><div class=\"line\">Date: Sat, 31 Dec 2005 23:59:59 GMT   </div><div class=\"line\">Content-Type: text/html;charset=ISO-8859-1   Content-Length: 122   ＜html＞   </div><div class=\"line\">＜head＞   </div><div class=\"line\">＜title＞http＜/title＞   </div><div class=\"line\">＜/head＞   </div><div class=\"line\">＜body＞   </div><div class=\"line\">＜!-- body goes here --＞   </div><div class=\"line\">＜/body＞   </div><div class=\"line\">＜/html＞</div></pre></td></tr></table></figure></p>\n<p><strong>状态行：</strong><br>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。<br>格式:    HTTP-Version Status-Code Reason-Phrase CRLF<br>例如:    HTTP/1.1 200 OK \\r\\n<br>– <strong>协议版本</strong>：是用http1.0还是其他版本<br>– <strong>状态描述</strong>：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok<br>– <strong>状态代码</strong>：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下<br><strong>1xx</strong>：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。<br>100 Continue<br>101 Switching Protocols<br><strong>2xx</strong>：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功<br>204 No Content 成功，但不返回任何实体的主体部分<br>206 Partial Content 成功执行了一个范围（Range）请求<br><strong>3xx</strong>：重定向状态码，表示服务器要求客户端重定向。<br>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL<br>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源<br>303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源<br>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存<br>307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现<br><strong>4xx</strong>：客户端错误状态码，表示客户端的请求有非法内容。<br>400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解<br>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用<br>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因<br>404 Not Found 请求的资源不存在，例如，输入了错误的URL<br><strong>5xx</strong>：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。<br>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求<br>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常<br><strong>响应头</strong>：<br>响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头有：</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/64055094-file_1493898167331_125a.png\" alt=\"\"><br></div><br><strong>响应正文</strong><br>包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/80493969-file_1493898167532_eec7.png\" alt=\"\"><br></div>\n\n<h2 id=\"浏览器显示-HTML\"><a href=\"#浏览器显示-HTML\" class=\"headerlink\" title=\"浏览器显示 HTML\"></a>浏览器显示 HTML</h2><hr>\n<p>在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：<br>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/38366570-file_1493898167656_1903.png\" alt=\"\"><br></div>\n\n<p>浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。<br>解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。<br>DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。<br>页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/44989213-file_1493898167774_52cc.png\" alt=\"\"><br></div>\n\n<p>当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。<br>JS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。<br>JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里</p>\n<h2 id=\"浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等\"><a href=\"#浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等\" class=\"headerlink\" title=\"浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等)\"></a>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等)</h2><hr>\n<p>其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：<br>图片：<a href=\"http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif\" target=\"_blank\" rel=\"external\">http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif</a><br>CSS式样表：<a href=\"http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css\" target=\"_blank\" rel=\"external\">http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css</a><br>JavaScript 文件：<a href=\"http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js\" target=\"_blank\" rel=\"external\">http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js</a><br>这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…<br>不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中</p>\n<p>—————–分割线—————–</p>\n<pre><code>参考文献：\nhttps://segmentfault.com/a/1190000006879700  \nhttp://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/\nhttp://zrj.me/archives/589  \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>总的过程大致如下:</p>\n<h2 id=\"输入地址\"><a href=\"#输入地址\" class=\"headerlink\" title=\"输入地址\"></a>输入地址</h2><hr>\n<p>当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。</p>\n<h2 id=\"浏览器查找域名的-IP-地址\"><a href=\"#浏览器查找域名的-IP-地址\" class=\"headerlink\" title=\"浏览器查找域名的 IP 地址\"></a>浏览器查找域名的 IP 地址</h2><hr>\n<ol>\n<li>请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。</li>\n<li>如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</li>\n<li>查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</li>\n<li>根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。</li>\n<li>本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。</li>\n<li>最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。<br>下面这张图很完美的解释了这一过程：<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/3425413-file_1493898166210_135e8.png\" alt=\"\"><br></div>\n\n</li>\n</ol>\n<p>知识扩展：<br>1)什么是DNS？DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。<br>通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。<br>2)DNS查询的两种方式：递归查询和迭代查询<br>1、递归解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/21533490-file_1493898166369_547a.png\" alt=\"\"><br></div><br>2、迭代解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/65167043-file_1493898166478_17f6.png\" alt=\"\"><br></div><br>3)DNS域名称空间的组织方式<br>我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/56599982-file_1493898166589_100d6.png\" alt=\"\"><br></div>\n\n<p>4)DNS负载均衡<br>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p>\n<h2 id=\"浏览器向-web-服务器发送一个-HTTP-请求\"><a href=\"#浏览器向-web-服务器发送一个-HTTP-请求\" class=\"headerlink\" title=\"浏览器向 web 服务器发送一个 HTTP 请求\"></a>浏览器向 web 服务器发送一个 HTTP 请求</h2><hr>\n<p>拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。<br>TCP连接如图所示:</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/94580403-file_1493898166711_b57c.png\" alt=\"\"><br></div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET/sample.jspHTTP/1.1   Accept:image/gif.image/jpeg,*/*   </div><div class=\"line\">Accept-Language:zh-cn   </div><div class=\"line\">Connection:Keep-Alive   </div><div class=\"line\">Host:localhost   </div><div class=\"line\">User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)   </div><div class=\"line\">Accept-Encoding:gzip,deflate   </div><div class=\"line\"></div><div class=\"line\">username=jinqiao&amp;password=1234</div></pre></td></tr></table></figure><br><br>注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。<br>（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1<br>（2）请求头(Request Header)<br>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:image/gif.image/jpeg.*/*   </div><div class=\"line\">Accept-Language:zh-cn   </div><div class=\"line\">Connection:Keep-Alive   </div><div class=\"line\">Host:localhost   </div><div class=\"line\">User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)   </div><div class=\"line\">Accept-Encoding:gzip,deflate.</div></pre></td></tr></table></figure><br><br>（3）请求正文<br>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：<br><code>username=jinqiao&amp;password=1234</code><br><br>知识扩展：<br>1）TCP三次握手第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；<br>第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。<br>第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。<br>如图所示：<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/8065937-file_1493898166838_66c.png\" alt=\"\"><br></div><br>2）为什需要三次握手？《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误” 书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接<br>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。<br>3）TCP四次挥手<br>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。<br>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。<br>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。<br>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/94896276-file_1493898166949_43b1.png\" alt=\"\"><br></div>\n\n<p>4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>\n<h2 id=\"服务器的永久重定向响应\"><a href=\"#服务器的永久重定向响应\" class=\"headerlink\" title=\"服务器的永久重定向响应\"></a>服务器的永久重定向响应</h2><hr>\n<p>服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问“<a href=\"http://www.google.com/”\" target=\"_blank\" rel=\"external\">http://www.google.com/”</a> 而非“<a href=\"http://google.com/”。\" target=\"_blank\" rel=\"external\">http://google.com/”。</a><br>为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像<a href=\"http://www.yy.com/和http://yy.com/\" target=\"_blank\" rel=\"external\">http://www.yy.com/和http://yy.com/</a> ，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</p>\n<p><strong>扩展知识</strong></p>\n<p><strong>1）301和302的区别。</strong><br>301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。<br>他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；<br>302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301</p>\n<p><strong>2）重定向原因：</strong><br>（1）网站调整（如改变网页目录结构）；<br>（2）网页被移到一个新地址；<br>（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。<br>这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p>\n<p><strong>3）什么时候进行301或者302跳转呢？</strong><br>当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。<br>清晰明确而言：使用301跳转的大概场景如下：<br>1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>3、空间服务器不稳定，换空间的时候。</p>\n<h2 id=\"浏览器跟踪重定向地址\"><a href=\"#浏览器跟踪重定向地址\" class=\"headerlink\" title=\"浏览器跟踪重定向地址\"></a>浏览器跟踪重定向地址</h2><hr>\n<p>现在浏览器知道了 “<a href=\"http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的\" target=\"_blank\" rel=\"external\">http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的</a></p>\n<h2 id=\"服务器处理请求\"><a href=\"#服务器处理请求\" class=\"headerlink\" title=\"服务器处理请求\"></a>服务器处理请求</h2><hr>\n<p>经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？<br>后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。<br>一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。<br>如图所示：</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/30916238-file_1493898167189_17aa4.png\" alt=\"\"><br></div><br>通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。<br>扩展阅读：1）什么是反向代理？客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/68445623-file_1493898167073_3261.png\" alt=\"\"><br></div>\n\n<h2 id=\"服务器返回一个HTTP响应\"><a href=\"#服务器返回一个HTTP响应\" class=\"headerlink\" title=\"服务器返回一个HTTP响应\"></a>服务器返回一个HTTP响应</h2><hr>\n<p>经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。<br>HTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：<br>| 状态行<br>| 响应头(Response Header)<br>| 响应正文<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK   </div><div class=\"line\">Date: Sat, 31 Dec 2005 23:59:59 GMT   </div><div class=\"line\">Content-Type: text/html;charset=ISO-8859-1   Content-Length: 122   ＜html＞   </div><div class=\"line\">＜head＞   </div><div class=\"line\">＜title＞http＜/title＞   </div><div class=\"line\">＜/head＞   </div><div class=\"line\">＜body＞   </div><div class=\"line\">＜!-- body goes here --＞   </div><div class=\"line\">＜/body＞   </div><div class=\"line\">＜/html＞</div></pre></td></tr></table></figure></p>\n<p><strong>状态行：</strong><br>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。<br>格式:    HTTP-Version Status-Code Reason-Phrase CRLF<br>例如:    HTTP/1.1 200 OK \\r\\n<br>– <strong>协议版本</strong>：是用http1.0还是其他版本<br>– <strong>状态描述</strong>：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok<br>– <strong>状态代码</strong>：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下<br><strong>1xx</strong>：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。<br>100 Continue<br>101 Switching Protocols<br><strong>2xx</strong>：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功<br>204 No Content 成功，但不返回任何实体的主体部分<br>206 Partial Content 成功执行了一个范围（Range）请求<br><strong>3xx</strong>：重定向状态码，表示服务器要求客户端重定向。<br>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL<br>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源<br>303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源<br>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存<br>307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现<br><strong>4xx</strong>：客户端错误状态码，表示客户端的请求有非法内容。<br>400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解<br>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用<br>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因<br>404 Not Found 请求的资源不存在，例如，输入了错误的URL<br><strong>5xx</strong>：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。<br>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求<br>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常<br><strong>响应头</strong>：<br>响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头有：</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/64055094-file_1493898167331_125a.png\" alt=\"\"><br></div><br><strong>响应正文</strong><br>包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：<br><div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/80493969-file_1493898167532_eec7.png\" alt=\"\"><br></div>\n\n<h2 id=\"浏览器显示-HTML\"><a href=\"#浏览器显示-HTML\" class=\"headerlink\" title=\"浏览器显示 HTML\"></a>浏览器显示 HTML</h2><hr>\n<p>在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：<br>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/38366570-file_1493898167656_1903.png\" alt=\"\"><br></div>\n\n<p>浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。<br>解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。<br>DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。<br>页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>\n<div align=\"center\"><br><img src=\"http://opf32dlts.bkt.clouddn.com/17-5-4/44989213-file_1493898167774_52cc.png\" alt=\"\"><br></div>\n\n<p>当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。<br>JS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。<br>JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里</p>\n<h2 id=\"浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等\"><a href=\"#浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等\" class=\"headerlink\" title=\"浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等)\"></a>浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等)</h2><hr>\n<p>其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：<br>图片：<a href=\"http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif\" target=\"_blank\" rel=\"external\">http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif</a><br>CSS式样表：<a href=\"http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css\" target=\"_blank\" rel=\"external\">http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css</a><br>JavaScript 文件：<a href=\"http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js\" target=\"_blank\" rel=\"external\">http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js</a><br>这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…<br>不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中</p>\n<p>—————–分割线—————–</p>\n<pre><code>参考文献：\nhttps://segmentfault.com/a/1190000006879700  \nhttp://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/\nhttp://zrj.me/archives/589  \n</code></pre>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-05T12:50:02.285Z","updated":"2017-05-05T12:50:02.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o6o000npoc5p90rir8d","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"正则表达式（JavaScript）","date":"2017-02-08T15:29:50.000Z","description":"JavaScript中的正则表达式的使用。","_content":"\n> 注：由于markdown语法问题，没找到好的解决办法，文中正则表达式中的'|'使用[or]代替。\n\n# 1. 了解正则表达式\n## 1.1. 什么是正则表达式\n正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。\n- 列出目录时，dir *.txt 或 ls *.txt 中的 *.txt 就不是一个正则表达式,因为这里 * 与正则式的 * 的含义是不同的。\n- 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。\n\n正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为\"元字符\"）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。\n## 1.2. 常用的正则表达式匹配工具\n- 在线匹配工具：\n\t1. [http://www.regexper.com](http://www.regexper.com \"www.regexper.com\")\n\t2. [www.regexpal.com](www.regexpal.com)\n\t3. [www.rubular.com](www.rubular.com)\n- 正则匹配软件：\n\t[McTracer](http://pan.baidu.com/s/1nvPmwuH)\n\n# 2. 正则表达式语法\n## 2.1. 创建正则表达式\n我们有两种方式构造正则表达式：\n1. 使用RegExp对象构造函数构造一个正则表达式对象。\n`var reg = new RegExp(\"abc\");`\n2. 使用斜杠(/)字符将模式包围起来，生成一个字面值。\n`var reg = /abc/;`\n## 2.2. 元字符\n\n>正则表达式由两种基本字符类型组成：\n>- 原义文本字符\n>- 元字符 \n\n元字符是指在正则表达式中有特殊含义的非字母字符，下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：\n\n| 字符      \t|     描述  \t|\n| :-------- | :-------- |\n| \\\t        | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 \"n\"。'\\n' 匹配一个换行符。序列 '\\\\' 匹配 \"\\\" 而 \"\\(\" 则匹配 \"(\"。 |\n| ^\t        | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。|\n| $\t        | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 '\\n' 或 '\\r' 之前的位置。 | \n| `*`\t\t| 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。 |\n| +\t        | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。|\n| ?\t        | 匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 中的\"do\" 。? 等价于 {0,1}。|\n| {n}\t    | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。|\n| {n,}\t    | n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。|\n| {n,m}\t    | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，\"o{1,3}\" 将匹配 \"fooooood\" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。|\n| ?\t        | 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 \"oooo\"，'o+?' 将匹配单个 \"o\"，而 'o+' 将匹配所有 'o'。|\n| .\t        | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像\"(.[or]\\n)\"的模式。|\n| (pattern)\t| 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\\(' 或 '\\)'。|\n| (?:pattern)| 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 \"或\" 字符 ([or]) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y[or]ies) 就是一个比 'industry[or]industries' 更简略的表达式。|\n| (?=pattern)| 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95[or]98[or]NT[or]2000)' 能匹配 \"Windows 2000\" 中的 \"Windows\" ，但不能匹配 \"Windows 3.1\" 中的 \"Windows\"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。|\n| (?!pattern)| 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95[or]98[or]NT[or]2000)' 能匹配 \"Windows 3.1\" 中的 \"Windows\"，但不能匹配 \"Windows 2000\" 中的 \"Windows\"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。|\n|  x[or]y\t\t|匹配 x 或 y。例如，'z[or]food' 能匹配 \"z\" 或 \"food\"。'(z[or]f)ood' 则匹配 \"zood\" 或 \"food\"。|\n| [xyz]  \t|字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。|\n| [^xyz]  \t|负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'、'l'、'i'、'n'。|\n| [a-z]\t    |字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。|\n| [^a-z]  \t|负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。|\n| \\b     \t|匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。|\n| \\B     \t|匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。|\n| \\cx    \t|匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。|\n| \\d     \t|匹配一个数字字符。等价于 [0-9]。|\n| \\D     \t|匹配一个非数字字符。等价于 [^0-9]。|\n| \\f     \t|匹配一个换页符。等价于 \\x0c 和 \\cL。|\n| \\n     \t|匹配一个换行符。等价于 \\x0a 和 \\cJ。|\n| \\r \t    |匹配一个回车符。等价于 \\x0d 和 \\cM。|\n| \\s     \t|匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\ f\\n\\r\\t\\v]。|\n| \\S     \t|匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。|\n| \\t     \t|匹配一个制表符。等价于 \\x09 和 \\cI。|\n| \\v     \t|匹配一个垂直制表符。等价于 \\x0b 和 \\cK。|\n| \\w\t    |匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。|\n| \\W     \t|匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。|\n| \\xn    \t|匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长例如，'\\x41' 匹配 \"A\"。'\\x041' 则等价于 '\\x04' & \"1\"。正则表达式中可以使用 ASCII 编码。|\n| \\num   \t|匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\\1' 匹配两个连续的相同字符。|\n| \\n     \t|标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。|\n| \\nm    \t|标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。|\n| \\nml\t    |如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。|\n| \\un    \t|匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， |\n| \\u00A9    |匹配版权符号 (?)。|\n\n## 2.3. 字符类和范围类以及边界\n我们要取某一类字符的时候可以使用中括号加字符的形式，例如：[abc]匹配中括号中内元素的字符，比如可以匹配\"plain\"中的'a'。\n正则表达式还提供了范围类，我们可以使用[a-z]匹配a到z的字符，如果想要匹配所有的大小写字母，则可以用[a-zA-Z]。\n>在中括号中使用^表示取反，例如[^a-z]匹配不在a-z范围内的字符。但是用在正则表达式中表示匹配输入字符串的起始位置。\n\n正则表达式给我们提供了一些预定义类来方便我们的使用，例如.、\\d、\\w、\\s等，具体用法见上表。\n正则表达式还提供了几个常用的边界匹配符，如下：\n\n| 字符      \t|     含义   |\n| :-------- | :--------  |\n| ^\t        | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。|\n| $\t        | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 '\\n' 或 '\\r' 之前的位置。 | \n| \\b     \t|匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。|\n| \\B     \t|匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。|\n## 2.4. 量词\n先解释三个概念\n>- 贪婪(贪心) 如\"*\"字符 贪婪量词会首先匹配整个字符串，尝试匹配时，它会选定尽可能多的内容，如果 失败则回退一个字符，然后再次尝试回退的过程就叫做回溯，它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。相比其他两种贪婪量词对资源的消耗是最大的。\n>- 懒惰(勉强) 如 \"?\"  懒惰量词使用另一种方式匹配，它从目标的起始位置开始尝试匹配，每次检查一个字符，并寻找它要匹配的内容，如此循环直到字符结尾处。\n>- 占有  如\"+\" 占有量词会覆盖事个目标字符串，然后尝试寻找匹配内容 ，但它只尝试一次，不会回溯，就好比先抓一把石头，然后从石头中挑出黄金。\n\n常用的量词有:\n\n| 字符      |     含义 |\n| :-------- | :--------|\n| *\t\t\t| 匹配前面的子表达式零次或多次。(贪婪)|\n| +\t        | 匹配前面的子表达式一次或多次。(懒惰)|\n| ?\t        | 匹配前面的子表达式零次或一次。(占有)|\n| {n}\t    | n 是一个非负整数。匹配确定的 n 次。|\n| {n,}\t    | n 是一个非负整数。至少匹配n 次。   |\n| {n,m}\t    | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。|\n>**正则表达式默认为贪婪模式，尽可能多的去匹配，如果想要让正则表达式尽可能少的匹配，则需要用到\"?\"**。\n>当\"?\"紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 \"oooo\"，'o+?' 将匹配单个 \"o\"，而 'o+' 将匹配所有 'o'。\n\n>| 字符      |     含义 |\n>| :-------- | :--------|\n>| *?          |  重复任意次，但尽可能少重复   |\n>| +?         |  重复1次或更多次，但尽可能少重复 |  \n>| ??          | 重复0次或1次，但尽可能少重复 |\n>| {n,m}?   | 重复n到m次，但尽可能少重复 |\n>| {n,}?      | 重复n次以上，但尽可能少重复 |\n\n# 3. 正则表达式进阶\n## 3.1. 分组和或\n正则表达式中正常情况下量词只对前一个字符或字符类起作用，如果想让他对固定的字符串起作用，就需要分组。分组其实就是一个括号里的内容，可以使量词作用于分组，例如/(tristan){1,3}/括号中就是一个分组。\n\n\"或\"的概念就是匹配一个字符串或者另一个字符串，用\"[or]\"表示，例如/Tristan [or] Henry/，没有分组的情况下或作用于字符串，有分组的情况下或作用于分组，例如/Trist(an [or] He)nry/。\n\n反向引用，当我们替换或者其他操作需要前面引用替换的字符串时，可以使用\"$\"符号依次得到匹配的分组的字符串。例如，将\"2017-02-08\"替换为\"02/08/2017\"，需要替换的字符串不可能是一成不变的，所以需要使用反向引用，方法为：\n`'2017-02-08'.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g, '$2/$3$1')`;\n![](http://i1.piimg.com/567571/41c1186668cad5f4.png)\n\n关于分组常有的用法如下：\n\n| 字符      |     含义 |\n| :-------- | :--------|\n| (exp)\t\t| 匹配exp,并捕获文本到自动命名的组里 |\n| (?<\\name>exp)| 匹配exp,并捕获文本到名称为name的组里 |\n| (?:exp)\t| 匹配exp,不捕获匹配的文本，也不给此分组分配组号<br>![](http://i1.piimg.com/567571/cb7f7aca0008884b.png)|\n\n## 3.2 前瞻\n>正则表达式从文本头部向尾部开始解析，文本尾部方向成为前。\n\n前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾/后瞻方向相反。JavaScript不支持后顾。\n符合和不符合特定断言成为肯定/正向匹配和否定/负向匹配。\n\n| 名称       | 正则      |  含义    |\n| :-------- | :-------- | :------ |\n| 正向前瞻\t| exp(?=assert) | 前面正则表达式匹配并且后面符合断言<br>![](http://i1.piimg.com/567571/778c12d8755dc987.png)| \n| 负向前瞻\t| exp(?!assert) | 前面正则表达式匹配并且后面不符合断言<br>![](http://i2.muimg.com/567571/787844d42aae11bd.png)|\n| 正向后顾\t| exp(?<=assert)| JavaScript不支持 |\n| 负向后顾\t| exp(?<!assert)| JavaScript不支持 |\n\n# 4. JavaScript中的正则表达式\n## 4.1. 对象属性\n- **global**: 是否全局搜索，默认为false(只读)；\n- **ignoreCase**: 是否大小写敏感，默认为false(只读)；\n- **multiline**: 是否多行搜索，默认为false(只读)；\n- **lastIndex**: 是当前表达式匹配内容的最后一个字符的下一个位置，当正则表达式启用了全局(g)并且使用exec匹配模式时可以使用；\n- **source**: 正则表达式的文本字符串；\n\n## 4.2. test和exec方法\n1. RegExp.prototype.test(str):\n- 用于检测字符串参数中是否存在匹配正则表达式模式的字符串\n- 如果存在则返回true，否则返回false\n\n>**注意：正则表达式为全局搜索时，会出现多次执行结果不一致问题，原因为全局搜索模式下，每次执行方法会在lastIndex属性的位置开始搜索，而lastIndex属性随着每次搜索而改变，这样在匹配完最后一个匹配结果后剩下的字符串就没有了匹配结果，test方法就会返回false。所以test方法尽量不要用全局搜索(非全局下lastIndex不生效)。**\n\n2. RegExp.prototype.exec(str):\n- 使用正则表达式模式对字符串执行搜索，并更新全局RegExp对象的属性以反映匹配结果。\n- 如果没有匹配的文本则返回null，否则返回一个结果数组:\n\t\\- **index** 声明匹配文本的第一个字符的位置\n\t\\- **input** 存放被检索的字符串string\n\n调用非全局的RegExp对象的exec()时，返回数组:\n- 第一个元素是与正则表达式相匹配的文本\n\t- 第二个元素是与RegExpObject的第一个子表达式(**一个分组**)匹配的文本（如果有的话）\n\t- 第三个元素是与RegExpObject的第二个子表达式(**一个分组**)相匹配的文本（如果有的话），以此类推\n\n调用全局的RegExp对象的exec()时，可以循环得到所有的匹配字符串。\n\n## 4.3. 字符串对象方法\n1. String.protatype.search(reg):\n- 检索字符串中是否有指定子字符串，或是否有与正则表达式相匹配的子字符串\n- 方法返回第一个匹配结果的index，没有匹配返回-1\n- 方法不执行全局匹配，它忽略标志g，并且总是从字符串的开始进行检索\n\n2. String.protatype.match(reg):\n- match()方法将检索字符串，以找到一个或多个与reg匹配的字符串\n- reg是否具有标志g对结果影响很大\n\n如果reg没有标志g，那么march()方法就只能在字符串中执行一次匹配，如果没有找到匹配文本返回null，否则返回一个数组，其中存放了与他找到的匹配文本有关的信息：\n- 第一个元素存放的是匹配文本，其余元素存放的是与正则表达式的子表达式匹配的文本\n- 数组还含有两个对象属性：**index** 和**input**\n\n如果reg具有标志g，则march()方法将执行全局检索，找到字符串中的所有匹配子字符串，如果没有找到任何匹配的子串，返回null；如果找到了一个或多个匹配子串，则返回一个数组，其中存放字符串中所有的匹配子串，而且没有index和input属性。\n\n3. String.protatype.split(reg):\n以reg为界限将字符串分割为一个字符串数组。\n\n4. String.protatype.replace:\n将一个字符串中的一部分替换成另一个字符串。\n- String.protatype.replace(str, replaceStr)\n- String.protatype.replace(reg, replaceStr)\n- String.protatype.replace(reg, function)\nfunction中参数的定义：\n\t1. 匹配的字符串\n\t2. 正则表达式分组的内容，没有分组则没有该参数\n\t3. 匹配项在字符串中的index\n\t4. 原字符串\n``` javascript\n 'a1b2c3d4e5'.replace(/(\\d)(\\w)(\\d)/g, function(match, group1, group2, group3, index, origin){\n\t return parseInt(group1) + parseInt(group3);\n });\n```\n\n# 5. 正则表达式示例\n\n| 正则表达式   |    描述   |\n| :--------   | :------   |\n| `/\\b([a-z]+) \\1\\b/gi` |  一个单词连续出现的位置。|\n| `/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/` | 将一个URL解析为协议、域、端口及相对路径。|\n| `/^(?:Chapter[or]Section) [1-9][0-9]{0,1}$/` | 定位章节的位置。 |\n| `/<\\s*(\\S+)(\\s[^>]*)?>[\\s\\S]*<\\s*\\/\\1\\s*>/` | 匹配 HTML 标记。|\n| `/^(((13[or]15[or]18)[0-9])[or]14[57][or]17[0134678])\\d{8}$/` | 匹配手机号码 |\n| `/^\\w+((-\\w+)[or](\\.\\w+))*\\@[A-Za-z0-9]+((\\.\\[or]-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/` | 匹配邮箱 |\n| `/(^\\d{15}\\$)[or](^\\d{18}\\$)[or](^\\d{17}(\\d[or]X[or]x)$)/` | 匹配身份证号 |","source":"_posts/regular-expression-for-JavaScript.md","raw":"---\ntitle: 正则表达式（JavaScript）\ndate: 2017-02-08 23:29:50\ncategories: JavaScript\ntags: \n\t-  正则表达式\n\t-  JavaScript\ndescription: JavaScript中的正则表达式的使用。\n---\n\n> 注：由于markdown语法问题，没找到好的解决办法，文中正则表达式中的'|'使用[or]代替。\n\n# 1. 了解正则表达式\n## 1.1. 什么是正则表达式\n正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。\n- 列出目录时，dir *.txt 或 ls *.txt 中的 *.txt 就不是一个正则表达式,因为这里 * 与正则式的 * 的含义是不同的。\n- 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。\n\n正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为\"元字符\"）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。\n## 1.2. 常用的正则表达式匹配工具\n- 在线匹配工具：\n\t1. [http://www.regexper.com](http://www.regexper.com \"www.regexper.com\")\n\t2. [www.regexpal.com](www.regexpal.com)\n\t3. [www.rubular.com](www.rubular.com)\n- 正则匹配软件：\n\t[McTracer](http://pan.baidu.com/s/1nvPmwuH)\n\n# 2. 正则表达式语法\n## 2.1. 创建正则表达式\n我们有两种方式构造正则表达式：\n1. 使用RegExp对象构造函数构造一个正则表达式对象。\n`var reg = new RegExp(\"abc\");`\n2. 使用斜杠(/)字符将模式包围起来，生成一个字面值。\n`var reg = /abc/;`\n## 2.2. 元字符\n\n>正则表达式由两种基本字符类型组成：\n>- 原义文本字符\n>- 元字符 \n\n元字符是指在正则表达式中有特殊含义的非字母字符，下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：\n\n| 字符      \t|     描述  \t|\n| :-------- | :-------- |\n| \\\t        | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 \"n\"。'\\n' 匹配一个换行符。序列 '\\\\' 匹配 \"\\\" 而 \"\\(\" 则匹配 \"(\"。 |\n| ^\t        | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。|\n| $\t        | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 '\\n' 或 '\\r' 之前的位置。 | \n| `*`\t\t| 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。 |\n| +\t        | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。|\n| ?\t        | 匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 中的\"do\" 。? 等价于 {0,1}。|\n| {n}\t    | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。|\n| {n,}\t    | n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。|\n| {n,m}\t    | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，\"o{1,3}\" 将匹配 \"fooooood\" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。|\n| ?\t        | 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 \"oooo\"，'o+?' 将匹配单个 \"o\"，而 'o+' 将匹配所有 'o'。|\n| .\t        | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像\"(.[or]\\n)\"的模式。|\n| (pattern)\t| 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\\(' 或 '\\)'。|\n| (?:pattern)| 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 \"或\" 字符 ([or]) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y[or]ies) 就是一个比 'industry[or]industries' 更简略的表达式。|\n| (?=pattern)| 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95[or]98[or]NT[or]2000)' 能匹配 \"Windows 2000\" 中的 \"Windows\" ，但不能匹配 \"Windows 3.1\" 中的 \"Windows\"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。|\n| (?!pattern)| 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95[or]98[or]NT[or]2000)' 能匹配 \"Windows 3.1\" 中的 \"Windows\"，但不能匹配 \"Windows 2000\" 中的 \"Windows\"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。|\n|  x[or]y\t\t|匹配 x 或 y。例如，'z[or]food' 能匹配 \"z\" 或 \"food\"。'(z[or]f)ood' 则匹配 \"zood\" 或 \"food\"。|\n| [xyz]  \t|字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。|\n| [^xyz]  \t|负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'、'l'、'i'、'n'。|\n| [a-z]\t    |字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。|\n| [^a-z]  \t|负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。|\n| \\b     \t|匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。|\n| \\B     \t|匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。|\n| \\cx    \t|匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。|\n| \\d     \t|匹配一个数字字符。等价于 [0-9]。|\n| \\D     \t|匹配一个非数字字符。等价于 [^0-9]。|\n| \\f     \t|匹配一个换页符。等价于 \\x0c 和 \\cL。|\n| \\n     \t|匹配一个换行符。等价于 \\x0a 和 \\cJ。|\n| \\r \t    |匹配一个回车符。等价于 \\x0d 和 \\cM。|\n| \\s     \t|匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\ f\\n\\r\\t\\v]。|\n| \\S     \t|匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。|\n| \\t     \t|匹配一个制表符。等价于 \\x09 和 \\cI。|\n| \\v     \t|匹配一个垂直制表符。等价于 \\x0b 和 \\cK。|\n| \\w\t    |匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。|\n| \\W     \t|匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。|\n| \\xn    \t|匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长例如，'\\x41' 匹配 \"A\"。'\\x041' 则等价于 '\\x04' & \"1\"。正则表达式中可以使用 ASCII 编码。|\n| \\num   \t|匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\\1' 匹配两个连续的相同字符。|\n| \\n     \t|标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。|\n| \\nm    \t|标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。|\n| \\nml\t    |如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。|\n| \\un    \t|匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， |\n| \\u00A9    |匹配版权符号 (?)。|\n\n## 2.3. 字符类和范围类以及边界\n我们要取某一类字符的时候可以使用中括号加字符的形式，例如：[abc]匹配中括号中内元素的字符，比如可以匹配\"plain\"中的'a'。\n正则表达式还提供了范围类，我们可以使用[a-z]匹配a到z的字符，如果想要匹配所有的大小写字母，则可以用[a-zA-Z]。\n>在中括号中使用^表示取反，例如[^a-z]匹配不在a-z范围内的字符。但是用在正则表达式中表示匹配输入字符串的起始位置。\n\n正则表达式给我们提供了一些预定义类来方便我们的使用，例如.、\\d、\\w、\\s等，具体用法见上表。\n正则表达式还提供了几个常用的边界匹配符，如下：\n\n| 字符      \t|     含义   |\n| :-------- | :--------  |\n| ^\t        | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。|\n| $\t        | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 '\\n' 或 '\\r' 之前的位置。 | \n| \\b     \t|匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。|\n| \\B     \t|匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。|\n## 2.4. 量词\n先解释三个概念\n>- 贪婪(贪心) 如\"*\"字符 贪婪量词会首先匹配整个字符串，尝试匹配时，它会选定尽可能多的内容，如果 失败则回退一个字符，然后再次尝试回退的过程就叫做回溯，它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。相比其他两种贪婪量词对资源的消耗是最大的。\n>- 懒惰(勉强) 如 \"?\"  懒惰量词使用另一种方式匹配，它从目标的起始位置开始尝试匹配，每次检查一个字符，并寻找它要匹配的内容，如此循环直到字符结尾处。\n>- 占有  如\"+\" 占有量词会覆盖事个目标字符串，然后尝试寻找匹配内容 ，但它只尝试一次，不会回溯，就好比先抓一把石头，然后从石头中挑出黄金。\n\n常用的量词有:\n\n| 字符      |     含义 |\n| :-------- | :--------|\n| *\t\t\t| 匹配前面的子表达式零次或多次。(贪婪)|\n| +\t        | 匹配前面的子表达式一次或多次。(懒惰)|\n| ?\t        | 匹配前面的子表达式零次或一次。(占有)|\n| {n}\t    | n 是一个非负整数。匹配确定的 n 次。|\n| {n,}\t    | n 是一个非负整数。至少匹配n 次。   |\n| {n,m}\t    | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。|\n>**正则表达式默认为贪婪模式，尽可能多的去匹配，如果想要让正则表达式尽可能少的匹配，则需要用到\"?\"**。\n>当\"?\"紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 \"oooo\"，'o+?' 将匹配单个 \"o\"，而 'o+' 将匹配所有 'o'。\n\n>| 字符      |     含义 |\n>| :-------- | :--------|\n>| *?          |  重复任意次，但尽可能少重复   |\n>| +?         |  重复1次或更多次，但尽可能少重复 |  \n>| ??          | 重复0次或1次，但尽可能少重复 |\n>| {n,m}?   | 重复n到m次，但尽可能少重复 |\n>| {n,}?      | 重复n次以上，但尽可能少重复 |\n\n# 3. 正则表达式进阶\n## 3.1. 分组和或\n正则表达式中正常情况下量词只对前一个字符或字符类起作用，如果想让他对固定的字符串起作用，就需要分组。分组其实就是一个括号里的内容，可以使量词作用于分组，例如/(tristan){1,3}/括号中就是一个分组。\n\n\"或\"的概念就是匹配一个字符串或者另一个字符串，用\"[or]\"表示，例如/Tristan [or] Henry/，没有分组的情况下或作用于字符串，有分组的情况下或作用于分组，例如/Trist(an [or] He)nry/。\n\n反向引用，当我们替换或者其他操作需要前面引用替换的字符串时，可以使用\"$\"符号依次得到匹配的分组的字符串。例如，将\"2017-02-08\"替换为\"02/08/2017\"，需要替换的字符串不可能是一成不变的，所以需要使用反向引用，方法为：\n`'2017-02-08'.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g, '$2/$3$1')`;\n![](http://i1.piimg.com/567571/41c1186668cad5f4.png)\n\n关于分组常有的用法如下：\n\n| 字符      |     含义 |\n| :-------- | :--------|\n| (exp)\t\t| 匹配exp,并捕获文本到自动命名的组里 |\n| (?<\\name>exp)| 匹配exp,并捕获文本到名称为name的组里 |\n| (?:exp)\t| 匹配exp,不捕获匹配的文本，也不给此分组分配组号<br>![](http://i1.piimg.com/567571/cb7f7aca0008884b.png)|\n\n## 3.2 前瞻\n>正则表达式从文本头部向尾部开始解析，文本尾部方向成为前。\n\n前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾/后瞻方向相反。JavaScript不支持后顾。\n符合和不符合特定断言成为肯定/正向匹配和否定/负向匹配。\n\n| 名称       | 正则      |  含义    |\n| :-------- | :-------- | :------ |\n| 正向前瞻\t| exp(?=assert) | 前面正则表达式匹配并且后面符合断言<br>![](http://i1.piimg.com/567571/778c12d8755dc987.png)| \n| 负向前瞻\t| exp(?!assert) | 前面正则表达式匹配并且后面不符合断言<br>![](http://i2.muimg.com/567571/787844d42aae11bd.png)|\n| 正向后顾\t| exp(?<=assert)| JavaScript不支持 |\n| 负向后顾\t| exp(?<!assert)| JavaScript不支持 |\n\n# 4. JavaScript中的正则表达式\n## 4.1. 对象属性\n- **global**: 是否全局搜索，默认为false(只读)；\n- **ignoreCase**: 是否大小写敏感，默认为false(只读)；\n- **multiline**: 是否多行搜索，默认为false(只读)；\n- **lastIndex**: 是当前表达式匹配内容的最后一个字符的下一个位置，当正则表达式启用了全局(g)并且使用exec匹配模式时可以使用；\n- **source**: 正则表达式的文本字符串；\n\n## 4.2. test和exec方法\n1. RegExp.prototype.test(str):\n- 用于检测字符串参数中是否存在匹配正则表达式模式的字符串\n- 如果存在则返回true，否则返回false\n\n>**注意：正则表达式为全局搜索时，会出现多次执行结果不一致问题，原因为全局搜索模式下，每次执行方法会在lastIndex属性的位置开始搜索，而lastIndex属性随着每次搜索而改变，这样在匹配完最后一个匹配结果后剩下的字符串就没有了匹配结果，test方法就会返回false。所以test方法尽量不要用全局搜索(非全局下lastIndex不生效)。**\n\n2. RegExp.prototype.exec(str):\n- 使用正则表达式模式对字符串执行搜索，并更新全局RegExp对象的属性以反映匹配结果。\n- 如果没有匹配的文本则返回null，否则返回一个结果数组:\n\t\\- **index** 声明匹配文本的第一个字符的位置\n\t\\- **input** 存放被检索的字符串string\n\n调用非全局的RegExp对象的exec()时，返回数组:\n- 第一个元素是与正则表达式相匹配的文本\n\t- 第二个元素是与RegExpObject的第一个子表达式(**一个分组**)匹配的文本（如果有的话）\n\t- 第三个元素是与RegExpObject的第二个子表达式(**一个分组**)相匹配的文本（如果有的话），以此类推\n\n调用全局的RegExp对象的exec()时，可以循环得到所有的匹配字符串。\n\n## 4.3. 字符串对象方法\n1. String.protatype.search(reg):\n- 检索字符串中是否有指定子字符串，或是否有与正则表达式相匹配的子字符串\n- 方法返回第一个匹配结果的index，没有匹配返回-1\n- 方法不执行全局匹配，它忽略标志g，并且总是从字符串的开始进行检索\n\n2. String.protatype.match(reg):\n- match()方法将检索字符串，以找到一个或多个与reg匹配的字符串\n- reg是否具有标志g对结果影响很大\n\n如果reg没有标志g，那么march()方法就只能在字符串中执行一次匹配，如果没有找到匹配文本返回null，否则返回一个数组，其中存放了与他找到的匹配文本有关的信息：\n- 第一个元素存放的是匹配文本，其余元素存放的是与正则表达式的子表达式匹配的文本\n- 数组还含有两个对象属性：**index** 和**input**\n\n如果reg具有标志g，则march()方法将执行全局检索，找到字符串中的所有匹配子字符串，如果没有找到任何匹配的子串，返回null；如果找到了一个或多个匹配子串，则返回一个数组，其中存放字符串中所有的匹配子串，而且没有index和input属性。\n\n3. String.protatype.split(reg):\n以reg为界限将字符串分割为一个字符串数组。\n\n4. String.protatype.replace:\n将一个字符串中的一部分替换成另一个字符串。\n- String.protatype.replace(str, replaceStr)\n- String.protatype.replace(reg, replaceStr)\n- String.protatype.replace(reg, function)\nfunction中参数的定义：\n\t1. 匹配的字符串\n\t2. 正则表达式分组的内容，没有分组则没有该参数\n\t3. 匹配项在字符串中的index\n\t4. 原字符串\n``` javascript\n 'a1b2c3d4e5'.replace(/(\\d)(\\w)(\\d)/g, function(match, group1, group2, group3, index, origin){\n\t return parseInt(group1) + parseInt(group3);\n });\n```\n\n# 5. 正则表达式示例\n\n| 正则表达式   |    描述   |\n| :--------   | :------   |\n| `/\\b([a-z]+) \\1\\b/gi` |  一个单词连续出现的位置。|\n| `/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/` | 将一个URL解析为协议、域、端口及相对路径。|\n| `/^(?:Chapter[or]Section) [1-9][0-9]{0,1}$/` | 定位章节的位置。 |\n| `/<\\s*(\\S+)(\\s[^>]*)?>[\\s\\S]*<\\s*\\/\\1\\s*>/` | 匹配 HTML 标记。|\n| `/^(((13[or]15[or]18)[0-9])[or]14[57][or]17[0134678])\\d{8}$/` | 匹配手机号码 |\n| `/^\\w+((-\\w+)[or](\\.\\w+))*\\@[A-Za-z0-9]+((\\.\\[or]-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/` | 匹配邮箱 |\n| `/(^\\d{15}\\$)[or](^\\d{18}\\$)[or](^\\d{17}(\\d[or]X[or]x)$)/` | 匹配身份证号 |","slug":"regular-expression-for-JavaScript","published":1,"updated":"2017-05-05T13:11:33.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o74000qpoc5ga4pdhfe","content":"<blockquote>\n<p>注：由于markdown语法问题，没找到好的解决办法，文中正则表达式中的’|’使用[or]代替。</p>\n</blockquote>\n<h1 id=\"1-了解正则表达式\"><a href=\"#1-了解正则表达式\" class=\"headerlink\" title=\"1. 了解正则表达式\"></a>1. 了解正则表达式</h1><h2 id=\"1-1-什么是正则表达式\"><a href=\"#1-1-什么是正则表达式\" class=\"headerlink\" title=\"1.1. 什么是正则表达式\"></a>1.1. 什么是正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p>\n<ul>\n<li>列出目录时，dir <em>.txt 或 ls </em>.txt 中的 <em>.txt 就不是一个正则表达式,因为这里 </em> 与正则式的 * 的含义是不同的。</li>\n<li>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</li>\n</ul>\n<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>\n<h2 id=\"1-2-常用的正则表达式匹配工具\"><a href=\"#1-2-常用的正则表达式匹配工具\" class=\"headerlink\" title=\"1.2. 常用的正则表达式匹配工具\"></a>1.2. 常用的正则表达式匹配工具</h2><ul>\n<li>在线匹配工具：<ol>\n<li><a href=\"http://www.regexper.com\" title=\"www.regexper.com\" target=\"_blank\" rel=\"external\">http://www.regexper.com</a></li>\n<li><a href=\"www.regexpal.com\">www.regexpal.com</a></li>\n<li><a href=\"www.rubular.com\">www.rubular.com</a></li>\n</ol>\n</li>\n<li>正则匹配软件：<br>  <a href=\"http://pan.baidu.com/s/1nvPmwuH\" target=\"_blank\" rel=\"external\">McTracer</a></li>\n</ul>\n<h1 id=\"2-正则表达式语法\"><a href=\"#2-正则表达式语法\" class=\"headerlink\" title=\"2. 正则表达式语法\"></a>2. 正则表达式语法</h1><h2 id=\"2-1-创建正则表达式\"><a href=\"#2-1-创建正则表达式\" class=\"headerlink\" title=\"2.1. 创建正则表达式\"></a>2.1. 创建正则表达式</h2><p>我们有两种方式构造正则表达式：</p>\n<ol>\n<li>使用RegExp对象构造函数构造一个正则表达式对象。<br><code>var reg = new RegExp(&quot;abc&quot;);</code></li>\n<li>使用斜杠(/)字符将模式包围起来，生成一个字面值。<br><code>var reg = /abc/;</code><h2 id=\"2-2-元字符\"><a href=\"#2-2-元字符\" class=\"headerlink\" title=\"2.2. 元字符\"></a>2.2. 元字符</h2></li>\n</ol>\n<blockquote>\n<p>正则表达式由两种基本字符类型组成：</p>\n<ul>\n<li>原义文本字符</li>\n<li>元字符 </li>\n</ul>\n</blockquote>\n<p>元字符是指在正则表达式中有特殊含义的非字母字符，下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\\” 而 “(“ 则匹配 “(“。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:left\">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:left\">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用像”(.[or]\\n)”的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(pattern)</td>\n<td style=\"text-align:left\">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:pattern)</td>\n<td style=\"text-align:left\">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 ([or]) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y[or]ies) 就是一个比 ‘industry[or]industries’ 更简略的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=pattern)</td>\n<td style=\"text-align:left\">正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95[or]98[or]NT[or]2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!pattern)</td>\n<td style=\"text-align:left\">负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95[or]98[or]NT[or]2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x[or]y</td>\n<td style=\"text-align:left\">匹配 x 或 y。例如，’z[or]food’ 能匹配 “z” 或 “food”。’(z[or]f)ood’ 则匹配 “zood” 或 “food”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[xyz]</td>\n<td style=\"text-align:left\">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^xyz]</td>\n<td style=\"text-align:left\">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-z]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^a-z]</td>\n<td style=\"text-align:left\">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\cx</td>\n<td style=\"text-align:left\">匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">匹配一个数字字符。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">匹配一个非数字字符。等价于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\ f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xn</td>\n<td style=\"text-align:left\">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\num</td>\n<td style=\"text-align:left\">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nm</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:left\">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\un</td>\n<td style=\"text-align:left\">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\u00A9</td>\n<td style=\"text-align:left\">匹配版权符号 (?)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-3-字符类和范围类以及边界\"><a href=\"#2-3-字符类和范围类以及边界\" class=\"headerlink\" title=\"2.3. 字符类和范围类以及边界\"></a>2.3. 字符类和范围类以及边界</h2><p>我们要取某一类字符的时候可以使用中括号加字符的形式，例如：[abc]匹配中括号中内元素的字符，比如可以匹配”plain”中的’a’。<br>正则表达式还提供了范围类，我们可以使用[a-z]匹配a到z的字符，如果想要匹配所有的大小写字母，则可以用[a-zA-Z]。</p>\n<blockquote>\n<p>在中括号中使用^表示取反，例如[^a-z]匹配不在a-z范围内的字符。但是用在正则表达式中表示匹配输入字符串的起始位置。</p>\n</blockquote>\n<p>正则表达式给我们提供了一些预定义类来方便我们的使用，例如.、\\d、\\w、\\s等，具体用法见上表。<br>正则表达式还提供了几个常用的边界匹配符，如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-4-量词\"><a href=\"#2-4-量词\" class=\"headerlink\" title=\"2.4. 量词\"></a>2.4. 量词</h2><p>先解释三个概念</p>\n<blockquote>\n<ul>\n<li>贪婪(贪心) 如”*”字符 贪婪量词会首先匹配整个字符串，尝试匹配时，它会选定尽可能多的内容，如果 失败则回退一个字符，然后再次尝试回退的过程就叫做回溯，它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。相比其他两种贪婪量词对资源的消耗是最大的。</li>\n<li>懒惰(勉强) 如 “?”  懒惰量词使用另一种方式匹配，它从目标的起始位置开始尝试匹配，每次检查一个字符，并寻找它要匹配的内容，如此循环直到字符结尾处。</li>\n<li>占有  如”+” 占有量词会覆盖事个目标字符串，然后尝试寻找匹配内容 ，但它只尝试一次，不会回溯，就好比先抓一把石头，然后从石头中挑出黄金。</li>\n</ul>\n</blockquote>\n<p>常用的量词有:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。(贪婪)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。(懒惰)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或一次。(占有)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:left\">n 是一个非负整数。匹配确定的 n 次。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:left\">n 是一个非负整数。至少匹配n 次。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>正则表达式默认为贪婪模式，尽可能多的去匹配，如果想要让正则表达式尽可能少的匹配，则需要用到”?”</strong>。<br>当”?”紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">*?</td>\n<td style=\"text-align:left\">重复任意次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+?</td>\n<td style=\"text-align:left\">重复1次或更多次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">??</td>\n<td style=\"text-align:left\">重复0次或1次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}?</td>\n<td style=\"text-align:left\">重复n到m次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}?</td>\n<td style=\"text-align:left\">重复n次以上，但尽可能少重复</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h1 id=\"3-正则表达式进阶\"><a href=\"#3-正则表达式进阶\" class=\"headerlink\" title=\"3. 正则表达式进阶\"></a>3. 正则表达式进阶</h1><h2 id=\"3-1-分组和或\"><a href=\"#3-1-分组和或\" class=\"headerlink\" title=\"3.1. 分组和或\"></a>3.1. 分组和或</h2><p>正则表达式中正常情况下量词只对前一个字符或字符类起作用，如果想让他对固定的字符串起作用，就需要分组。分组其实就是一个括号里的内容，可以使量词作用于分组，例如/(tristan){1,3}/括号中就是一个分组。</p>\n<p>“或”的概念就是匹配一个字符串或者另一个字符串，用”[or]”表示，例如/Tristan [or] Henry/，没有分组的情况下或作用于字符串，有分组的情况下或作用于分组，例如/Trist(an [or] He)nry/。</p>\n<p>反向引用，当我们替换或者其他操作需要前面引用替换的字符串时，可以使用”$”符号依次得到匹配的分组的字符串。例如，将”2017-02-08”替换为”02/08/2017”，需要替换的字符串不可能是一成不变的，所以需要使用反向引用，方法为：<br><code>&#39;2017-02-08&#39;.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g, &#39;$2/$3$1&#39;)</code>;<br><img src=\"http://i1.piimg.com/567571/41c1186668cad5f4.png\" alt=\"\"></p>\n<p>关于分组常有的用法如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">(exp)</td>\n<td style=\"text-align:left\">匹配exp,并捕获文本到自动命名的组里</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?&lt;\\name&gt;exp)</td>\n<td style=\"text-align:left\">匹配exp,并捕获文本到名称为name的组里</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:exp)</td>\n<td style=\"text-align:left\">匹配exp,不捕获匹配的文本，也不给此分组分配组号<br><img src=\"http://i1.piimg.com/567571/cb7f7aca0008884b.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-2-前瞻\"><a href=\"#3-2-前瞻\" class=\"headerlink\" title=\"3.2 前瞻\"></a>3.2 前瞻</h2><blockquote>\n<p>正则表达式从文本头部向尾部开始解析，文本尾部方向成为前。</p>\n</blockquote>\n<p>前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾/后瞻方向相反。JavaScript不支持后顾。<br>符合和不符合特定断言成为肯定/正向匹配和否定/负向匹配。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">正则</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">正向前瞻</td>\n<td style=\"text-align:left\">exp(?=assert)</td>\n<td style=\"text-align:left\">前面正则表达式匹配并且后面符合断言<br><img src=\"http://i1.piimg.com/567571/778c12d8755dc987.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">负向前瞻</td>\n<td style=\"text-align:left\">exp(?!assert)</td>\n<td style=\"text-align:left\">前面正则表达式匹配并且后面不符合断言<br><img src=\"http://i2.muimg.com/567571/787844d42aae11bd.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">正向后顾</td>\n<td style=\"text-align:left\">exp(?&lt;=assert)</td>\n<td style=\"text-align:left\">JavaScript不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">负向后顾</td>\n<td style=\"text-align:left\">exp(?&lt;!assert)</td>\n<td style=\"text-align:left\">JavaScript不支持</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"4-JavaScript中的正则表达式\"><a href=\"#4-JavaScript中的正则表达式\" class=\"headerlink\" title=\"4. JavaScript中的正则表达式\"></a>4. JavaScript中的正则表达式</h1><h2 id=\"4-1-对象属性\"><a href=\"#4-1-对象属性\" class=\"headerlink\" title=\"4.1. 对象属性\"></a>4.1. 对象属性</h2><ul>\n<li><strong>global</strong>: 是否全局搜索，默认为false(只读)；</li>\n<li><strong>ignoreCase</strong>: 是否大小写敏感，默认为false(只读)；</li>\n<li><strong>multiline</strong>: 是否多行搜索，默认为false(只读)；</li>\n<li><strong>lastIndex</strong>: 是当前表达式匹配内容的最后一个字符的下一个位置，当正则表达式启用了全局(g)并且使用exec匹配模式时可以使用；</li>\n<li><strong>source</strong>: 正则表达式的文本字符串；</li>\n</ul>\n<h2 id=\"4-2-test和exec方法\"><a href=\"#4-2-test和exec方法\" class=\"headerlink\" title=\"4.2. test和exec方法\"></a>4.2. test和exec方法</h2><ol>\n<li>RegExp.prototype.test(str):</li>\n</ol>\n<ul>\n<li>用于检测字符串参数中是否存在匹配正则表达式模式的字符串</li>\n<li>如果存在则返回true，否则返回false</li>\n</ul>\n<blockquote>\n<p><strong>注意：正则表达式为全局搜索时，会出现多次执行结果不一致问题，原因为全局搜索模式下，每次执行方法会在lastIndex属性的位置开始搜索，而lastIndex属性随着每次搜索而改变，这样在匹配完最后一个匹配结果后剩下的字符串就没有了匹配结果，test方法就会返回false。所以test方法尽量不要用全局搜索(非全局下lastIndex不生效)。</strong></p>\n</blockquote>\n<ol>\n<li>RegExp.prototype.exec(str):</li>\n</ol>\n<ul>\n<li>使用正则表达式模式对字符串执行搜索，并更新全局RegExp对象的属性以反映匹配结果。</li>\n<li>如果没有匹配的文本则返回null，否则返回一个结果数组:<br>  - <strong>index</strong> 声明匹配文本的第一个字符的位置<br>  - <strong>input</strong> 存放被检索的字符串string</li>\n</ul>\n<p>调用非全局的RegExp对象的exec()时，返回数组:</p>\n<ul>\n<li>第一个元素是与正则表达式相匹配的文本<ul>\n<li>第二个元素是与RegExpObject的第一个子表达式(<strong>一个分组</strong>)匹配的文本（如果有的话）</li>\n<li>第三个元素是与RegExpObject的第二个子表达式(<strong>一个分组</strong>)相匹配的文本（如果有的话），以此类推</li>\n</ul>\n</li>\n</ul>\n<p>调用全局的RegExp对象的exec()时，可以循环得到所有的匹配字符串。</p>\n<h2 id=\"4-3-字符串对象方法\"><a href=\"#4-3-字符串对象方法\" class=\"headerlink\" title=\"4.3. 字符串对象方法\"></a>4.3. 字符串对象方法</h2><ol>\n<li>String.protatype.search(reg):</li>\n</ol>\n<ul>\n<li>检索字符串中是否有指定子字符串，或是否有与正则表达式相匹配的子字符串</li>\n<li>方法返回第一个匹配结果的index，没有匹配返回-1</li>\n<li>方法不执行全局匹配，它忽略标志g，并且总是从字符串的开始进行检索</li>\n</ul>\n<ol>\n<li>String.protatype.match(reg):</li>\n</ol>\n<ul>\n<li>match()方法将检索字符串，以找到一个或多个与reg匹配的字符串</li>\n<li>reg是否具有标志g对结果影响很大</li>\n</ul>\n<p>如果reg没有标志g，那么march()方法就只能在字符串中执行一次匹配，如果没有找到匹配文本返回null，否则返回一个数组，其中存放了与他找到的匹配文本有关的信息：</p>\n<ul>\n<li>第一个元素存放的是匹配文本，其余元素存放的是与正则表达式的子表达式匹配的文本</li>\n<li>数组还含有两个对象属性：<strong>index</strong> 和<strong>input</strong></li>\n</ul>\n<p>如果reg具有标志g，则march()方法将执行全局检索，找到字符串中的所有匹配子字符串，如果没有找到任何匹配的子串，返回null；如果找到了一个或多个匹配子串，则返回一个数组，其中存放字符串中所有的匹配子串，而且没有index和input属性。</p>\n<ol>\n<li><p>String.protatype.split(reg):<br>以reg为界限将字符串分割为一个字符串数组。</p>\n</li>\n<li><p>String.protatype.replace:<br>将一个字符串中的一部分替换成另一个字符串。</p>\n</li>\n</ol>\n<ul>\n<li>String.protatype.replace(str, replaceStr)</li>\n<li>String.protatype.replace(reg, replaceStr)</li>\n<li>String.protatype.replace(reg, function)<br>function中参数的定义：<ol>\n<li>匹配的字符串</li>\n<li>正则表达式分组的内容，没有分组则没有该参数</li>\n<li>匹配项在字符串中的index</li>\n<li>原字符串<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'a1b2c3d4e5'</span>.replace(<span class=\"regexp\">/(\\d)(\\w)(\\d)/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, group1, group2, group3, index, origin</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(group1) + <span class=\"built_in\">parseInt</span>(group3);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"5-正则表达式示例\"><a href=\"#5-正则表达式示例\" class=\"headerlink\" title=\"5. 正则表达式示例\"></a>5. 正则表达式示例</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">正则表达式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>/\\b([a-z]+) \\1\\b/gi</code></td>\n<td style=\"text-align:left\">一个单词连续出现的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/</code></td>\n<td style=\"text-align:left\">将一个URL解析为协议、域、端口及相对路径。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/^(?:Chapter[or]Section) [1-9][0-9]{0,1}$/</code></td>\n<td style=\"text-align:left\">定位章节的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/&lt;\\s*(\\S+)(\\s[^&gt;]*)?&gt;[\\s\\S]*&lt;\\s*\\/\\1\\s*&gt;/</code></td>\n<td style=\"text-align:left\">匹配 HTML 标记。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/^(((13[or]15[or]18)[0-9])[or]14[57][or]17[0134678])\\d{8}$/</code></td>\n<td style=\"text-align:left\">匹配手机号码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/^\\w+((-\\w+)[or](\\.\\w+))*\\@[A-Za-z0-9]+((\\.\\[or]-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</code></td>\n<td style=\"text-align:left\">匹配邮箱</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/(^\\d{15}\\$)[or](^\\d{18}\\$)[or](^\\d{17}(\\d[or]X[or]x)$)/</code></td>\n<td style=\"text-align:left\">匹配身份证号</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>注：由于markdown语法问题，没找到好的解决办法，文中正则表达式中的’|’使用[or]代替。</p>\n</blockquote>\n<h1 id=\"1-了解正则表达式\"><a href=\"#1-了解正则表达式\" class=\"headerlink\" title=\"1. 了解正则表达式\"></a>1. 了解正则表达式</h1><h2 id=\"1-1-什么是正则表达式\"><a href=\"#1-1-什么是正则表达式\" class=\"headerlink\" title=\"1.1. 什么是正则表达式\"></a>1.1. 什么是正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p>\n<ul>\n<li>列出目录时，dir <em>.txt 或 ls </em>.txt 中的 <em>.txt 就不是一个正则表达式,因为这里 </em> 与正则式的 * 的含义是不同的。</li>\n<li>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</li>\n</ul>\n<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>\n<h2 id=\"1-2-常用的正则表达式匹配工具\"><a href=\"#1-2-常用的正则表达式匹配工具\" class=\"headerlink\" title=\"1.2. 常用的正则表达式匹配工具\"></a>1.2. 常用的正则表达式匹配工具</h2><ul>\n<li>在线匹配工具：<ol>\n<li><a href=\"http://www.regexper.com\" title=\"www.regexper.com\" target=\"_blank\" rel=\"external\">http://www.regexper.com</a></li>\n<li><a href=\"www.regexpal.com\">www.regexpal.com</a></li>\n<li><a href=\"www.rubular.com\">www.rubular.com</a></li>\n</ol>\n</li>\n<li>正则匹配软件：<br>  <a href=\"http://pan.baidu.com/s/1nvPmwuH\" target=\"_blank\" rel=\"external\">McTracer</a></li>\n</ul>\n<h1 id=\"2-正则表达式语法\"><a href=\"#2-正则表达式语法\" class=\"headerlink\" title=\"2. 正则表达式语法\"></a>2. 正则表达式语法</h1><h2 id=\"2-1-创建正则表达式\"><a href=\"#2-1-创建正则表达式\" class=\"headerlink\" title=\"2.1. 创建正则表达式\"></a>2.1. 创建正则表达式</h2><p>我们有两种方式构造正则表达式：</p>\n<ol>\n<li>使用RegExp对象构造函数构造一个正则表达式对象。<br><code>var reg = new RegExp(&quot;abc&quot;);</code></li>\n<li>使用斜杠(/)字符将模式包围起来，生成一个字面值。<br><code>var reg = /abc/;</code><h2 id=\"2-2-元字符\"><a href=\"#2-2-元字符\" class=\"headerlink\" title=\"2.2. 元字符\"></a>2.2. 元字符</h2></li>\n</ol>\n<blockquote>\n<p>正则表达式由两种基本字符类型组成：</p>\n<ul>\n<li>原义文本字符</li>\n<li>元字符 </li>\n</ul>\n</blockquote>\n<p>元字符是指在正则表达式中有特殊含义的非字母字符，下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\\” 而 “(“ 则匹配 “(“。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:left\">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:left\">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用像”(.[or]\\n)”的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(pattern)</td>\n<td style=\"text-align:left\">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:pattern)</td>\n<td style=\"text-align:left\">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 ([or]) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y[or]ies) 就是一个比 ‘industry[or]industries’ 更简略的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=pattern)</td>\n<td style=\"text-align:left\">正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95[or]98[or]NT[or]2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!pattern)</td>\n<td style=\"text-align:left\">负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95[or]98[or]NT[or]2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x[or]y</td>\n<td style=\"text-align:left\">匹配 x 或 y。例如，’z[or]food’ 能匹配 “z” 或 “food”。’(z[or]f)ood’ 则匹配 “zood” 或 “food”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[xyz]</td>\n<td style=\"text-align:left\">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^xyz]</td>\n<td style=\"text-align:left\">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-z]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^a-z]</td>\n<td style=\"text-align:left\">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\cx</td>\n<td style=\"text-align:left\">匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">匹配一个数字字符。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">匹配一个非数字字符。等价于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\ f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xn</td>\n<td style=\"text-align:left\">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\num</td>\n<td style=\"text-align:left\">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nm</td>\n<td style=\"text-align:left\">标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:left\">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\un</td>\n<td style=\"text-align:left\">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\u00A9</td>\n<td style=\"text-align:left\">匹配版权符号 (?)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-3-字符类和范围类以及边界\"><a href=\"#2-3-字符类和范围类以及边界\" class=\"headerlink\" title=\"2.3. 字符类和范围类以及边界\"></a>2.3. 字符类和范围类以及边界</h2><p>我们要取某一类字符的时候可以使用中括号加字符的形式，例如：[abc]匹配中括号中内元素的字符，比如可以匹配”plain”中的’a’。<br>正则表达式还提供了范围类，我们可以使用[a-z]匹配a到z的字符，如果想要匹配所有的大小写字母，则可以用[a-zA-Z]。</p>\n<blockquote>\n<p>在中括号中使用^表示取反，例如[^a-z]匹配不在a-z范围内的字符。但是用在正则表达式中表示匹配输入字符串的起始位置。</p>\n</blockquote>\n<p>正则表达式给我们提供了一些预定义类来方便我们的使用，例如.、\\d、\\w、\\s等，具体用法见上表。<br>正则表达式还提供了几个常用的边界匹配符，如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性， 它也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-4-量词\"><a href=\"#2-4-量词\" class=\"headerlink\" title=\"2.4. 量词\"></a>2.4. 量词</h2><p>先解释三个概念</p>\n<blockquote>\n<ul>\n<li>贪婪(贪心) 如”*”字符 贪婪量词会首先匹配整个字符串，尝试匹配时，它会选定尽可能多的内容，如果 失败则回退一个字符，然后再次尝试回退的过程就叫做回溯，它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。相比其他两种贪婪量词对资源的消耗是最大的。</li>\n<li>懒惰(勉强) 如 “?”  懒惰量词使用另一种方式匹配，它从目标的起始位置开始尝试匹配，每次检查一个字符，并寻找它要匹配的内容，如此循环直到字符结尾处。</li>\n<li>占有  如”+” 占有量词会覆盖事个目标字符串，然后尝试寻找匹配内容 ，但它只尝试一次，不会回溯，就好比先抓一把石头，然后从石头中挑出黄金。</li>\n</ul>\n</blockquote>\n<p>常用的量词有:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。(贪婪)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。(懒惰)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或一次。(占有)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td style=\"text-align:left\">n 是一个非负整数。匹配确定的 n 次。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td style=\"text-align:left\">n 是一个非负整数。至少匹配n 次。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td style=\"text-align:left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>正则表达式默认为贪婪模式，尽可能多的去匹配，如果想要让正则表达式尽可能少的匹配，则需要用到”?”</strong>。<br>当”?”紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">*?</td>\n<td style=\"text-align:left\">重复任意次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+?</td>\n<td style=\"text-align:left\">重复1次或更多次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">??</td>\n<td style=\"text-align:left\">重复0次或1次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}?</td>\n<td style=\"text-align:left\">重复n到m次，但尽可能少重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}?</td>\n<td style=\"text-align:left\">重复n次以上，但尽可能少重复</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h1 id=\"3-正则表达式进阶\"><a href=\"#3-正则表达式进阶\" class=\"headerlink\" title=\"3. 正则表达式进阶\"></a>3. 正则表达式进阶</h1><h2 id=\"3-1-分组和或\"><a href=\"#3-1-分组和或\" class=\"headerlink\" title=\"3.1. 分组和或\"></a>3.1. 分组和或</h2><p>正则表达式中正常情况下量词只对前一个字符或字符类起作用，如果想让他对固定的字符串起作用，就需要分组。分组其实就是一个括号里的内容，可以使量词作用于分组，例如/(tristan){1,3}/括号中就是一个分组。</p>\n<p>“或”的概念就是匹配一个字符串或者另一个字符串，用”[or]”表示，例如/Tristan [or] Henry/，没有分组的情况下或作用于字符串，有分组的情况下或作用于分组，例如/Trist(an [or] He)nry/。</p>\n<p>反向引用，当我们替换或者其他操作需要前面引用替换的字符串时，可以使用”$”符号依次得到匹配的分组的字符串。例如，将”2017-02-08”替换为”02/08/2017”，需要替换的字符串不可能是一成不变的，所以需要使用反向引用，方法为：<br><code>&#39;2017-02-08&#39;.replace(/(\\d{4})-(\\d{2})-(\\d{2})/g, &#39;$2/$3$1&#39;)</code>;<br><img src=\"http://i1.piimg.com/567571/41c1186668cad5f4.png\" alt=\"\"></p>\n<p>关于分组常有的用法如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">(exp)</td>\n<td style=\"text-align:left\">匹配exp,并捕获文本到自动命名的组里</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?&lt;\\name&gt;exp)</td>\n<td style=\"text-align:left\">匹配exp,并捕获文本到名称为name的组里</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:exp)</td>\n<td style=\"text-align:left\">匹配exp,不捕获匹配的文本，也不给此分组分配组号<br><img src=\"http://i1.piimg.com/567571/cb7f7aca0008884b.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-2-前瞻\"><a href=\"#3-2-前瞻\" class=\"headerlink\" title=\"3.2 前瞻\"></a>3.2 前瞻</h2><blockquote>\n<p>正则表达式从文本头部向尾部开始解析，文本尾部方向成为前。</p>\n</blockquote>\n<p>前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾/后瞻方向相反。JavaScript不支持后顾。<br>符合和不符合特定断言成为肯定/正向匹配和否定/负向匹配。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">正则</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">正向前瞻</td>\n<td style=\"text-align:left\">exp(?=assert)</td>\n<td style=\"text-align:left\">前面正则表达式匹配并且后面符合断言<br><img src=\"http://i1.piimg.com/567571/778c12d8755dc987.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">负向前瞻</td>\n<td style=\"text-align:left\">exp(?!assert)</td>\n<td style=\"text-align:left\">前面正则表达式匹配并且后面不符合断言<br><img src=\"http://i2.muimg.com/567571/787844d42aae11bd.png\" alt=\"\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">正向后顾</td>\n<td style=\"text-align:left\">exp(?&lt;=assert)</td>\n<td style=\"text-align:left\">JavaScript不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">负向后顾</td>\n<td style=\"text-align:left\">exp(?&lt;!assert)</td>\n<td style=\"text-align:left\">JavaScript不支持</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"4-JavaScript中的正则表达式\"><a href=\"#4-JavaScript中的正则表达式\" class=\"headerlink\" title=\"4. JavaScript中的正则表达式\"></a>4. JavaScript中的正则表达式</h1><h2 id=\"4-1-对象属性\"><a href=\"#4-1-对象属性\" class=\"headerlink\" title=\"4.1. 对象属性\"></a>4.1. 对象属性</h2><ul>\n<li><strong>global</strong>: 是否全局搜索，默认为false(只读)；</li>\n<li><strong>ignoreCase</strong>: 是否大小写敏感，默认为false(只读)；</li>\n<li><strong>multiline</strong>: 是否多行搜索，默认为false(只读)；</li>\n<li><strong>lastIndex</strong>: 是当前表达式匹配内容的最后一个字符的下一个位置，当正则表达式启用了全局(g)并且使用exec匹配模式时可以使用；</li>\n<li><strong>source</strong>: 正则表达式的文本字符串；</li>\n</ul>\n<h2 id=\"4-2-test和exec方法\"><a href=\"#4-2-test和exec方法\" class=\"headerlink\" title=\"4.2. test和exec方法\"></a>4.2. test和exec方法</h2><ol>\n<li>RegExp.prototype.test(str):</li>\n</ol>\n<ul>\n<li>用于检测字符串参数中是否存在匹配正则表达式模式的字符串</li>\n<li>如果存在则返回true，否则返回false</li>\n</ul>\n<blockquote>\n<p><strong>注意：正则表达式为全局搜索时，会出现多次执行结果不一致问题，原因为全局搜索模式下，每次执行方法会在lastIndex属性的位置开始搜索，而lastIndex属性随着每次搜索而改变，这样在匹配完最后一个匹配结果后剩下的字符串就没有了匹配结果，test方法就会返回false。所以test方法尽量不要用全局搜索(非全局下lastIndex不生效)。</strong></p>\n</blockquote>\n<ol>\n<li>RegExp.prototype.exec(str):</li>\n</ol>\n<ul>\n<li>使用正则表达式模式对字符串执行搜索，并更新全局RegExp对象的属性以反映匹配结果。</li>\n<li>如果没有匹配的文本则返回null，否则返回一个结果数组:<br>  - <strong>index</strong> 声明匹配文本的第一个字符的位置<br>  - <strong>input</strong> 存放被检索的字符串string</li>\n</ul>\n<p>调用非全局的RegExp对象的exec()时，返回数组:</p>\n<ul>\n<li>第一个元素是与正则表达式相匹配的文本<ul>\n<li>第二个元素是与RegExpObject的第一个子表达式(<strong>一个分组</strong>)匹配的文本（如果有的话）</li>\n<li>第三个元素是与RegExpObject的第二个子表达式(<strong>一个分组</strong>)相匹配的文本（如果有的话），以此类推</li>\n</ul>\n</li>\n</ul>\n<p>调用全局的RegExp对象的exec()时，可以循环得到所有的匹配字符串。</p>\n<h2 id=\"4-3-字符串对象方法\"><a href=\"#4-3-字符串对象方法\" class=\"headerlink\" title=\"4.3. 字符串对象方法\"></a>4.3. 字符串对象方法</h2><ol>\n<li>String.protatype.search(reg):</li>\n</ol>\n<ul>\n<li>检索字符串中是否有指定子字符串，或是否有与正则表达式相匹配的子字符串</li>\n<li>方法返回第一个匹配结果的index，没有匹配返回-1</li>\n<li>方法不执行全局匹配，它忽略标志g，并且总是从字符串的开始进行检索</li>\n</ul>\n<ol>\n<li>String.protatype.match(reg):</li>\n</ol>\n<ul>\n<li>match()方法将检索字符串，以找到一个或多个与reg匹配的字符串</li>\n<li>reg是否具有标志g对结果影响很大</li>\n</ul>\n<p>如果reg没有标志g，那么march()方法就只能在字符串中执行一次匹配，如果没有找到匹配文本返回null，否则返回一个数组，其中存放了与他找到的匹配文本有关的信息：</p>\n<ul>\n<li>第一个元素存放的是匹配文本，其余元素存放的是与正则表达式的子表达式匹配的文本</li>\n<li>数组还含有两个对象属性：<strong>index</strong> 和<strong>input</strong></li>\n</ul>\n<p>如果reg具有标志g，则march()方法将执行全局检索，找到字符串中的所有匹配子字符串，如果没有找到任何匹配的子串，返回null；如果找到了一个或多个匹配子串，则返回一个数组，其中存放字符串中所有的匹配子串，而且没有index和input属性。</p>\n<ol>\n<li><p>String.protatype.split(reg):<br>以reg为界限将字符串分割为一个字符串数组。</p>\n</li>\n<li><p>String.protatype.replace:<br>将一个字符串中的一部分替换成另一个字符串。</p>\n</li>\n</ol>\n<ul>\n<li>String.protatype.replace(str, replaceStr)</li>\n<li>String.protatype.replace(reg, replaceStr)</li>\n<li>String.protatype.replace(reg, function)<br>function中参数的定义：<ol>\n<li>匹配的字符串</li>\n<li>正则表达式分组的内容，没有分组则没有该参数</li>\n<li>匹配项在字符串中的index</li>\n<li>原字符串<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'a1b2c3d4e5'</span>.replace(<span class=\"regexp\">/(\\d)(\\w)(\\d)/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, group1, group2, group3, index, origin</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(group1) + <span class=\"built_in\">parseInt</span>(group3);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"5-正则表达式示例\"><a href=\"#5-正则表达式示例\" class=\"headerlink\" title=\"5. 正则表达式示例\"></a>5. 正则表达式示例</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">正则表达式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>/\\b([a-z]+) \\1\\b/gi</code></td>\n<td style=\"text-align:left\">一个单词连续出现的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/</code></td>\n<td style=\"text-align:left\">将一个URL解析为协议、域、端口及相对路径。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/^(?:Chapter[or]Section) [1-9][0-9]{0,1}$/</code></td>\n<td style=\"text-align:left\">定位章节的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/&lt;\\s*(\\S+)(\\s[^&gt;]*)?&gt;[\\s\\S]*&lt;\\s*\\/\\1\\s*&gt;/</code></td>\n<td style=\"text-align:left\">匹配 HTML 标记。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/^(((13[or]15[or]18)[0-9])[or]14[57][or]17[0134678])\\d{8}$/</code></td>\n<td style=\"text-align:left\">匹配手机号码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/^\\w+((-\\w+)[or](\\.\\w+))*\\@[A-Za-z0-9]+((\\.\\[or]-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</code></td>\n<td style=\"text-align:left\">匹配邮箱</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/(^\\d{15}\\$)[or](^\\d{18}\\$)[or](^\\d{17}(\\d[or]X[or]x)$)/</code></td>\n<td style=\"text-align:left\">匹配身份证号</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"WinForm DevExpress使用之ChartControl控件绘制图表二——进阶","date":"2017-02-10T16:02:13.000Z","description":"WinForm中使用DevExpress ChartControl控件绘制图表进阶，包括多坐标折线图，以及柱状图和饼状图的样式设置。","_content":"# 1. 多坐标折线图\n![多坐标折线图](http://i.imgur.com/9QU9FDT.png)\n在这个项目中，我需要做不同采集地方和不同数据类型的数据对比，自然而然就用到了多重坐标轴，多重坐标轴可以是多个X轴，也可以是Y轴，它们的处理方式类似。本文通过项目中的实际例子介绍多重Y轴的形式，希望给大家有一个很好的参考。ChartControl图表控件提供了SecondaryAxisY对象来处理多重坐标的问题。CreateAxisY用来创建一个多重坐标轴的代码如下所示，注意这里多重坐标，使用了和Series一样的View.Color颜色，这样方便区分。\n```\n/// <summary>\n/// 创建图表的第二坐标系\n/// </summary>\n/// <param name=\"series\">Series对象</param>\n/// <returns></returns>\nprivate SecondaryAxisY CreateAxisY(Series series)\n{\n    SecondaryAxisY myAxis = new SecondaryAxisY(series.Name);\n    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Add(myAxis);\n    //判断图形对象是柱状图还是折线图\n    string type = series.View.GetType().ToString();\n    if (type == \"DevExpress.XtraCharts.SideBySideBarSeriesView\")\n    {\n        ((BarSeriesView)series.View).AxisY = myAxis;\n    }\n    else\n    {\n        ((LineSeriesView)series.View).AxisY = myAxis;\n    }\n    myAxis.Title.Text = series.Name;\n    myAxis.Title.Alignment = StringAlignment.Far; //顶部对齐\n    myAxis.Title.Visible = true; //显示标题\n    myAxis.Title.Font = new Font(\"宋体\", 9.0f);\n    Color color = series.View.Color;//设置坐标的颜色和图表线条颜色一致\n    myAxis.Title.TextColor = color;\n    myAxis.Label.TextColor = color;\n    myAxis.Color = color;\n    return myAxis;\n}\n```\n\n根据图形对象创建图表时调用CreateAxisY方法\n```\n/// <summary>\n/// 根据图形对象创建一个图表\n/// </summary>\n/// <param name=\"chartControl\">图表绑定控件</param>\n/// <param name=\"list\">图表中的图形展现</param>\n/// <returns></returns>\nprivate void CreateChart(ChartControl chartControl, List<Series> list)\n{\n    chartControl.Series.AddRange(list.ToArray());\n    chartControl.Legend.Visible = false;\n    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;\n    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;\n    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;\n    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;\n    //diagram.AxisX.DateTimeOptions.FormatString = \"yyyy-MM-dd HH:mm:ss\";\n    /*------------------------------------新增--------------------------------*/\n    //删除之前的第二坐标系，如果不删除会一直重复添加\n    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Clear();\n    for (int i = 0; i < list.Count; i++)\n    {\n        list[i].View.Color = Color.FromArgb(rand.Next(0, 255), rand.Next(0, 255), rand.Next(0, 255));\n        CreateAxisY(list[i]);\n    }\n}\n```\n\n# 2. 折线图，柱状图设置缩放与滚动，并设置每页显示条数\n```\n//设置滚动条\nint cnt = 20;\nDevExpress.XtraCharts.XYDiagram xyDiagram1 = (XYDiagram)chartControl1.Diagram;\nxyDiagram1.AxisX.Range.Auto = false; //要开启滚动条必须将其设置为false\nxyDiagram1.AxisX.Range.MaxValueInternal = 30.5D > (cnt + 1) ? (cnt + 1) : 30.5D;//在不拉到滚动条的时候，X轴显示多个值，既固定的X轴长度。\nxyDiagram1.AxisX.Range.MinValueInternal = -0.5D;\nxyDiagram1.AxisX.Range.ScrollingRange.Auto = false;\nxyDiagram1.AxisX.Range.ScrollingRange.MaxValueSerializable = (cnt + 1).ToString();//整个X轴最多显示多多少个值\nxyDiagram1.AxisX.Range.ScrollingRange.MinValueSerializable = \"0\";\nxyDiagram1.AxisX.Range.ScrollingRange.SideMarginsEnabled = true;//是否从X轴原点开始显示\nxyDiagram1.AxisX.Range.SideMarginsEnabled = false;\nxyDiagram1.AxisX.VisibleInPanesSerializable = \"-1\";\nxyDiagram1.EnableAxisXScrolling = true;//启用滚动条\n```\n\n# 3. 柱状图设置Label样式\n```\nBarSeriesLabel label = (BarSeriesLabel)series.Label;\nlabel.Position = BarSeriesLabelPosition.Top;\nlabel.TextPattern = \"{A}: {VP:P2}\";\n```\n\n# 4. 饼状图设置显示样式\nDevExpress设置显示图表数据的样式是使用TextPattern来实现的，比如Label以及Legend等都是通过TextPattern或Pattern来设置的。\n```\n//设置Legend的样式\n_pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;\n_pieSeries.LegendPointOptions.Pattern = \"{A}: {VP:P2}\";\n//设置Label的样式\nlabel.Position = PieSeriesLabelPosition.Inside;\nlabel.TextPattern = \"{A}: {VP:P2}\";\n```\n\n# 5. 设置饼状图数据显示方式（数值/百分比）\n```\npublic static class ExtensionClass\n{\n/// <summary>\n/// 设置饼状Series显示方式（值/百分比）\n/// </summary>\n/// <param name=\"series\">Series</param>\npublic static void SetPiePercentage(this Series series)\n{\n\tif (series.View is PieSeriesView)\n\t{\n\t\t//设置为值\n\t\t//((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;\n\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;\n\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n\t\t//设置为百分比\n\t\t((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;\n\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;\n\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n\t\t}\n\t}\n}\n```","source":"_posts/WinForm-DevExpress-Base.md","raw":"---\ntitle: WinForm DevExpress使用之ChartControl控件绘制图表二——进阶\ndate: 2017-02-11 00:02:13\ncategories: DevExpress\ntags: \n\t- DevExpress Chart\n\t- WinForm\ndescription: WinForm中使用DevExpress ChartControl控件绘制图表进阶，包括多坐标折线图，以及柱状图和饼状图的样式设置。\n---\n# 1. 多坐标折线图\n![多坐标折线图](http://i.imgur.com/9QU9FDT.png)\n在这个项目中，我需要做不同采集地方和不同数据类型的数据对比，自然而然就用到了多重坐标轴，多重坐标轴可以是多个X轴，也可以是Y轴，它们的处理方式类似。本文通过项目中的实际例子介绍多重Y轴的形式，希望给大家有一个很好的参考。ChartControl图表控件提供了SecondaryAxisY对象来处理多重坐标的问题。CreateAxisY用来创建一个多重坐标轴的代码如下所示，注意这里多重坐标，使用了和Series一样的View.Color颜色，这样方便区分。\n```\n/// <summary>\n/// 创建图表的第二坐标系\n/// </summary>\n/// <param name=\"series\">Series对象</param>\n/// <returns></returns>\nprivate SecondaryAxisY CreateAxisY(Series series)\n{\n    SecondaryAxisY myAxis = new SecondaryAxisY(series.Name);\n    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Add(myAxis);\n    //判断图形对象是柱状图还是折线图\n    string type = series.View.GetType().ToString();\n    if (type == \"DevExpress.XtraCharts.SideBySideBarSeriesView\")\n    {\n        ((BarSeriesView)series.View).AxisY = myAxis;\n    }\n    else\n    {\n        ((LineSeriesView)series.View).AxisY = myAxis;\n    }\n    myAxis.Title.Text = series.Name;\n    myAxis.Title.Alignment = StringAlignment.Far; //顶部对齐\n    myAxis.Title.Visible = true; //显示标题\n    myAxis.Title.Font = new Font(\"宋体\", 9.0f);\n    Color color = series.View.Color;//设置坐标的颜色和图表线条颜色一致\n    myAxis.Title.TextColor = color;\n    myAxis.Label.TextColor = color;\n    myAxis.Color = color;\n    return myAxis;\n}\n```\n\n根据图形对象创建图表时调用CreateAxisY方法\n```\n/// <summary>\n/// 根据图形对象创建一个图表\n/// </summary>\n/// <param name=\"chartControl\">图表绑定控件</param>\n/// <param name=\"list\">图表中的图形展现</param>\n/// <returns></returns>\nprivate void CreateChart(ChartControl chartControl, List<Series> list)\n{\n    chartControl.Series.AddRange(list.ToArray());\n    chartControl.Legend.Visible = false;\n    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;\n    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;\n    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;\n    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;\n    //diagram.AxisX.DateTimeOptions.FormatString = \"yyyy-MM-dd HH:mm:ss\";\n    /*------------------------------------新增--------------------------------*/\n    //删除之前的第二坐标系，如果不删除会一直重复添加\n    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Clear();\n    for (int i = 0; i < list.Count; i++)\n    {\n        list[i].View.Color = Color.FromArgb(rand.Next(0, 255), rand.Next(0, 255), rand.Next(0, 255));\n        CreateAxisY(list[i]);\n    }\n}\n```\n\n# 2. 折线图，柱状图设置缩放与滚动，并设置每页显示条数\n```\n//设置滚动条\nint cnt = 20;\nDevExpress.XtraCharts.XYDiagram xyDiagram1 = (XYDiagram)chartControl1.Diagram;\nxyDiagram1.AxisX.Range.Auto = false; //要开启滚动条必须将其设置为false\nxyDiagram1.AxisX.Range.MaxValueInternal = 30.5D > (cnt + 1) ? (cnt + 1) : 30.5D;//在不拉到滚动条的时候，X轴显示多个值，既固定的X轴长度。\nxyDiagram1.AxisX.Range.MinValueInternal = -0.5D;\nxyDiagram1.AxisX.Range.ScrollingRange.Auto = false;\nxyDiagram1.AxisX.Range.ScrollingRange.MaxValueSerializable = (cnt + 1).ToString();//整个X轴最多显示多多少个值\nxyDiagram1.AxisX.Range.ScrollingRange.MinValueSerializable = \"0\";\nxyDiagram1.AxisX.Range.ScrollingRange.SideMarginsEnabled = true;//是否从X轴原点开始显示\nxyDiagram1.AxisX.Range.SideMarginsEnabled = false;\nxyDiagram1.AxisX.VisibleInPanesSerializable = \"-1\";\nxyDiagram1.EnableAxisXScrolling = true;//启用滚动条\n```\n\n# 3. 柱状图设置Label样式\n```\nBarSeriesLabel label = (BarSeriesLabel)series.Label;\nlabel.Position = BarSeriesLabelPosition.Top;\nlabel.TextPattern = \"{A}: {VP:P2}\";\n```\n\n# 4. 饼状图设置显示样式\nDevExpress设置显示图表数据的样式是使用TextPattern来实现的，比如Label以及Legend等都是通过TextPattern或Pattern来设置的。\n```\n//设置Legend的样式\n_pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;\n_pieSeries.LegendPointOptions.Pattern = \"{A}: {VP:P2}\";\n//设置Label的样式\nlabel.Position = PieSeriesLabelPosition.Inside;\nlabel.TextPattern = \"{A}: {VP:P2}\";\n```\n\n# 5. 设置饼状图数据显示方式（数值/百分比）\n```\npublic static class ExtensionClass\n{\n/// <summary>\n/// 设置饼状Series显示方式（值/百分比）\n/// </summary>\n/// <param name=\"series\">Series</param>\npublic static void SetPiePercentage(this Series series)\n{\n\tif (series.View is PieSeriesView)\n\t{\n\t\t//设置为值\n\t\t//((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;\n\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;\n\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n\t\t//设置为百分比\n\t\t((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;\n\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;\n\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;\n\t\t}\n\t}\n}\n```","slug":"WinForm-DevExpress-Base","published":1,"updated":"2017-05-05T13:11:33.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2bv0o74000vpoc51kwqlhw8","content":"<h1 id=\"1-多坐标折线图\"><a href=\"#1-多坐标折线图\" class=\"headerlink\" title=\"1. 多坐标折线图\"></a>1. 多坐标折线图</h1><p><img src=\"http://i.imgur.com/9QU9FDT.png\" alt=\"多坐标折线图\"><br>在这个项目中，我需要做不同采集地方和不同数据类型的数据对比，自然而然就用到了多重坐标轴，多重坐标轴可以是多个X轴，也可以是Y轴，它们的处理方式类似。本文通过项目中的实际例子介绍多重Y轴的形式，希望给大家有一个很好的参考。ChartControl图表控件提供了SecondaryAxisY对象来处理多重坐标的问题。CreateAxisY用来创建一个多重坐标轴的代码如下所示，注意这里多重坐标，使用了和Series一样的View.Color颜色，这样方便区分。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 创建图表的第二坐标系</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;series&quot;&gt;Series对象&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private SecondaryAxisY CreateAxisY(Series series)</div><div class=\"line\">&#123;</div><div class=\"line\">    SecondaryAxisY myAxis = new SecondaryAxisY(series.Name);</div><div class=\"line\">    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Add(myAxis);</div><div class=\"line\">    //判断图形对象是柱状图还是折线图</div><div class=\"line\">    string type = series.View.GetType().ToString();</div><div class=\"line\">    if (type == &quot;DevExpress.XtraCharts.SideBySideBarSeriesView&quot;)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ((BarSeriesView)series.View).AxisY = myAxis;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else</div><div class=\"line\">    &#123;</div><div class=\"line\">        ((LineSeriesView)series.View).AxisY = myAxis;</div><div class=\"line\">    &#125;</div><div class=\"line\">    myAxis.Title.Text = series.Name;</div><div class=\"line\">    myAxis.Title.Alignment = StringAlignment.Far; //顶部对齐</div><div class=\"line\">    myAxis.Title.Visible = true; //显示标题</div><div class=\"line\">    myAxis.Title.Font = new Font(&quot;宋体&quot;, 9.0f);</div><div class=\"line\">    Color color = series.View.Color;//设置坐标的颜色和图表线条颜色一致</div><div class=\"line\">    myAxis.Title.TextColor = color;</div><div class=\"line\">    myAxis.Label.TextColor = color;</div><div class=\"line\">    myAxis.Color = color;</div><div class=\"line\">    return myAxis;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据图形对象创建图表时调用CreateAxisY方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据图形对象创建一个图表</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;chartControl&quot;&gt;图表绑定控件&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;list&quot;&gt;图表中的图形展现&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void CreateChart(ChartControl chartControl, List&lt;Series&gt; list)</div><div class=\"line\">&#123;</div><div class=\"line\">    chartControl.Series.AddRange(list.ToArray());</div><div class=\"line\">    chartControl.Legend.Visible = false;</div><div class=\"line\">    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;</div><div class=\"line\">    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;</div><div class=\"line\">    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.FormatString = &quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class=\"line\">    /*------------------------------------新增--------------------------------*/</div><div class=\"line\">    //删除之前的第二坐标系，如果不删除会一直重复添加</div><div class=\"line\">    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Clear();</div><div class=\"line\">    for (int i = 0; i &lt; list.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        list[i].View.Color = Color.FromArgb(rand.Next(0, 255), rand.Next(0, 255), rand.Next(0, 255));</div><div class=\"line\">        CreateAxisY(list[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-折线图，柱状图设置缩放与滚动，并设置每页显示条数\"><a href=\"#2-折线图，柱状图设置缩放与滚动，并设置每页显示条数\" class=\"headerlink\" title=\"2. 折线图，柱状图设置缩放与滚动，并设置每页显示条数\"></a>2. 折线图，柱状图设置缩放与滚动，并设置每页显示条数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//设置滚动条</div><div class=\"line\">int cnt = 20;</div><div class=\"line\">DevExpress.XtraCharts.XYDiagram xyDiagram1 = (XYDiagram)chartControl1.Diagram;</div><div class=\"line\">xyDiagram1.AxisX.Range.Auto = false; //要开启滚动条必须将其设置为false</div><div class=\"line\">xyDiagram1.AxisX.Range.MaxValueInternal = 30.5D &gt; (cnt + 1) ? (cnt + 1) : 30.5D;//在不拉到滚动条的时候，X轴显示多个值，既固定的X轴长度。</div><div class=\"line\">xyDiagram1.AxisX.Range.MinValueInternal = -0.5D;</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.Auto = false;</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.MaxValueSerializable = (cnt + 1).ToString();//整个X轴最多显示多多少个值</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.MinValueSerializable = &quot;0&quot;;</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.SideMarginsEnabled = true;//是否从X轴原点开始显示</div><div class=\"line\">xyDiagram1.AxisX.Range.SideMarginsEnabled = false;</div><div class=\"line\">xyDiagram1.AxisX.VisibleInPanesSerializable = &quot;-1&quot;;</div><div class=\"line\">xyDiagram1.EnableAxisXScrolling = true;//启用滚动条</div></pre></td></tr></table></figure>\n<h1 id=\"3-柱状图设置Label样式\"><a href=\"#3-柱状图设置Label样式\" class=\"headerlink\" title=\"3. 柱状图设置Label样式\"></a>3. 柱状图设置Label样式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BarSeriesLabel label = (BarSeriesLabel)series.Label;</div><div class=\"line\">label.Position = BarSeriesLabelPosition.Top;</div><div class=\"line\">label.TextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div></pre></td></tr></table></figure>\n<h1 id=\"4-饼状图设置显示样式\"><a href=\"#4-饼状图设置显示样式\" class=\"headerlink\" title=\"4. 饼状图设置显示样式\"></a>4. 饼状图设置显示样式</h1><p>DevExpress设置显示图表数据的样式是使用TextPattern来实现的，比如Label以及Legend等都是通过TextPattern或Pattern来设置的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//设置Legend的样式</div><div class=\"line\">_pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;</div><div class=\"line\">_pieSeries.LegendPointOptions.Pattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div><div class=\"line\">//设置Label的样式</div><div class=\"line\">label.Position = PieSeriesLabelPosition.Inside;</div><div class=\"line\">label.TextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-设置饼状图数据显示方式（数值-百分比）\"><a href=\"#5-设置饼状图数据显示方式（数值-百分比）\" class=\"headerlink\" title=\"5. 设置饼状图数据显示方式（数值/百分比）\"></a>5. 设置饼状图数据显示方式（数值/百分比）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class ExtensionClass</div><div class=\"line\">&#123;</div><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 设置饼状Series显示方式（值/百分比）</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;series&quot;&gt;Series&lt;/param&gt;</div><div class=\"line\">public static void SetPiePercentage(this Series series)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (series.View is PieSeriesView)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t//设置为值</div><div class=\"line\">\t\t//((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;</div><div class=\"line\">\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;</div><div class=\"line\">\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">\t\t//设置为百分比</div><div class=\"line\">\t\t((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;</div><div class=\"line\">\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;</div><div class=\"line\">\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-多坐标折线图\"><a href=\"#1-多坐标折线图\" class=\"headerlink\" title=\"1. 多坐标折线图\"></a>1. 多坐标折线图</h1><p><img src=\"http://i.imgur.com/9QU9FDT.png\" alt=\"多坐标折线图\"><br>在这个项目中，我需要做不同采集地方和不同数据类型的数据对比，自然而然就用到了多重坐标轴，多重坐标轴可以是多个X轴，也可以是Y轴，它们的处理方式类似。本文通过项目中的实际例子介绍多重Y轴的形式，希望给大家有一个很好的参考。ChartControl图表控件提供了SecondaryAxisY对象来处理多重坐标的问题。CreateAxisY用来创建一个多重坐标轴的代码如下所示，注意这里多重坐标，使用了和Series一样的View.Color颜色，这样方便区分。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 创建图表的第二坐标系</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;series&quot;&gt;Series对象&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private SecondaryAxisY CreateAxisY(Series series)</div><div class=\"line\">&#123;</div><div class=\"line\">    SecondaryAxisY myAxis = new SecondaryAxisY(series.Name);</div><div class=\"line\">    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Add(myAxis);</div><div class=\"line\">    //判断图形对象是柱状图还是折线图</div><div class=\"line\">    string type = series.View.GetType().ToString();</div><div class=\"line\">    if (type == &quot;DevExpress.XtraCharts.SideBySideBarSeriesView&quot;)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ((BarSeriesView)series.View).AxisY = myAxis;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else</div><div class=\"line\">    &#123;</div><div class=\"line\">        ((LineSeriesView)series.View).AxisY = myAxis;</div><div class=\"line\">    &#125;</div><div class=\"line\">    myAxis.Title.Text = series.Name;</div><div class=\"line\">    myAxis.Title.Alignment = StringAlignment.Far; //顶部对齐</div><div class=\"line\">    myAxis.Title.Visible = true; //显示标题</div><div class=\"line\">    myAxis.Title.Font = new Font(&quot;宋体&quot;, 9.0f);</div><div class=\"line\">    Color color = series.View.Color;//设置坐标的颜色和图表线条颜色一致</div><div class=\"line\">    myAxis.Title.TextColor = color;</div><div class=\"line\">    myAxis.Label.TextColor = color;</div><div class=\"line\">    myAxis.Color = color;</div><div class=\"line\">    return myAxis;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据图形对象创建图表时调用CreateAxisY方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 根据图形对象创建一个图表</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;chartControl&quot;&gt;图表绑定控件&lt;/param&gt;</div><div class=\"line\">/// &lt;param name=&quot;list&quot;&gt;图表中的图形展现&lt;/param&gt;</div><div class=\"line\">/// &lt;returns&gt;&lt;/returns&gt;</div><div class=\"line\">private void CreateChart(ChartControl chartControl, List&lt;Series&gt; list)</div><div class=\"line\">&#123;</div><div class=\"line\">    chartControl.Series.AddRange(list.ToArray());</div><div class=\"line\">    chartControl.Legend.Visible = false;</div><div class=\"line\">    chartControl.SeriesTemplate.LabelsVisibility = DefaultBoolean.False;</div><div class=\"line\">    //XYDiagram diagram = (XYDiagram)chartControl1.Diagram;</div><div class=\"line\">    //diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;</div><div class=\"line\">    //diagram.AxisX.DateTimeOptions.FormatString = &quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class=\"line\">    /*------------------------------------新增--------------------------------*/</div><div class=\"line\">    //删除之前的第二坐标系，如果不删除会一直重复添加</div><div class=\"line\">    ((XYDiagram)chartControl1.Diagram).SecondaryAxesY.Clear();</div><div class=\"line\">    for (int i = 0; i &lt; list.Count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        list[i].View.Color = Color.FromArgb(rand.Next(0, 255), rand.Next(0, 255), rand.Next(0, 255));</div><div class=\"line\">        CreateAxisY(list[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-折线图，柱状图设置缩放与滚动，并设置每页显示条数\"><a href=\"#2-折线图，柱状图设置缩放与滚动，并设置每页显示条数\" class=\"headerlink\" title=\"2. 折线图，柱状图设置缩放与滚动，并设置每页显示条数\"></a>2. 折线图，柱状图设置缩放与滚动，并设置每页显示条数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//设置滚动条</div><div class=\"line\">int cnt = 20;</div><div class=\"line\">DevExpress.XtraCharts.XYDiagram xyDiagram1 = (XYDiagram)chartControl1.Diagram;</div><div class=\"line\">xyDiagram1.AxisX.Range.Auto = false; //要开启滚动条必须将其设置为false</div><div class=\"line\">xyDiagram1.AxisX.Range.MaxValueInternal = 30.5D &gt; (cnt + 1) ? (cnt + 1) : 30.5D;//在不拉到滚动条的时候，X轴显示多个值，既固定的X轴长度。</div><div class=\"line\">xyDiagram1.AxisX.Range.MinValueInternal = -0.5D;</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.Auto = false;</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.MaxValueSerializable = (cnt + 1).ToString();//整个X轴最多显示多多少个值</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.MinValueSerializable = &quot;0&quot;;</div><div class=\"line\">xyDiagram1.AxisX.Range.ScrollingRange.SideMarginsEnabled = true;//是否从X轴原点开始显示</div><div class=\"line\">xyDiagram1.AxisX.Range.SideMarginsEnabled = false;</div><div class=\"line\">xyDiagram1.AxisX.VisibleInPanesSerializable = &quot;-1&quot;;</div><div class=\"line\">xyDiagram1.EnableAxisXScrolling = true;//启用滚动条</div></pre></td></tr></table></figure>\n<h1 id=\"3-柱状图设置Label样式\"><a href=\"#3-柱状图设置Label样式\" class=\"headerlink\" title=\"3. 柱状图设置Label样式\"></a>3. 柱状图设置Label样式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BarSeriesLabel label = (BarSeriesLabel)series.Label;</div><div class=\"line\">label.Position = BarSeriesLabelPosition.Top;</div><div class=\"line\">label.TextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div></pre></td></tr></table></figure>\n<h1 id=\"4-饼状图设置显示样式\"><a href=\"#4-饼状图设置显示样式\" class=\"headerlink\" title=\"4. 饼状图设置显示样式\"></a>4. 饼状图设置显示样式</h1><p>DevExpress设置显示图表数据的样式是使用TextPattern来实现的，比如Label以及Legend等都是通过TextPattern或Pattern来设置的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//设置Legend的样式</div><div class=\"line\">_pieSeries.LegendPointOptions.PointView = PointView.ArgumentAndValues;</div><div class=\"line\">_pieSeries.LegendPointOptions.Pattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div><div class=\"line\">//设置Label的样式</div><div class=\"line\">label.Position = PieSeriesLabelPosition.Inside;</div><div class=\"line\">label.TextPattern = &quot;&#123;A&#125;: &#123;VP:P2&#125;&quot;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-设置饼状图数据显示方式（数值-百分比）\"><a href=\"#5-设置饼状图数据显示方式（数值-百分比）\" class=\"headerlink\" title=\"5. 设置饼状图数据显示方式（数值/百分比）\"></a>5. 设置饼状图数据显示方式（数值/百分比）</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class ExtensionClass</div><div class=\"line\">&#123;</div><div class=\"line\">/// &lt;summary&gt;</div><div class=\"line\">/// 设置饼状Series显示方式（值/百分比）</div><div class=\"line\">/// &lt;/summary&gt;</div><div class=\"line\">/// &lt;param name=&quot;series&quot;&gt;Series&lt;/param&gt;</div><div class=\"line\">public static void SetPiePercentage(this Series series)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif (series.View is PieSeriesView)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t//设置为值</div><div class=\"line\">\t\t//((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = false;</div><div class=\"line\">\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Number;</div><div class=\"line\">\t\t//((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">\t\t//设置为百分比</div><div class=\"line\">\t\t((PiePointOptions)series.PointOptions).PercentOptions.ValueAsPercent = true;</div><div class=\"line\">\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Format = NumericFormat.Percent;</div><div class=\"line\">\t\t((PiePointOptions)series.PointOptions).ValueNumericOptions.Precision = 0;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2bv0o5e0001poc5rbe37bik","category_id":"cj2bv0o5t0004poc59vxno6gq","_id":"cj2bv0o69000epoc5e1znb0bx"},{"post_id":"cj2bv0o5t0003poc5rg3mhlhx","category_id":"cj2bv0o69000apoc5fg5l52hl","_id":"cj2bv0o6o000kpoc5cb64jn83"},{"post_id":"cj2bv0o69000fpoc5pfmo884x","category_id":"cj2bv0o69000apoc5fg5l52hl","_id":"cj2bv0o6o000opoc50zufniwn"},{"post_id":"cj2bv0o6o000ipoc5i56nadrs","category_id":"cj2bv0o69000apoc5fg5l52hl","_id":"cj2bv0o74000rpoc5e9aw0gyl"},{"post_id":"cj2bv0o5t0007poc5748ougw5","category_id":"cj2bv0o6o000gpoc520ju6ryv","_id":"cj2bv0o7k000wpoc5eet7txuk"},{"post_id":"cj2bv0o690008poc5wtl9etrm","category_id":"cj2bv0o6o000gpoc520ju6ryv","_id":"cj2bv0o7k000ypoc5xhdi6j3l"},{"post_id":"cj2bv0o74000vpoc51kwqlhw8","category_id":"cj2bv0o69000apoc5fg5l52hl","_id":"cj2bv0o7k0012poc5eshv26l5"},{"post_id":"cj2bv0o690009poc5wm1b74mi","category_id":"cj2bv0o74000tpoc5uv58f4f1","_id":"cj2bv0o7k0014poc5c389v0j3"},{"post_id":"cj2bv0o69000dpoc53oqroou1","category_id":"cj2bv0o74000tpoc5uv58f4f1","_id":"cj2bv0o7k0018poc5goy1c51k"},{"post_id":"cj2bv0o6o000jpoc5tw8nprf3","category_id":"cj2bv0o7k0016poc5xlgf2u2o","_id":"cj2bv0o7k001cpoc5jf464lt1"},{"post_id":"cj2bv0o74000qpoc5ga4pdhfe","category_id":"cj2bv0o7k0019poc56uszjfw5","_id":"cj2bv0o7k001fpoc5hmeoval5"}],"PostTag":[{"post_id":"cj2bv0o5e0001poc5rbe37bik","tag_id":"cj2bv0o5t0005poc5us5nuw8a","_id":"cj2bv0o69000cpoc5umyde26r"},{"post_id":"cj2bv0o5t0003poc5rg3mhlhx","tag_id":"cj2bv0o69000bpoc5vz489i6z","_id":"cj2bv0o74000ppoc54gpgrsow"},{"post_id":"cj2bv0o5t0003poc5rg3mhlhx","tag_id":"cj2bv0o6o000hpoc5ugd8r7wb","_id":"cj2bv0o74000spoc5vstjqpod"},{"post_id":"cj2bv0o5t0007poc5748ougw5","tag_id":"cj2bv0o6o000mpoc5w4tsyq3y","_id":"cj2bv0o7k000xpoc513we4yhk"},{"post_id":"cj2bv0o74000vpoc51kwqlhw8","tag_id":"cj2bv0o69000bpoc5vz489i6z","_id":"cj2bv0o7k000zpoc5u1idv7n6"},{"post_id":"cj2bv0o74000vpoc51kwqlhw8","tag_id":"cj2bv0o6o000hpoc5ugd8r7wb","_id":"cj2bv0o7k0013poc55ctreazl"},{"post_id":"cj2bv0o690008poc5wtl9etrm","tag_id":"cj2bv0o74000upoc56f9rbkwr","_id":"cj2bv0o7k0015poc5519jy75x"},{"post_id":"cj2bv0o690009poc5wm1b74mi","tag_id":"cj2bv0o7k0011poc5qfxc1p6w","_id":"cj2bv0o7k001bpoc5130rtvde"},{"post_id":"cj2bv0o690009poc5wm1b74mi","tag_id":"cj2bv0o7k0017poc54otletdt","_id":"cj2bv0o7k001dpoc5py0crfyd"},{"post_id":"cj2bv0o69000dpoc53oqroou1","tag_id":"cj2bv0o7k0011poc5qfxc1p6w","_id":"cj2bv0o7z001hpoc57um2wjzy"},{"post_id":"cj2bv0o69000dpoc53oqroou1","tag_id":"cj2bv0o7k001epoc5fwhsji83","_id":"cj2bv0o7z001ipoc5t2ut299y"},{"post_id":"cj2bv0o69000fpoc5pfmo884x","tag_id":"cj2bv0o69000bpoc5vz489i6z","_id":"cj2bv0o7z001kpoc5ia49t8lu"},{"post_id":"cj2bv0o69000fpoc5pfmo884x","tag_id":"cj2bv0o7z001gpoc57s5xt1y8","_id":"cj2bv0o7z001lpoc50g1jcbwb"},{"post_id":"cj2bv0o6o000ipoc5i56nadrs","tag_id":"cj2bv0o69000bpoc5vz489i6z","_id":"cj2bv0o7z001npoc5qo86rpfl"},{"post_id":"cj2bv0o6o000ipoc5i56nadrs","tag_id":"cj2bv0o7z001gpoc57s5xt1y8","_id":"cj2bv0o7z001opoc5i3uol161"},{"post_id":"cj2bv0o6o000jpoc5tw8nprf3","tag_id":"cj2bv0o7z001mpoc598aev8ou","_id":"cj2bv0o7z001qpoc5rz0km3v4"},{"post_id":"cj2bv0o74000qpoc5ga4pdhfe","tag_id":"cj2bv0o7z001ppoc5s0ykks8v","_id":"cj2bv0o7z001spoc5pmoc3gou"},{"post_id":"cj2bv0o74000qpoc5ga4pdhfe","tag_id":"cj2bv0o7z001rpoc597l61dpz","_id":"cj2bv0o7z001tpoc5svfoo6t0"}],"Tag":[{"name":"HTML+CSS","_id":"cj2bv0o5t0005poc5us5nuw8a"},{"name":"DevExpress Chart","_id":"cj2bv0o69000bpoc5vz489i6z"},{"name":"WinForm","_id":"cj2bv0o6o000hpoc5ugd8r7wb"},{"name":"Git","_id":"cj2bv0o6o000mpoc5w4tsyq3y"},{"name":"hexo","_id":"cj2bv0o74000upoc56f9rbkwr"},{"name":"Java","_id":"cj2bv0o7k0011poc5qfxc1p6w"},{"name":"Socekt","_id":"cj2bv0o7k0017poc54otletdt"},{"name":"多线程","_id":"cj2bv0o7k001epoc5fwhsji83"},{"name":"WPF","_id":"cj2bv0o7z001gpoc57s5xt1y8"},{"name":"计算机网络","_id":"cj2bv0o7z001mpoc598aev8ou"},{"name":"正则表达式","_id":"cj2bv0o7z001ppoc5s0ykks8v"},{"name":"JavaScript","_id":"cj2bv0o7z001rpoc597l61dpz"}]}}